// Copyright 2019 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// NOTE: This file is automatically-generated!
import Foundation
import Dispatch
import OAuth2
import GoogleAPIRuntime
import Commander

let CLIENT_CREDENTIALS = "compute.json"
let TOKEN = "compute.json"

func main() throws {
  let scopes = [
    "https://www.googleapis.com/auth/cloud-platform",
    "https://www.googleapis.com/auth/compute",
    "https://www.googleapis.com/auth/compute.readonly",
    "https://www.googleapis.com/auth/devstorage.full_control",
    "https://www.googleapis.com/auth/devstorage.read_only",
    "https://www.googleapis.com/auth/devstorage.read_write"]

  guard let tokenProvider = BrowserTokenProvider(credentials:CLIENT_CREDENTIALS, token:TOKEN) else {
    return
  }
  let compute = try Compute(tokenProvider:tokenProvider)

  let group = Group {
    $0.command("login", description:"Log in with browser-based authentication.") {
      try tokenProvider.signIn(scopes:scopes)
      try tokenProvider.saveToken(TOKEN)
    }

    $0.command(
      "acceleratorTypes.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of accelerator types.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.AcceleratorTypesAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.acceleratorTypes_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "acceleratorTypes.get",
      Options<String>("p_acceleratorType", default: [], count: 1, description: "Name of the accelerator type to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Returns the specified accelerator type.") {
      p_acceleratorType, p_project, p_zone in
      do {
        var parameters = Compute.AcceleratorTypesGetParameters()
        if let p_acceleratorType = p_acceleratorType.first {
          parameters.acceleratorType = p_acceleratorType
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.acceleratorTypes_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "acceleratorTypes.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Retrieves a list of accelerator types available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_zone in
      do {
        var parameters = Compute.AcceleratorTypesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.acceleratorTypes_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "addresses.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of addresses.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.AddressesAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.addresses_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "addresses.delete",
      Options<String>("p_address", default: [], count: 1, description: "Name of the address resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified address resource.") {
      p_address, p_project, p_region, p_requestId in
      do {
        var parameters = Compute.AddressesDeleteParameters()
        if let p_address = p_address.first {
          parameters.address = p_address
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.addresses_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "addresses.get",
      Options<String>("p_address", default: [], count: 1, description: "Name of the address resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      description: "Returns the specified address resource.") {
      p_address, p_project, p_region in
      do {
        var parameters = Compute.AddressesGetParameters()
        if let p_address = p_address.first {
          parameters.address = p_address
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.addresses_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "addresses.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_address", default: [], count: 1, description: "The static IP address represented by this resource."),
      Options<String>("r_addressType", default: [], count: 1, description: "The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_ipVersion", default: [], count: 1, description: "The IP Version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#address for addresses."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_network", default: [], count: 1, description: "The URL of the network in which to reserve the address. This field can only be used with INTERNAL type with VPC_PEERING purpose."),
      Options<String>("r_networkTier", default: [], count: 1, description: "This signifies the networking tier used for configuring this Address and can only take the following values: PREMIUM, STANDARD. Global forwarding rules can only be Premium Tier. Regional forwarding rules can be either Premium or Standard Tier. Standard Tier addresses applied to regional forwarding rules can be used with any external load balancer. Regional forwarding rules in Premium Tier can only be used with a Network load balancer.  If this field is not specified, it is assumed to be PREMIUM."),
      Options<Int>("r_prefixLength", default: [], count: 1, description: "The prefix length if the resource reprensents an IP range."),
      Options<String>("r_purpose", default: [], count: 1, description: "The purpose of resource, only used with INTERNAL type."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the regional address resides. This field is not applicable to global addresses. You must specify this field as part of the HTTP request URL. You cannot set this field in the request body."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available."),
      Options<String>("r_subnetwork", default: [], count: 1, description: "The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the subnetwork's IP range. This field can only be used with INTERNAL type with GCE_ENDPOINT/DNS_RESOLVER purposes."),
      VariadicOption<String>("r_users", default: [], description: "[Output Only] The URLs of the resources that are using this address."),
      description: "Creates an address resource in the specified project using the data included in the request.") {
      p_project, p_region, p_requestId, r_address, r_addressType, r_creationTimestamp, r_description, r_id, r_ipVersion, r_kind, r_name, r_network, r_networkTier, r_prefixLength, r_purpose, r_region, r_selfLink, r_status, r_subnetwork, r_users in
      do {
        var parameters = Compute.AddressesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Address()
        if let r_address = r_address.first {
          request.address = r_address
        }
        if let r_addressType = r_addressType.first {
          request.addressType = r_addressType
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_ipVersion = r_ipVersion.first {
          request.ipVersion = r_ipVersion
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_network = r_network.first {
          request.network = r_network
        }
        if let r_networkTier = r_networkTier.first {
          request.networkTier = r_networkTier
        }
        if let r_prefixLength = r_prefixLength.first {
          request.prefixLength = r_prefixLength
        }
        if let r_purpose = r_purpose.first {
          request.purpose = r_purpose
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if let r_subnetwork = r_subnetwork.first {
          request.subnetwork = r_subnetwork
        }
        if r_users.count > 0 {
          request.users = r_users
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.addresses_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "addresses.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      description: "Retrieves a list of addresses contained within the specified region.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.AddressesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.addresses_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "autoscalers.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of autoscalers.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.AutoscalersAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.autoscalers_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "autoscalers.delete",
      Options<String>("p_autoscaler", default: [], count: 1, description: "Name of the autoscaler to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "Name of the zone for this request."),
      description: "Deletes the specified autoscaler.") {
      p_autoscaler, p_project, p_requestId, p_zone in
      do {
        var parameters = Compute.AutoscalersDeleteParameters()
        if let p_autoscaler = p_autoscaler.first {
          parameters.autoscaler = p_autoscaler
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.autoscalers_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "autoscalers.get",
      Options<String>("p_autoscaler", default: [], count: 1, description: "Name of the autoscaler to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "Name of the zone for this request."),
      description: "Returns the specified autoscaler resource. Gets a list of available autoscalers by making a list() request.") {
      p_autoscaler, p_project, p_zone in
      do {
        var parameters = Compute.AutoscalersGetParameters()
        if let p_autoscaler = p_autoscaler.first {
          parameters.autoscaler = p_autoscaler
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.autoscalers_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "autoscalers.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "Name of the zone for this request."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#autoscaler for autoscalers."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the instance group resides (for autoscalers living in regional scope)."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] The status of the autoscaler configuration."),
      Options<String>("r_target", default: [], count: 1, description: "URL of the managed instance group that this autoscaler will scale."),
      Options<String>("r_zone", default: [], count: 1, description: "[Output Only] URL of the zone where the instance group resides (for autoscalers living in zonal scope)."),
      description: "Creates an autoscaler in the specified project using the data included in the request.") {
      p_project, p_requestId, p_zone,r_creationTimestamp, r_description, r_id, r_kind, r_name, r_region, r_selfLink, r_status, r_target, r_zone in
      do {
        var parameters = Compute.AutoscalersInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.Autoscaler()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if let r_target = r_target.first {
          request.target = r_target
        }
        if let r_zone = r_zone.first {
          request.zone = r_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.autoscalers_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "autoscalers.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "Name of the zone for this request."),
      description: "Retrieves a list of autoscalers contained within the specified zone.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_zone in
      do {
        var parameters = Compute.AutoscalersListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.autoscalers_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "autoscalers.patch",
      Options<String>("p_autoscaler", default: [], count: 1, description: "Name of the autoscaler to patch."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "Name of the zone for this request."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#autoscaler for autoscalers."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the instance group resides (for autoscalers living in regional scope)."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] The status of the autoscaler configuration."),
      Options<String>("r_target", default: [], count: 1, description: "URL of the managed instance group that this autoscaler will scale."),
      Options<String>("r_zone", default: [], count: 1, description: "[Output Only] URL of the zone where the instance group resides (for autoscalers living in zonal scope)."),
      description: "Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.") {
      p_autoscaler, p_project, p_requestId, p_zone,r_creationTimestamp, r_description, r_id, r_kind, r_name, r_region, r_selfLink, r_status, r_target, r_zone in
      do {
        var parameters = Compute.AutoscalersPatchParameters()
        if let p_autoscaler = p_autoscaler.first {
          parameters.autoscaler = p_autoscaler
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.Autoscaler()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if let r_target = r_target.first {
          request.target = r_target
        }
        if let r_zone = r_zone.first {
          request.zone = r_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.autoscalers_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "autoscalers.update",
      Options<String>("p_autoscaler", default: [], count: 1, description: "Name of the autoscaler to update."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "Name of the zone for this request."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#autoscaler for autoscalers."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the instance group resides (for autoscalers living in regional scope)."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] The status of the autoscaler configuration."),
      Options<String>("r_target", default: [], count: 1, description: "URL of the managed instance group that this autoscaler will scale."),
      Options<String>("r_zone", default: [], count: 1, description: "[Output Only] URL of the zone where the instance group resides (for autoscalers living in zonal scope)."),
      description: "Updates an autoscaler in the specified project using the data included in the request.") {
      p_autoscaler, p_project, p_requestId, p_zone,r_creationTimestamp, r_description, r_id, r_kind, r_name, r_region, r_selfLink, r_status, r_target, r_zone in
      do {
        var parameters = Compute.AutoscalersUpdateParameters()
        if let p_autoscaler = p_autoscaler.first {
          parameters.autoscaler = p_autoscaler
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.Autoscaler()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if let r_target = r_target.first {
          request.target = r_target
        }
        if let r_zone = r_zone.first {
          request.zone = r_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.autoscalers_update(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendBuckets.addSignedUrlKey",
      Options<String>("p_backendBucket", default: [], count: 1, description: "Name of the BackendBucket resource to which the Signed URL Key should be added. The name should conform to RFC1035."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_keyName", default: [], count: 1, description: "Name of the key. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_keyValue", default: [], count: 1, description: "128-bit key value used for signing the URL. The key value must be a valid RFC 4648 Section 5 base64url encoded string."),
      description: "Adds a key for validating requests with signed URLs for this backend bucket.") {
      p_backendBucket, p_project, p_requestId,r_keyName, r_keyValue in
      do {
        var parameters = Compute.BackendBucketsAddSignedUrlKeyParameters()
        if let p_backendBucket = p_backendBucket.first {
          parameters.backendBucket = p_backendBucket
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.SignedUrlKey()
        if let r_keyName = r_keyName.first {
          request.keyName = r_keyName
        }
        if let r_keyValue = r_keyValue.first {
          request.keyValue = r_keyValue
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendBuckets_addSignedUrlKey(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendBuckets.delete",
      Options<String>("p_backendBucket", default: [], count: 1, description: "Name of the BackendBucket resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified BackendBucket resource.") {
      p_backendBucket, p_project, p_requestId in
      do {
        var parameters = Compute.BackendBucketsDeleteParameters()
        if let p_backendBucket = p_backendBucket.first {
          parameters.backendBucket = p_backendBucket
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendBuckets_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendBuckets.deleteSignedUrlKey",
      Options<String>("p_backendBucket", default: [], count: 1, description: "Name of the BackendBucket resource to which the Signed URL Key should be added. The name should conform to RFC1035."),
      Options<String>("p_keyName", default: [], count: 1, description: "The name of the Signed URL Key to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes a key for validating requests with signed URLs for this backend bucket.") {
      p_backendBucket, p_keyName, p_project, p_requestId in
      do {
        var parameters = Compute.BackendBucketsDeleteSignedUrlKeyParameters()
        if let p_backendBucket = p_backendBucket.first {
          parameters.backendBucket = p_backendBucket
        }
        if let p_keyName = p_keyName.first {
          parameters.keyName = p_keyName
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendBuckets_deleteSignedUrlKey(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendBuckets.get",
      Options<String>("p_backendBucket", default: [], count: 1, description: "Name of the BackendBucket resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Returns the specified BackendBucket resource. Gets a list of available backend buckets by making a list() request.") {
      p_backendBucket, p_project in
      do {
        var parameters = Compute.BackendBucketsGetParameters()
        if let p_backendBucket = p_backendBucket.first {
          parameters.backendBucket = p_backendBucket
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendBuckets_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendBuckets.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_bucketName", default: [], count: 1, description: "Cloud Storage bucket name."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional textual description of the resource; provided by the client when the resource is created."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] Unique identifier for the resource; defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "Type of the resource."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      description: "Creates a BackendBucket resource in the specified project using the data included in the request.") {
      p_project, p_requestId,r_bucketName, r_creationTimestamp, r_description, r_id, r_kind, r_name, r_selfLink in
      do {
        var parameters = Compute.BackendBucketsInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.BackendBucket()
        if let r_bucketName = r_bucketName.first {
          request.bucketName = r_bucketName
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendBuckets_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendBuckets.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of BackendBucket resources available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.BackendBucketsListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendBuckets_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendBuckets.patch",
      Options<String>("p_backendBucket", default: [], count: 1, description: "Name of the BackendBucket resource to patch."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_bucketName", default: [], count: 1, description: "Cloud Storage bucket name."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional textual description of the resource; provided by the client when the resource is created."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] Unique identifier for the resource; defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "Type of the resource."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      description: "Updates the specified BackendBucket resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.") {
      p_backendBucket, p_project, p_requestId,r_bucketName, r_creationTimestamp, r_description, r_id, r_kind, r_name, r_selfLink in
      do {
        var parameters = Compute.BackendBucketsPatchParameters()
        if let p_backendBucket = p_backendBucket.first {
          parameters.backendBucket = p_backendBucket
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.BackendBucket()
        if let r_bucketName = r_bucketName.first {
          request.bucketName = r_bucketName
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendBuckets_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendBuckets.update",
      Options<String>("p_backendBucket", default: [], count: 1, description: "Name of the BackendBucket resource to update."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_bucketName", default: [], count: 1, description: "Cloud Storage bucket name."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional textual description of the resource; provided by the client when the resource is created."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] Unique identifier for the resource; defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "Type of the resource."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      description: "Updates the specified BackendBucket resource with the data included in the request.") {
      p_backendBucket, p_project, p_requestId,r_bucketName, r_creationTimestamp, r_description, r_id, r_kind, r_name, r_selfLink in
      do {
        var parameters = Compute.BackendBucketsUpdateParameters()
        if let p_backendBucket = p_backendBucket.first {
          parameters.backendBucket = p_backendBucket
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.BackendBucket()
        if let r_bucketName = r_bucketName.first {
          request.bucketName = r_bucketName
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendBuckets_update(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendServices.addSignedUrlKey",
      Options<String>("p_backendService", default: [], count: 1, description: "Name of the BackendService resource to which the Signed URL Key should be added. The name should conform to RFC1035."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_keyName", default: [], count: 1, description: "Name of the key. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_keyValue", default: [], count: 1, description: "128-bit key value used for signing the URL. The key value must be a valid RFC 4648 Section 5 base64url encoded string."),
      description: "Adds a key for validating requests with signed URLs for this backend service.") {
      p_backendService, p_project, p_requestId,r_keyName, r_keyValue in
      do {
        var parameters = Compute.BackendServicesAddSignedUrlKeyParameters()
        if let p_backendService = p_backendService.first {
          parameters.backendService = p_backendService
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.SignedUrlKey()
        if let r_keyName = r_keyName.first {
          request.keyName = r_keyName
        }
        if let r_keyValue = r_keyValue.first {
          request.keyValue = r_keyValue
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendServices_addSignedUrlKey(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendServices.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Name of the project scoping this request."),
      description: "Retrieves the list of all BackendService resources, regional and global, available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.BackendServicesAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendServices_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendServices.delete",
      Options<String>("p_backendService", default: [], count: 1, description: "Name of the BackendService resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified BackendService resource.") {
      p_backendService, p_project, p_requestId in
      do {
        var parameters = Compute.BackendServicesDeleteParameters()
        if let p_backendService = p_backendService.first {
          parameters.backendService = p_backendService
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendServices_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendServices.deleteSignedUrlKey",
      Options<String>("p_backendService", default: [], count: 1, description: "Name of the BackendService resource to which the Signed URL Key should be added. The name should conform to RFC1035."),
      Options<String>("p_keyName", default: [], count: 1, description: "The name of the Signed URL Key to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes a key for validating requests with signed URLs for this backend service.") {
      p_backendService, p_keyName, p_project, p_requestId in
      do {
        var parameters = Compute.BackendServicesDeleteSignedUrlKeyParameters()
        if let p_backendService = p_backendService.first {
          parameters.backendService = p_backendService
        }
        if let p_keyName = p_keyName.first {
          parameters.keyName = p_keyName
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendServices_deleteSignedUrlKey(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendServices.get",
      Options<String>("p_backendService", default: [], count: 1, description: "Name of the BackendService resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Returns the specified BackendService resource. Gets a list of available backend services.") {
      p_backendService, p_project in
      do {
        var parameters = Compute.BackendServicesGetParameters()
        if let p_backendService = p_backendService.first {
          parameters.backendService = p_backendService
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendServices_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendServices.getHealth",
      Options<String>("p_backendService", default: [], count: 1, description: "Name of the BackendService resource to which the queried instance belongs."),
      Options<String>("p_project", default: [], count: 1, description: ""),
      Options<String>("r_group", default: [], count: 1, description: "A URI referencing one of the instance groups or network endpoint groups listed in the backend service."),
      description: "Gets the most recent health check results for this BackendService.") {
      p_backendService, p_project,r_group in
      do {
        var parameters = Compute.BackendServicesGetHealthParameters()
        if let p_backendService = p_backendService.first {
          parameters.backendService = p_backendService
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        var request = Compute.ResourceGroupReference()
        if let r_group = r_group.first {
          request.group = r_group
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendServices_getHealth(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendServices.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<Int>("r_affinityCookieTtlSec", default: [], count: 1, description: "Lifetime of cookies in seconds if session_affinity is GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value for TTL is one day.  When the load balancing scheme is INTERNAL, this field is not used."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a BackendService."),
      VariadicOption<String>("r_healthChecks", default: [], description: "The list of URLs to the HttpHealthCheck or HttpsHealthCheck resource for health checking this BackendService. Currently at most one health check can be specified, and a health check is required for Compute Engine backend services. A health check must not be specified for App Engine backend and Cloud Function backend.  For internal load balancing, a URL to a HealthCheck resource must be specified instead."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of resource. Always compute#backendService for backend services."),
      Options<String>("r_loadBalancingScheme", default: [], count: 1, description: "Indicates whether the backend service will be used with internal or external load balancing. A backend service created for one type of load balancing cannot be used with the other. Possible values are INTERNAL and EXTERNAL."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<Int>("r_port", default: [], count: 1, description: "Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80.  This cannot be used for internal load balancing."),
      Options<String>("r_portName", default: [], count: 1, description: "Name of backend port. The same name should appear in the instance groups referenced by this service. Required when the load balancing scheme is EXTERNAL.  When the load balancing scheme is INTERNAL, this field is not used."),
      Options<String>("r_protocol", default: [], count: 1, description: "The protocol this BackendService uses to communicate with backends.  Possible values are HTTP, HTTPS, TCP, and SSL. The default is HTTP.  For internal load balancing, the possible values are TCP and UDP, and the default is TCP."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      Options<String>("r_securityPolicy", default: [], count: 1, description: "[Output Only] The resource URL for the security policy associated with this backend service."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_sessionAffinity", default: [], count: 1, description: "Type of session affinity to use. The default is NONE.  When the load balancing scheme is EXTERNAL, can be NONE, CLIENT_IP, or GENERATED_COOKIE.  When the load balancing scheme is INTERNAL, can be NONE, CLIENT_IP, CLIENT_IP_PROTO, or CLIENT_IP_PORT_PROTO.  When the protocol is UDP, this field is not used."),
      Options<Int>("r_timeoutSec", default: [], count: 1, description: "How many seconds to wait for the backend before considering it a failed request. Default is 30 seconds."),
      description: "Creates a BackendService resource in the specified project using the data included in the request. There are several restrictions and guidelines to keep in mind when creating a backend service. Read  Restrictions and Guidelines for more information.") {
      p_project, p_requestId,r_affinityCookieTtlSec, r_creationTimestamp, r_description, r_fingerprint, r_healthChecks, r_id, r_kind, r_loadBalancingScheme, r_name, r_port, r_portName, r_protocol, r_region, r_securityPolicy, r_selfLink, r_sessionAffinity, r_timeoutSec in
      do {
        var parameters = Compute.BackendServicesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.BackendService()
        if let r_affinityCookieTtlSec = r_affinityCookieTtlSec.first {
          request.affinityCookieTtlSec = r_affinityCookieTtlSec
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if r_healthChecks.count > 0 {
          request.healthChecks = r_healthChecks
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_loadBalancingScheme = r_loadBalancingScheme.first {
          request.loadBalancingScheme = r_loadBalancingScheme
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_port = r_port.first {
          request.port = r_port
        }
        if let r_portName = r_portName.first {
          request.portName = r_portName
        }
        if let r_protocol = r_protocol.first {
          request.protocol = r_protocol
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_securityPolicy = r_securityPolicy.first {
          request.securityPolicy = r_securityPolicy
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_sessionAffinity = r_sessionAffinity.first {
          request.sessionAffinity = r_sessionAffinity
        }
        if let r_timeoutSec = r_timeoutSec.first {
          request.timeoutSec = r_timeoutSec
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendServices_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendServices.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of BackendService resources available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.BackendServicesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendServices_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendServices.patch",
      Options<String>("p_backendService", default: [], count: 1, description: "Name of the BackendService resource to patch."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<Int>("r_affinityCookieTtlSec", default: [], count: 1, description: "Lifetime of cookies in seconds if session_affinity is GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value for TTL is one day.  When the load balancing scheme is INTERNAL, this field is not used."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a BackendService."),
      VariadicOption<String>("r_healthChecks", default: [], description: "The list of URLs to the HttpHealthCheck or HttpsHealthCheck resource for health checking this BackendService. Currently at most one health check can be specified, and a health check is required for Compute Engine backend services. A health check must not be specified for App Engine backend and Cloud Function backend.  For internal load balancing, a URL to a HealthCheck resource must be specified instead."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of resource. Always compute#backendService for backend services."),
      Options<String>("r_loadBalancingScheme", default: [], count: 1, description: "Indicates whether the backend service will be used with internal or external load balancing. A backend service created for one type of load balancing cannot be used with the other. Possible values are INTERNAL and EXTERNAL."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<Int>("r_port", default: [], count: 1, description: "Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80.  This cannot be used for internal load balancing."),
      Options<String>("r_portName", default: [], count: 1, description: "Name of backend port. The same name should appear in the instance groups referenced by this service. Required when the load balancing scheme is EXTERNAL.  When the load balancing scheme is INTERNAL, this field is not used."),
      Options<String>("r_protocol", default: [], count: 1, description: "The protocol this BackendService uses to communicate with backends.  Possible values are HTTP, HTTPS, TCP, and SSL. The default is HTTP.  For internal load balancing, the possible values are TCP and UDP, and the default is TCP."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      Options<String>("r_securityPolicy", default: [], count: 1, description: "[Output Only] The resource URL for the security policy associated with this backend service."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_sessionAffinity", default: [], count: 1, description: "Type of session affinity to use. The default is NONE.  When the load balancing scheme is EXTERNAL, can be NONE, CLIENT_IP, or GENERATED_COOKIE.  When the load balancing scheme is INTERNAL, can be NONE, CLIENT_IP, CLIENT_IP_PROTO, or CLIENT_IP_PORT_PROTO.  When the protocol is UDP, this field is not used."),
      Options<Int>("r_timeoutSec", default: [], count: 1, description: "How many seconds to wait for the backend before considering it a failed request. Default is 30 seconds."),
      description: "Patches the specified BackendService resource with the data included in the request. There are several restrictions and guidelines to keep in mind when updating a backend service. Read  Restrictions and Guidelines for more information. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.") {
      p_backendService, p_project, p_requestId,r_affinityCookieTtlSec, r_creationTimestamp, r_description, r_fingerprint, r_healthChecks, r_id, r_kind, r_loadBalancingScheme, r_name, r_port, r_portName, r_protocol, r_region, r_securityPolicy, r_selfLink, r_sessionAffinity, r_timeoutSec in
      do {
        var parameters = Compute.BackendServicesPatchParameters()
        if let p_backendService = p_backendService.first {
          parameters.backendService = p_backendService
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.BackendService()
        if let r_affinityCookieTtlSec = r_affinityCookieTtlSec.first {
          request.affinityCookieTtlSec = r_affinityCookieTtlSec
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if r_healthChecks.count > 0 {
          request.healthChecks = r_healthChecks
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_loadBalancingScheme = r_loadBalancingScheme.first {
          request.loadBalancingScheme = r_loadBalancingScheme
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_port = r_port.first {
          request.port = r_port
        }
        if let r_portName = r_portName.first {
          request.portName = r_portName
        }
        if let r_protocol = r_protocol.first {
          request.protocol = r_protocol
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_securityPolicy = r_securityPolicy.first {
          request.securityPolicy = r_securityPolicy
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_sessionAffinity = r_sessionAffinity.first {
          request.sessionAffinity = r_sessionAffinity
        }
        if let r_timeoutSec = r_timeoutSec.first {
          request.timeoutSec = r_timeoutSec
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendServices_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendServices.setSecurityPolicy",
      Options<String>("p_backendService", default: [], count: 1, description: "Name of the BackendService resource to which the security policy should be set. The name should conform to RFC1035."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_securityPolicy", default: [], count: 1, description: ""),
      description: "Sets the security policy for the specified backend service.") {
      p_backendService, p_project, p_requestId,r_securityPolicy in
      do {
        var parameters = Compute.BackendServicesSetSecurityPolicyParameters()
        if let p_backendService = p_backendService.first {
          parameters.backendService = p_backendService
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.SecurityPolicyReference()
        if let r_securityPolicy = r_securityPolicy.first {
          request.securityPolicy = r_securityPolicy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendServices_setSecurityPolicy(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "backendServices.update",
      Options<String>("p_backendService", default: [], count: 1, description: "Name of the BackendService resource to update."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<Int>("r_affinityCookieTtlSec", default: [], count: 1, description: "Lifetime of cookies in seconds if session_affinity is GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value for TTL is one day.  When the load balancing scheme is INTERNAL, this field is not used."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a BackendService."),
      VariadicOption<String>("r_healthChecks", default: [], description: "The list of URLs to the HttpHealthCheck or HttpsHealthCheck resource for health checking this BackendService. Currently at most one health check can be specified, and a health check is required for Compute Engine backend services. A health check must not be specified for App Engine backend and Cloud Function backend.  For internal load balancing, a URL to a HealthCheck resource must be specified instead."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of resource. Always compute#backendService for backend services."),
      Options<String>("r_loadBalancingScheme", default: [], count: 1, description: "Indicates whether the backend service will be used with internal or external load balancing. A backend service created for one type of load balancing cannot be used with the other. Possible values are INTERNAL and EXTERNAL."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<Int>("r_port", default: [], count: 1, description: "Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80.  This cannot be used for internal load balancing."),
      Options<String>("r_portName", default: [], count: 1, description: "Name of backend port. The same name should appear in the instance groups referenced by this service. Required when the load balancing scheme is EXTERNAL.  When the load balancing scheme is INTERNAL, this field is not used."),
      Options<String>("r_protocol", default: [], count: 1, description: "The protocol this BackendService uses to communicate with backends.  Possible values are HTTP, HTTPS, TCP, and SSL. The default is HTTP.  For internal load balancing, the possible values are TCP and UDP, and the default is TCP."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      Options<String>("r_securityPolicy", default: [], count: 1, description: "[Output Only] The resource URL for the security policy associated with this backend service."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_sessionAffinity", default: [], count: 1, description: "Type of session affinity to use. The default is NONE.  When the load balancing scheme is EXTERNAL, can be NONE, CLIENT_IP, or GENERATED_COOKIE.  When the load balancing scheme is INTERNAL, can be NONE, CLIENT_IP, CLIENT_IP_PROTO, or CLIENT_IP_PORT_PROTO.  When the protocol is UDP, this field is not used."),
      Options<Int>("r_timeoutSec", default: [], count: 1, description: "How many seconds to wait for the backend before considering it a failed request. Default is 30 seconds."),
      description: "Updates the specified BackendService resource with the data included in the request. There are several restrictions and guidelines to keep in mind when updating a backend service. Read  Restrictions and Guidelines for more information.") {
      p_backendService, p_project, p_requestId,r_affinityCookieTtlSec, r_creationTimestamp, r_description, r_fingerprint, r_healthChecks, r_id, r_kind, r_loadBalancingScheme, r_name, r_port, r_portName, r_protocol, r_region, r_securityPolicy, r_selfLink, r_sessionAffinity, r_timeoutSec in
      do {
        var parameters = Compute.BackendServicesUpdateParameters()
        if let p_backendService = p_backendService.first {
          parameters.backendService = p_backendService
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.BackendService()
        if let r_affinityCookieTtlSec = r_affinityCookieTtlSec.first {
          request.affinityCookieTtlSec = r_affinityCookieTtlSec
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if r_healthChecks.count > 0 {
          request.healthChecks = r_healthChecks
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_loadBalancingScheme = r_loadBalancingScheme.first {
          request.loadBalancingScheme = r_loadBalancingScheme
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_port = r_port.first {
          request.port = r_port
        }
        if let r_portName = r_portName.first {
          request.portName = r_portName
        }
        if let r_protocol = r_protocol.first {
          request.protocol = r_protocol
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_securityPolicy = r_securityPolicy.first {
          request.securityPolicy = r_securityPolicy
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_sessionAffinity = r_sessionAffinity.first {
          request.sessionAffinity = r_sessionAffinity
        }
        if let r_timeoutSec = r_timeoutSec.first {
          request.timeoutSec = r_timeoutSec
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.backendServices_update(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "diskTypes.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of disk types.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.DiskTypesAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.diskTypes_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "diskTypes.get",
      Options<String>("p_diskType", default: [], count: 1, description: "Name of the disk type to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Returns the specified disk type. Gets a list of available disk types by making a list() request.") {
      p_diskType, p_project, p_zone in
      do {
        var parameters = Compute.DiskTypesGetParameters()
        if let p_diskType = p_diskType.first {
          parameters.diskType = p_diskType
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.diskTypes_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "diskTypes.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Retrieves a list of disk types available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_zone in
      do {
        var parameters = Compute.DiskTypesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.diskTypes_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "disks.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of persistent disks.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.DisksAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.disks_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "disks.createSnapshot",
      Options<String>("p_disk", default: [], count: 1, description: "Name of the persistent disk to snapshot."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_diskSizeGb", default: [], count: 1, description: "[Output Only] Size of the snapshot, specified in GB."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#snapshot for Snapshot resources."),
      Options<String>("r_labelFingerprint", default: [], count: 1, description: "A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a snapshot."),
      VariadicOption<String>("r_licenseCodes", default: [], description: "[Output Only] Integer license codes indicating which licenses are attached to this snapshot."),
      VariadicOption<String>("r_licenses", default: [], description: "[Output Only] A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image)."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_sourceDisk", default: [], count: 1, description: "[Output Only] The source disk used to create this snapshot."),
      Options<String>("r_sourceDiskId", default: [], count: 1, description: "[Output Only] The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given disk name."),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING."),
      Options<String>("r_storageBytes", default: [], count: 1, description: "[Output Only] A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion."),
      Options<String>("r_storageBytesStatus", default: [], count: 1, description: "[Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date."),
      description: "Creates a snapshot of a specified persistent disk.") {
      p_disk, p_project, p_requestId, p_zone,r_creationTimestamp, r_description, r_diskSizeGb, r_id, r_kind, r_labelFingerprint, r_licenseCodes, r_licenses, r_name, r_selfLink, r_sourceDisk, r_sourceDiskId, r_status, r_storageBytes, r_storageBytesStatus in
      do {
        var parameters = Compute.DisksCreateSnapshotParameters()
        if let p_disk = p_disk.first {
          parameters.disk = p_disk
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.Snapshot()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_diskSizeGb = r_diskSizeGb.first {
          request.diskSizeGb = r_diskSizeGb
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_labelFingerprint = r_labelFingerprint.first {
          request.labelFingerprint = r_labelFingerprint
        }
        if r_licenseCodes.count > 0 {
          request.licenseCodes = r_licenseCodes
        }
        if r_licenses.count > 0 {
          request.licenses = r_licenses
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_sourceDisk = r_sourceDisk.first {
          request.sourceDisk = r_sourceDisk
        }
        if let r_sourceDiskId = r_sourceDiskId.first {
          request.sourceDiskId = r_sourceDiskId
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if let r_storageBytes = r_storageBytes.first {
          request.storageBytes = r_storageBytes
        }
        if let r_storageBytesStatus = r_storageBytesStatus.first {
          request.storageBytesStatus = r_storageBytesStatus
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.disks_createSnapshot(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "disks.delete",
      Options<String>("p_disk", default: [], count: 1, description: "Name of the persistent disk to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Deletes the specified persistent disk. Deleting a disk removes its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.") {
      p_disk, p_project, p_requestId, p_zone in
      do {
        var parameters = Compute.DisksDeleteParameters()
        if let p_disk = p_disk.first {
          parameters.disk = p_disk
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.disks_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "disks.get",
      Options<String>("p_disk", default: [], count: 1, description: "Name of the persistent disk to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Returns a specified persistent disk. Gets a list of available persistent disks by making a list() request.") {
      p_disk, p_project, p_zone in
      do {
        var parameters = Compute.DisksGetParameters()
        if let p_disk = p_disk.first {
          parameters.disk = p_disk
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.disks_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "disks.getIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Gets the access control policy for a resource. May be empty if no such policy or resource exists.") {
      p_project, p_resource, p_zone in
      do {
        var parameters = Compute.DisksGetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.disks_getIamPolicy(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "disks.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_sourceImage", default: [], count: 1, description: "Optional. Source image to restore onto a disk."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#disk for disks."),
      Options<String>("r_labelFingerprint", default: [], count: 1, description: "A fingerprint for the labels being applied to this disk, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a disk."),
      Options<String>("r_lastAttachTimestamp", default: [], count: 1, description: "[Output Only] Last attach timestamp in RFC3339 text format."),
      Options<String>("r_lastDetachTimestamp", default: [], count: 1, description: "[Output Only] Last detach timestamp in RFC3339 text format."),
      VariadicOption<String>("r_licenseCodes", default: [], description: "Integer license codes indicating which licenses are attached to this disk."),
      VariadicOption<String>("r_licenses", default: [], description: "A list of publicly visible licenses. Reserved for Google's use."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_options", default: [], count: 1, description: "Internal use only."),
      Options<String>("r_physicalBlockSizeBytes", default: [], count: 1, description: "Physical block size of the persistent disk, in bytes. If not present in a request, a default value is used. Currently supported sizes are 4096 and 16384, other sizes may be added in the future. If an unsupported value is requested, the error message will list the supported values for the caller's project."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the disk resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      VariadicOption<String>("r_replicaZones", default: [], description: "URLs of the zones where the disk should be replicated to. Only applicable for regional resources."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined fully-qualified URL for this resource."),
      Options<String>("r_sizeGb", default: [], count: 1, description: "Size of the persistent disk, specified in GB. You can specify this field when creating a persistent disk using the sourceImage or sourceSnapshot parameter, or specify it alone to create an empty persistent disk.  If you specify this field along with sourceImage or sourceSnapshot, the value of sizeGb must not be less than the size of the sourceImage or the size of the snapshot. Acceptable values are 1 to 65536, inclusive."),
      Options<String>("r_sourceImage", default: [], count: 1, description: "The source image used to create this disk. If the source image is deleted, this field will not be set.  To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9   Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD   To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image   You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family"),
      Options<String>("r_sourceImageId", default: [], count: 1, description: "[Output Only] The ID value of the image used to create this disk. This value identifies the exact image that was used to create this persistent disk. For example, if you created the persistent disk from an image that was later deleted and recreated under the same name, the source image ID would identify the exact version of the image that was used."),
      Options<String>("r_sourceSnapshot", default: [], count: 1, description: "The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values:   - https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot  - projects/project/global/snapshots/snapshot  - global/snapshots/snapshot"),
      Options<String>("r_sourceSnapshotId", default: [], count: 1, description: "[Output Only] The unique ID of the snapshot used to create this disk. This value identifies the exact snapshot that was used to create this persistent disk. For example, if you created the persistent disk from a snapshot that was later deleted and recreated under the same name, the source snapshot ID would identify the exact version of the snapshot that was used."),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] The status of disk creation."),
      Options<String>("r_type", default: [], count: 1, description: "URL of the disk type resource describing which disk type to use to create the disk. Provide this when creating the disk. For example: project/zones/zone/diskTypes/pd-standard or pd-ssd"),
      VariadicOption<String>("r_users", default: [], description: "[Output Only] Links to the users of the disk (attached instances) in form: project/zones/zone/instances/instance"),
      Options<String>("r_zone", default: [], count: 1, description: "[Output Only] URL of the zone where the disk resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      description: "Creates a persistent disk in the specified project using the data in the request. You can create a disk with a sourceImage, a sourceSnapshot, or create an empty 500 GB data disk by omitting all properties. You can also create a disk that is larger than the default size by specifying the sizeGb property.") {
      p_project, p_requestId, p_sourceImage, p_zone,r_creationTimestamp, r_description, r_id, r_kind, r_labelFingerprint, r_lastAttachTimestamp, r_lastDetachTimestamp, r_licenseCodes, r_licenses, r_name, r_options, r_physicalBlockSizeBytes, r_region, r_replicaZones, r_selfLink, r_sizeGb, r_sourceImage, r_sourceImageId, r_sourceSnapshot, r_sourceSnapshotId, r_status, r_type, r_users, r_zone in
      do {
        var parameters = Compute.DisksInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_sourceImage = p_sourceImage.first {
          parameters.sourceImage = p_sourceImage
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.Disk()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_labelFingerprint = r_labelFingerprint.first {
          request.labelFingerprint = r_labelFingerprint
        }
        if let r_lastAttachTimestamp = r_lastAttachTimestamp.first {
          request.lastAttachTimestamp = r_lastAttachTimestamp
        }
        if let r_lastDetachTimestamp = r_lastDetachTimestamp.first {
          request.lastDetachTimestamp = r_lastDetachTimestamp
        }
        if r_licenseCodes.count > 0 {
          request.licenseCodes = r_licenseCodes
        }
        if r_licenses.count > 0 {
          request.licenses = r_licenses
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_options = r_options.first {
          request.options = r_options
        }
        if let r_physicalBlockSizeBytes = r_physicalBlockSizeBytes.first {
          request.physicalBlockSizeBytes = r_physicalBlockSizeBytes
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if r_replicaZones.count > 0 {
          request.replicaZones = r_replicaZones
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_sizeGb = r_sizeGb.first {
          request.sizeGb = r_sizeGb
        }
        if let r_sourceImage = r_sourceImage.first {
          request.sourceImage = r_sourceImage
        }
        if let r_sourceImageId = r_sourceImageId.first {
          request.sourceImageId = r_sourceImageId
        }
        if let r_sourceSnapshot = r_sourceSnapshot.first {
          request.sourceSnapshot = r_sourceSnapshot
        }
        if let r_sourceSnapshotId = r_sourceSnapshotId.first {
          request.sourceSnapshotId = r_sourceSnapshotId
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if let r_type = r_type.first {
          request.type = r_type
        }
        if r_users.count > 0 {
          request.users = r_users
        }
        if let r_zone = r_zone.first {
          request.zone = r_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.disks_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "disks.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Retrieves a list of persistent disks contained within the specified zone.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_zone in
      do {
        var parameters = Compute.DisksListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.disks_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "disks.resize",
      Options<String>("p_disk", default: [], count: 1, description: "The name of the persistent disk."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_sizeGb", default: [], count: 1, description: "The new size of the persistent disk, which is specified in GB."),
      description: "Resizes the specified persistent disk. You can only increase the size of the disk.") {
      p_disk, p_project, p_requestId, p_zone,r_sizeGb in
      do {
        var parameters = Compute.DisksResizeParameters()
        if let p_disk = p_disk.first {
          parameters.disk = p_disk
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.DisksResizeRequest()
        if let r_sizeGb = r_sizeGb.first {
          request.sizeGb = r_sizeGb
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.disks_resize(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "disks.setIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_etag", default: [], count: 1, description: "Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag."),
      description: "Sets the access control policy on the specified resource. Replaces any existing policy.") {
      p_project, p_resource, p_zone,r_etag in
      do {
        var parameters = Compute.DisksSetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.ZoneSetPolicyRequest()
        if let r_etag = r_etag.first {
          request.etag = r_etag
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.disks_setIamPolicy(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "disks.setLabels",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_labelFingerprint", default: [], count: 1, description: "The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest fingerprint."),
      description: "Sets the labels on a disk. To learn more about labels, read the Labeling Resources documentation.") {
      p_project, p_requestId, p_resource, p_zone,r_labelFingerprint in
      do {
        var parameters = Compute.DisksSetLabelsParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.ZoneSetLabelsRequest()
        if let r_labelFingerprint = r_labelFingerprint.first {
          request.labelFingerprint = r_labelFingerprint
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.disks_setLabels(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "disks.testIamPermissions",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      VariadicOption<String>("r_permissions", default: [], description: "The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed."),
      description: "Returns permissions that a caller has on the specified resource.") {
      p_project, p_resource, p_zone,r_permissions in
      do {
        var parameters = Compute.DisksTestIamPermissionsParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.TestPermissionsRequest()
        if r_permissions.count > 0 {
          request.permissions = r_permissions
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.disks_testIamPermissions(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "firewalls.delete",
      Options<String>("p_firewall", default: [], count: 1, description: "Name of the firewall rule to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified firewall.") {
      p_firewall, p_project, p_requestId in
      do {
        var parameters = Compute.FirewallsDeleteParameters()
        if let p_firewall = p_firewall.first {
          parameters.firewall = p_firewall
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.firewalls_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "firewalls.get",
      Options<String>("p_firewall", default: [], count: 1, description: "Name of the firewall rule to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Returns the specified firewall.") {
      p_firewall, p_project in
      do {
        var parameters = Compute.FirewallsGetParameters()
        if let p_firewall = p_firewall.first {
          parameters.firewall = p_firewall
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.firewalls_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "firewalls.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      VariadicOption<String>("r_destinationRanges", default: [], description: "If destination ranges are specified, the firewall will apply only to traffic that has destination IP address in these ranges. These ranges must be expressed in CIDR format. Only IPv4 is supported."),
      Options<String>("r_direction", default: [], count: 1, description: "Direction of traffic to which this firewall applies; default is INGRESS. Note: For INGRESS traffic, it is NOT supported to specify destinationRanges; For EGRESS traffic, it is NOT supported to specify sourceRanges OR sourceTags."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#firewall for firewall rules."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_network", default: [], count: 1, description: "URL of the network resource for this firewall rule. If not specified when creating a firewall rule, the default network is used: global/networks/default If you choose to specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs:   - https://www.googleapis.com/compute/v1/projects/myproject/global/networks/my-network  - projects/myproject/global/networks/my-network  - global/networks/default"),
      Options<Int>("r_priority", default: [], count: 1, description: "Priority for this rule. This is an integer between 0 and 65535, both inclusive. When not specified, the value assumed is 1000. Relative priorities determine precedence of conflicting rules. Lower value of priority implies higher precedence (eg, a rule with priority 0 has higher precedence than a rule with priority 1). DENY rules take precedence over ALLOW rules having equal priority."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      VariadicOption<String>("r_sourceRanges", default: [], description: "If source ranges are specified, the firewall will apply only to traffic that has source IP address in these ranges. These ranges must be expressed in CIDR format. One or both of sourceRanges and sourceTags may be set. If both properties are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP that belongs to a tag listed in the sourceTags property. The connection does not need to match both properties for the firewall to apply. Only IPv4 is supported."),
      VariadicOption<String>("r_sourceServiceAccounts", default: [], description: "If source service accounts are specified, the firewall will apply only to traffic originating from an instance with a service account in this list. Source service accounts cannot be used to control traffic to an instance's external IP address because service accounts are associated with an instance, not an IP address. sourceRanges can be set at the same time as sourceServiceAccounts. If both are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP belongs to an instance with service account listed in sourceServiceAccount. The connection does not need to match both properties for the firewall to apply. sourceServiceAccounts cannot be used at the same time as sourceTags or targetTags."),
      VariadicOption<String>("r_sourceTags", default: [], description: "If source tags are specified, the firewall rule applies only to traffic with source IPs that match the primary network interfaces of VM instances that have the tag and are in the same VPC network. Source tags cannot be used to control traffic to an instance's external IP address, it only applies to traffic between instances in the same virtual network. Because tags are associated with instances, not IP addresses. One or both of sourceRanges and sourceTags may be set. If both properties are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP that belongs to a tag listed in the sourceTags property. The connection does not need to match both properties for the firewall to apply."),
      VariadicOption<String>("r_targetServiceAccounts", default: [], description: "A list of service accounts indicating sets of instances located in the network that may make network connections as specified in allowed[]. targetServiceAccounts cannot be used at the same time as targetTags or sourceTags. If neither targetServiceAccounts nor targetTags are specified, the firewall rule applies to all instances on the specified network."),
      VariadicOption<String>("r_targetTags", default: [], description: "A list of tags that controls which instances the firewall rule applies to. If targetTags are specified, then the firewall rule applies only to instances in the VPC network that have one of those tags. If no targetTags are specified, the firewall rule applies to all instances on the specified network."),
      description: "Creates a firewall rule in the specified project using the data included in the request.") {
      p_project, p_requestId,r_creationTimestamp, r_description, r_destinationRanges, r_direction, r_id, r_kind, r_name, r_network, r_priority, r_selfLink, r_sourceRanges, r_sourceServiceAccounts, r_sourceTags, r_targetServiceAccounts, r_targetTags in
      do {
        var parameters = Compute.FirewallsInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Firewall()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if r_destinationRanges.count > 0 {
          request.destinationRanges = r_destinationRanges
        }
        if let r_direction = r_direction.first {
          request.direction = r_direction
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_network = r_network.first {
          request.network = r_network
        }
        if let r_priority = r_priority.first {
          request.priority = r_priority
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if r_sourceRanges.count > 0 {
          request.sourceRanges = r_sourceRanges
        }
        if r_sourceServiceAccounts.count > 0 {
          request.sourceServiceAccounts = r_sourceServiceAccounts
        }
        if r_sourceTags.count > 0 {
          request.sourceTags = r_sourceTags
        }
        if r_targetServiceAccounts.count > 0 {
          request.targetServiceAccounts = r_targetServiceAccounts
        }
        if r_targetTags.count > 0 {
          request.targetTags = r_targetTags
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.firewalls_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "firewalls.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of firewall rules available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.FirewallsListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.firewalls_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "firewalls.patch",
      Options<String>("p_firewall", default: [], count: 1, description: "Name of the firewall rule to patch."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      VariadicOption<String>("r_destinationRanges", default: [], description: "If destination ranges are specified, the firewall will apply only to traffic that has destination IP address in these ranges. These ranges must be expressed in CIDR format. Only IPv4 is supported."),
      Options<String>("r_direction", default: [], count: 1, description: "Direction of traffic to which this firewall applies; default is INGRESS. Note: For INGRESS traffic, it is NOT supported to specify destinationRanges; For EGRESS traffic, it is NOT supported to specify sourceRanges OR sourceTags."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#firewall for firewall rules."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_network", default: [], count: 1, description: "URL of the network resource for this firewall rule. If not specified when creating a firewall rule, the default network is used: global/networks/default If you choose to specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs:   - https://www.googleapis.com/compute/v1/projects/myproject/global/networks/my-network  - projects/myproject/global/networks/my-network  - global/networks/default"),
      Options<Int>("r_priority", default: [], count: 1, description: "Priority for this rule. This is an integer between 0 and 65535, both inclusive. When not specified, the value assumed is 1000. Relative priorities determine precedence of conflicting rules. Lower value of priority implies higher precedence (eg, a rule with priority 0 has higher precedence than a rule with priority 1). DENY rules take precedence over ALLOW rules having equal priority."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      VariadicOption<String>("r_sourceRanges", default: [], description: "If source ranges are specified, the firewall will apply only to traffic that has source IP address in these ranges. These ranges must be expressed in CIDR format. One or both of sourceRanges and sourceTags may be set. If both properties are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP that belongs to a tag listed in the sourceTags property. The connection does not need to match both properties for the firewall to apply. Only IPv4 is supported."),
      VariadicOption<String>("r_sourceServiceAccounts", default: [], description: "If source service accounts are specified, the firewall will apply only to traffic originating from an instance with a service account in this list. Source service accounts cannot be used to control traffic to an instance's external IP address because service accounts are associated with an instance, not an IP address. sourceRanges can be set at the same time as sourceServiceAccounts. If both are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP belongs to an instance with service account listed in sourceServiceAccount. The connection does not need to match both properties for the firewall to apply. sourceServiceAccounts cannot be used at the same time as sourceTags or targetTags."),
      VariadicOption<String>("r_sourceTags", default: [], description: "If source tags are specified, the firewall rule applies only to traffic with source IPs that match the primary network interfaces of VM instances that have the tag and are in the same VPC network. Source tags cannot be used to control traffic to an instance's external IP address, it only applies to traffic between instances in the same virtual network. Because tags are associated with instances, not IP addresses. One or both of sourceRanges and sourceTags may be set. If both properties are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP that belongs to a tag listed in the sourceTags property. The connection does not need to match both properties for the firewall to apply."),
      VariadicOption<String>("r_targetServiceAccounts", default: [], description: "A list of service accounts indicating sets of instances located in the network that may make network connections as specified in allowed[]. targetServiceAccounts cannot be used at the same time as targetTags or sourceTags. If neither targetServiceAccounts nor targetTags are specified, the firewall rule applies to all instances on the specified network."),
      VariadicOption<String>("r_targetTags", default: [], description: "A list of tags that controls which instances the firewall rule applies to. If targetTags are specified, then the firewall rule applies only to instances in the VPC network that have one of those tags. If no targetTags are specified, the firewall rule applies to all instances on the specified network."),
      description: "Updates the specified firewall rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.") {
      p_firewall, p_project, p_requestId,r_creationTimestamp, r_description, r_destinationRanges, r_direction, r_id, r_kind, r_name, r_network, r_priority, r_selfLink, r_sourceRanges, r_sourceServiceAccounts, r_sourceTags, r_targetServiceAccounts, r_targetTags in
      do {
        var parameters = Compute.FirewallsPatchParameters()
        if let p_firewall = p_firewall.first {
          parameters.firewall = p_firewall
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Firewall()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if r_destinationRanges.count > 0 {
          request.destinationRanges = r_destinationRanges
        }
        if let r_direction = r_direction.first {
          request.direction = r_direction
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_network = r_network.first {
          request.network = r_network
        }
        if let r_priority = r_priority.first {
          request.priority = r_priority
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if r_sourceRanges.count > 0 {
          request.sourceRanges = r_sourceRanges
        }
        if r_sourceServiceAccounts.count > 0 {
          request.sourceServiceAccounts = r_sourceServiceAccounts
        }
        if r_sourceTags.count > 0 {
          request.sourceTags = r_sourceTags
        }
        if r_targetServiceAccounts.count > 0 {
          request.targetServiceAccounts = r_targetServiceAccounts
        }
        if r_targetTags.count > 0 {
          request.targetTags = r_targetTags
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.firewalls_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "firewalls.update",
      Options<String>("p_firewall", default: [], count: 1, description: "Name of the firewall rule to update."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      VariadicOption<String>("r_destinationRanges", default: [], description: "If destination ranges are specified, the firewall will apply only to traffic that has destination IP address in these ranges. These ranges must be expressed in CIDR format. Only IPv4 is supported."),
      Options<String>("r_direction", default: [], count: 1, description: "Direction of traffic to which this firewall applies; default is INGRESS. Note: For INGRESS traffic, it is NOT supported to specify destinationRanges; For EGRESS traffic, it is NOT supported to specify sourceRanges OR sourceTags."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#firewall for firewall rules."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_network", default: [], count: 1, description: "URL of the network resource for this firewall rule. If not specified when creating a firewall rule, the default network is used: global/networks/default If you choose to specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs:   - https://www.googleapis.com/compute/v1/projects/myproject/global/networks/my-network  - projects/myproject/global/networks/my-network  - global/networks/default"),
      Options<Int>("r_priority", default: [], count: 1, description: "Priority for this rule. This is an integer between 0 and 65535, both inclusive. When not specified, the value assumed is 1000. Relative priorities determine precedence of conflicting rules. Lower value of priority implies higher precedence (eg, a rule with priority 0 has higher precedence than a rule with priority 1). DENY rules take precedence over ALLOW rules having equal priority."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      VariadicOption<String>("r_sourceRanges", default: [], description: "If source ranges are specified, the firewall will apply only to traffic that has source IP address in these ranges. These ranges must be expressed in CIDR format. One or both of sourceRanges and sourceTags may be set. If both properties are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP that belongs to a tag listed in the sourceTags property. The connection does not need to match both properties for the firewall to apply. Only IPv4 is supported."),
      VariadicOption<String>("r_sourceServiceAccounts", default: [], description: "If source service accounts are specified, the firewall will apply only to traffic originating from an instance with a service account in this list. Source service accounts cannot be used to control traffic to an instance's external IP address because service accounts are associated with an instance, not an IP address. sourceRanges can be set at the same time as sourceServiceAccounts. If both are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP belongs to an instance with service account listed in sourceServiceAccount. The connection does not need to match both properties for the firewall to apply. sourceServiceAccounts cannot be used at the same time as sourceTags or targetTags."),
      VariadicOption<String>("r_sourceTags", default: [], description: "If source tags are specified, the firewall rule applies only to traffic with source IPs that match the primary network interfaces of VM instances that have the tag and are in the same VPC network. Source tags cannot be used to control traffic to an instance's external IP address, it only applies to traffic between instances in the same virtual network. Because tags are associated with instances, not IP addresses. One or both of sourceRanges and sourceTags may be set. If both properties are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP that belongs to a tag listed in the sourceTags property. The connection does not need to match both properties for the firewall to apply."),
      VariadicOption<String>("r_targetServiceAccounts", default: [], description: "A list of service accounts indicating sets of instances located in the network that may make network connections as specified in allowed[]. targetServiceAccounts cannot be used at the same time as targetTags or sourceTags. If neither targetServiceAccounts nor targetTags are specified, the firewall rule applies to all instances on the specified network."),
      VariadicOption<String>("r_targetTags", default: [], description: "A list of tags that controls which instances the firewall rule applies to. If targetTags are specified, then the firewall rule applies only to instances in the VPC network that have one of those tags. If no targetTags are specified, the firewall rule applies to all instances on the specified network."),
      description: "Updates the specified firewall rule with the data included in the request. The PUT method can only update the following fields of firewall rule: allowed, description, sourceRanges, sourceTags, targetTags.") {
      p_firewall, p_project, p_requestId,r_creationTimestamp, r_description, r_destinationRanges, r_direction, r_id, r_kind, r_name, r_network, r_priority, r_selfLink, r_sourceRanges, r_sourceServiceAccounts, r_sourceTags, r_targetServiceAccounts, r_targetTags in
      do {
        var parameters = Compute.FirewallsUpdateParameters()
        if let p_firewall = p_firewall.first {
          parameters.firewall = p_firewall
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Firewall()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if r_destinationRanges.count > 0 {
          request.destinationRanges = r_destinationRanges
        }
        if let r_direction = r_direction.first {
          request.direction = r_direction
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_network = r_network.first {
          request.network = r_network
        }
        if let r_priority = r_priority.first {
          request.priority = r_priority
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if r_sourceRanges.count > 0 {
          request.sourceRanges = r_sourceRanges
        }
        if r_sourceServiceAccounts.count > 0 {
          request.sourceServiceAccounts = r_sourceServiceAccounts
        }
        if r_sourceTags.count > 0 {
          request.sourceTags = r_sourceTags
        }
        if r_targetServiceAccounts.count > 0 {
          request.targetServiceAccounts = r_targetServiceAccounts
        }
        if r_targetTags.count > 0 {
          request.targetTags = r_targetTags
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.firewalls_update(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "forwardingRules.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of forwarding rules.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.ForwardingRulesAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.forwardingRules_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "forwardingRules.delete",
      Options<String>("p_forwardingRule", default: [], count: 1, description: "Name of the ForwardingRule resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified ForwardingRule resource.") {
      p_forwardingRule, p_project, p_region, p_requestId in
      do {
        var parameters = Compute.ForwardingRulesDeleteParameters()
        if let p_forwardingRule = p_forwardingRule.first {
          parameters.forwardingRule = p_forwardingRule
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.forwardingRules_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "forwardingRules.get",
      Options<String>("p_forwardingRule", default: [], count: 1, description: "Name of the ForwardingRule resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      description: "Returns the specified ForwardingRule resource.") {
      p_forwardingRule, p_project, p_region in
      do {
        var parameters = Compute.ForwardingRulesGetParameters()
        if let p_forwardingRule = p_forwardingRule.first {
          parameters.forwardingRule = p_forwardingRule
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.forwardingRules_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "forwardingRules.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_IPAddress", default: [], count: 1, description: "The IP address that this forwarding rule is serving on behalf of.  Addresses are restricted based on the forwarding rule's load balancing scheme (EXTERNAL or INTERNAL) and scope (global or regional).  When the load balancing scheme is EXTERNAL, for global forwarding rules, the address must be a global IP, and for regional forwarding rules, the address must live in the same region as the forwarding rule. If this field is empty, an ephemeral IPv4 address from the same scope (global or regional) will be assigned. A regional forwarding rule supports IPv4 only. A global forwarding rule supports either IPv4 or IPv6.  When the load balancing scheme is INTERNAL_SELF_MANAGED, this must be a URL reference to an existing Address resource ( internal regional static IP address), with a purpose of GCE_END_POINT and address_type of INTERNAL.  When the load balancing scheme is INTERNAL, this can only be an RFC 1918 IP address belonging to the network/subnet configured for the forwarding rule. By default, if this field is empty, an ephemeral internal IP address will be automatically allocated from the IP range of the subnet or network configured for this forwarding rule.  An address can be specified either by a literal IP address or a URL reference to an existing Address resource. The following examples are all valid:   - 100.1.2.3  - https://www.googleapis.com/compute/v1/projects/project/regions/region/addresses/address  - projects/project/regions/region/addresses/address  - regions/region/addresses/address  - global/addresses/address  - address"),
      Options<String>("r_IPProtocol", default: [], count: 1, description: "The IP protocol to which this rule applies. Valid options are TCP, UDP, ESP, AH, SCTP or ICMP.  When the load balancing scheme is INTERNAL, only TCP and UDP are valid. When the load balancing scheme is INTERNAL_SELF_MANAGED, only TCPis valid."),
      Options<String>("r_backendService", default: [], count: 1, description: "This field is only used for INTERNAL load balancing.  For internal load balancing, this field identifies the BackendService resource to receive the matched traffic."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_ipVersion", default: [], count: 1, description: "The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6. This can only be specified for an external global forwarding rule."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#forwardingRule for Forwarding Rule resources."),
      Options<String>("r_loadBalancingScheme", default: [], count: 1, description: "This signifies what the ForwardingRule will be used for and can only take the following values: INTERNAL, INTERNAL_SELF_MANAGED, EXTERNAL. The value of INTERNAL means that this will be used for Internal Network Load Balancing (TCP, UDP). The value of INTERNAL_SELF_MANAGED means that this will be used for Internal Global HTTP(S) LB. The value of EXTERNAL means that this will be used for External Load Balancing (HTTP(S) LB, External TCP/UDP LB, SSL Proxy)"),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_network", default: [], count: 1, description: "This field is not used for external load balancing.  For INTERNAL and INTERNAL_SELF_MANAGED load balancing, this field identifies the network that the load balanced IP should belong to for this Forwarding Rule. If this field is not specified, the default network will be used."),
      Options<String>("r_networkTier", default: [], count: 1, description: "This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM , STANDARD.  For regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM.  If this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address."),
      Options<String>("r_portRange", default: [], count: 1, description: "This field is used along with the target field for TargetHttpProxy, TargetHttpsProxy, TargetSslProxy, TargetTcpProxy, TargetVpnGateway, TargetPool, TargetInstance.  Applicable only when IPProtocol is TCP, UDP, or SCTP, only packets addressed to ports in the specified range will be forwarded to target. Forwarding rules with the same [IPAddress, IPProtocol] pair must have disjoint port ranges.  Some types of forwarding target have constraints on the acceptable ports:   - TargetHttpProxy: 80, 8080  - TargetHttpsProxy: 443  - TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1688, 1883, 5222  - TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1688, 1883, 5222  - TargetVpnGateway: 500, 4500"),
      VariadicOption<String>("r_ports", default: [], description: "This field is used along with the backend_service field for internal load balancing.  When the load balancing scheme is INTERNAL, a list of ports can be configured, for example, ['80'], ['8000','9000'] etc. Only packets addressed to these ports will be forwarded to the backends configured with this forwarding rule.  You may specify a maximum of up to 5 ports."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the regional forwarding rule resides. This field is not applicable to global forwarding rules. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_serviceLabel", default: [], count: 1, description: "An optional prefix to the service name for this Forwarding Rule. If specified, will be the first label of the fully qualified service name.  The label must be 1-63 characters long, and comply with RFC1035. Specifically, the label must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.  This field is only used for internal load balancing."),
      Options<String>("r_serviceName", default: [], count: 1, description: "[Output Only] The internal fully qualified service name for this Forwarding Rule.  This field is only used for internal load balancing."),
      Options<String>("r_subnetwork", default: [], count: 1, description: "This field is only used for INTERNAL load balancing.  For internal load balancing, this field identifies the subnetwork that the load balanced IP should belong to for this Forwarding Rule.  If the network specified is in auto subnet mode, this field is optional. However, if the network is in custom subnet mode, a subnetwork must be specified."),
      Options<String>("r_target", default: [], count: 1, description: "The URL of the target resource to receive the matched traffic. For regional forwarding rules, this target must live in the same region as the forwarding rule. For global forwarding rules, this target must be a global load balancing resource. The forwarded traffic must be of a type appropriate to the target object. For INTERNAL_SELF_MANAGED' load balancing, only HTTP and HTTPS targets are valid."),
      description: "Creates a ForwardingRule resource in the specified project and region using the data included in the request.") {
      p_project, p_region, p_requestId,r_IPAddress, r_IPProtocol, r_backendService, r_creationTimestamp, r_description, r_id, r_ipVersion, r_kind, r_loadBalancingScheme, r_name, r_network, r_networkTier, r_portRange, r_ports, r_region, r_selfLink, r_serviceLabel, r_serviceName, r_subnetwork, r_target in
      do {
        var parameters = Compute.ForwardingRulesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.ForwardingRule()
        if let r_IPAddress = r_IPAddress.first {
          request.IPAddress = r_IPAddress
        }
        if let r_IPProtocol = r_IPProtocol.first {
          request.IPProtocol = r_IPProtocol
        }
        if let r_backendService = r_backendService.first {
          request.backendService = r_backendService
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_ipVersion = r_ipVersion.first {
          request.ipVersion = r_ipVersion
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_loadBalancingScheme = r_loadBalancingScheme.first {
          request.loadBalancingScheme = r_loadBalancingScheme
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_network = r_network.first {
          request.network = r_network
        }
        if let r_networkTier = r_networkTier.first {
          request.networkTier = r_networkTier
        }
        if let r_portRange = r_portRange.first {
          request.portRange = r_portRange
        }
        if r_ports.count > 0 {
          request.ports = r_ports
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_serviceLabel = r_serviceLabel.first {
          request.serviceLabel = r_serviceLabel
        }
        if let r_serviceName = r_serviceName.first {
          request.serviceName = r_serviceName
        }
        if let r_subnetwork = r_subnetwork.first {
          request.subnetwork = r_subnetwork
        }
        if let r_target = r_target.first {
          request.target = r_target
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.forwardingRules_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "forwardingRules.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      description: "Retrieves a list of ForwardingRule resources available to the specified project and region.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.ForwardingRulesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.forwardingRules_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "forwardingRules.setTarget",
      Options<String>("p_forwardingRule", default: [], count: 1, description: "Name of the ForwardingRule resource in which target is to be set."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_target", default: [], count: 1, description: ""),
      description: "Changes target URL for forwarding rule. The new target should be of the same type as the old target.") {
      p_forwardingRule, p_project, p_region, p_requestId,r_target in
      do {
        var parameters = Compute.ForwardingRulesSetTargetParameters()
        if let p_forwardingRule = p_forwardingRule.first {
          parameters.forwardingRule = p_forwardingRule
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.TargetReference()
        if let r_target = r_target.first {
          request.target = r_target
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.forwardingRules_setTarget(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "globalAddresses.delete",
      Options<String>("p_address", default: [], count: 1, description: "Name of the address resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified address resource.") {
      p_address, p_project, p_requestId in
      do {
        var parameters = Compute.GlobalAddressesDeleteParameters()
        if let p_address = p_address.first {
          parameters.address = p_address
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.globalAddresses_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "globalAddresses.get",
      Options<String>("p_address", default: [], count: 1, description: "Name of the address resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Returns the specified address resource. Gets a list of available addresses by making a list() request.") {
      p_address, p_project in
      do {
        var parameters = Compute.GlobalAddressesGetParameters()
        if let p_address = p_address.first {
          parameters.address = p_address
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.globalAddresses_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "globalAddresses.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_address", default: [], count: 1, description: "The static IP address represented by this resource."),
      Options<String>("r_addressType", default: [], count: 1, description: "The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_ipVersion", default: [], count: 1, description: "The IP Version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#address for addresses."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_network", default: [], count: 1, description: "The URL of the network in which to reserve the address. This field can only be used with INTERNAL type with VPC_PEERING purpose."),
      Options<String>("r_networkTier", default: [], count: 1, description: "This signifies the networking tier used for configuring this Address and can only take the following values: PREMIUM, STANDARD. Global forwarding rules can only be Premium Tier. Regional forwarding rules can be either Premium or Standard Tier. Standard Tier addresses applied to regional forwarding rules can be used with any external load balancer. Regional forwarding rules in Premium Tier can only be used with a Network load balancer.  If this field is not specified, it is assumed to be PREMIUM."),
      Options<Int>("r_prefixLength", default: [], count: 1, description: "The prefix length if the resource reprensents an IP range."),
      Options<String>("r_purpose", default: [], count: 1, description: "The purpose of resource, only used with INTERNAL type."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the regional address resides. This field is not applicable to global addresses. You must specify this field as part of the HTTP request URL. You cannot set this field in the request body."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available."),
      Options<String>("r_subnetwork", default: [], count: 1, description: "The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the subnetwork's IP range. This field can only be used with INTERNAL type with GCE_ENDPOINT/DNS_RESOLVER purposes."),
      VariadicOption<String>("r_users", default: [], description: "[Output Only] The URLs of the resources that are using this address."),
      description: "Creates an address resource in the specified project using the data included in the request.") {
      p_project, p_requestId,r_address, r_addressType, r_creationTimestamp, r_description, r_id, r_ipVersion, r_kind, r_name, r_network, r_networkTier, r_prefixLength, r_purpose, r_region, r_selfLink, r_status, r_subnetwork, r_users in
      do {
        var parameters = Compute.GlobalAddressesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Address()
        if let r_address = r_address.first {
          request.address = r_address
        }
        if let r_addressType = r_addressType.first {
          request.addressType = r_addressType
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_ipVersion = r_ipVersion.first {
          request.ipVersion = r_ipVersion
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_network = r_network.first {
          request.network = r_network
        }
        if let r_networkTier = r_networkTier.first {
          request.networkTier = r_networkTier
        }
        if let r_prefixLength = r_prefixLength.first {
          request.prefixLength = r_prefixLength
        }
        if let r_purpose = r_purpose.first {
          request.purpose = r_purpose
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if let r_subnetwork = r_subnetwork.first {
          request.subnetwork = r_subnetwork
        }
        if r_users.count > 0 {
          request.users = r_users
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.globalAddresses_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "globalAddresses.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves a list of global addresses.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.GlobalAddressesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.globalAddresses_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "globalForwardingRules.delete",
      Options<String>("p_forwardingRule", default: [], count: 1, description: "Name of the ForwardingRule resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified GlobalForwardingRule resource.") {
      p_forwardingRule, p_project, p_requestId in
      do {
        var parameters = Compute.GlobalForwardingRulesDeleteParameters()
        if let p_forwardingRule = p_forwardingRule.first {
          parameters.forwardingRule = p_forwardingRule
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.globalForwardingRules_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "globalForwardingRules.get",
      Options<String>("p_forwardingRule", default: [], count: 1, description: "Name of the ForwardingRule resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Returns the specified GlobalForwardingRule resource. Gets a list of available forwarding rules by making a list() request.") {
      p_forwardingRule, p_project in
      do {
        var parameters = Compute.GlobalForwardingRulesGetParameters()
        if let p_forwardingRule = p_forwardingRule.first {
          parameters.forwardingRule = p_forwardingRule
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.globalForwardingRules_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "globalForwardingRules.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_IPAddress", default: [], count: 1, description: "The IP address that this forwarding rule is serving on behalf of.  Addresses are restricted based on the forwarding rule's load balancing scheme (EXTERNAL or INTERNAL) and scope (global or regional).  When the load balancing scheme is EXTERNAL, for global forwarding rules, the address must be a global IP, and for regional forwarding rules, the address must live in the same region as the forwarding rule. If this field is empty, an ephemeral IPv4 address from the same scope (global or regional) will be assigned. A regional forwarding rule supports IPv4 only. A global forwarding rule supports either IPv4 or IPv6.  When the load balancing scheme is INTERNAL_SELF_MANAGED, this must be a URL reference to an existing Address resource ( internal regional static IP address), with a purpose of GCE_END_POINT and address_type of INTERNAL.  When the load balancing scheme is INTERNAL, this can only be an RFC 1918 IP address belonging to the network/subnet configured for the forwarding rule. By default, if this field is empty, an ephemeral internal IP address will be automatically allocated from the IP range of the subnet or network configured for this forwarding rule.  An address can be specified either by a literal IP address or a URL reference to an existing Address resource. The following examples are all valid:   - 100.1.2.3  - https://www.googleapis.com/compute/v1/projects/project/regions/region/addresses/address  - projects/project/regions/region/addresses/address  - regions/region/addresses/address  - global/addresses/address  - address"),
      Options<String>("r_IPProtocol", default: [], count: 1, description: "The IP protocol to which this rule applies. Valid options are TCP, UDP, ESP, AH, SCTP or ICMP.  When the load balancing scheme is INTERNAL, only TCP and UDP are valid. When the load balancing scheme is INTERNAL_SELF_MANAGED, only TCPis valid."),
      Options<String>("r_backendService", default: [], count: 1, description: "This field is only used for INTERNAL load balancing.  For internal load balancing, this field identifies the BackendService resource to receive the matched traffic."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_ipVersion", default: [], count: 1, description: "The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6. This can only be specified for an external global forwarding rule."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#forwardingRule for Forwarding Rule resources."),
      Options<String>("r_loadBalancingScheme", default: [], count: 1, description: "This signifies what the ForwardingRule will be used for and can only take the following values: INTERNAL, INTERNAL_SELF_MANAGED, EXTERNAL. The value of INTERNAL means that this will be used for Internal Network Load Balancing (TCP, UDP). The value of INTERNAL_SELF_MANAGED means that this will be used for Internal Global HTTP(S) LB. The value of EXTERNAL means that this will be used for External Load Balancing (HTTP(S) LB, External TCP/UDP LB, SSL Proxy)"),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_network", default: [], count: 1, description: "This field is not used for external load balancing.  For INTERNAL and INTERNAL_SELF_MANAGED load balancing, this field identifies the network that the load balanced IP should belong to for this Forwarding Rule. If this field is not specified, the default network will be used."),
      Options<String>("r_networkTier", default: [], count: 1, description: "This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM , STANDARD.  For regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM.  If this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address."),
      Options<String>("r_portRange", default: [], count: 1, description: "This field is used along with the target field for TargetHttpProxy, TargetHttpsProxy, TargetSslProxy, TargetTcpProxy, TargetVpnGateway, TargetPool, TargetInstance.  Applicable only when IPProtocol is TCP, UDP, or SCTP, only packets addressed to ports in the specified range will be forwarded to target. Forwarding rules with the same [IPAddress, IPProtocol] pair must have disjoint port ranges.  Some types of forwarding target have constraints on the acceptable ports:   - TargetHttpProxy: 80, 8080  - TargetHttpsProxy: 443  - TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1688, 1883, 5222  - TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1688, 1883, 5222  - TargetVpnGateway: 500, 4500"),
      VariadicOption<String>("r_ports", default: [], description: "This field is used along with the backend_service field for internal load balancing.  When the load balancing scheme is INTERNAL, a list of ports can be configured, for example, ['80'], ['8000','9000'] etc. Only packets addressed to these ports will be forwarded to the backends configured with this forwarding rule.  You may specify a maximum of up to 5 ports."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the regional forwarding rule resides. This field is not applicable to global forwarding rules. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_serviceLabel", default: [], count: 1, description: "An optional prefix to the service name for this Forwarding Rule. If specified, will be the first label of the fully qualified service name.  The label must be 1-63 characters long, and comply with RFC1035. Specifically, the label must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.  This field is only used for internal load balancing."),
      Options<String>("r_serviceName", default: [], count: 1, description: "[Output Only] The internal fully qualified service name for this Forwarding Rule.  This field is only used for internal load balancing."),
      Options<String>("r_subnetwork", default: [], count: 1, description: "This field is only used for INTERNAL load balancing.  For internal load balancing, this field identifies the subnetwork that the load balanced IP should belong to for this Forwarding Rule.  If the network specified is in auto subnet mode, this field is optional. However, if the network is in custom subnet mode, a subnetwork must be specified."),
      Options<String>("r_target", default: [], count: 1, description: "The URL of the target resource to receive the matched traffic. For regional forwarding rules, this target must live in the same region as the forwarding rule. For global forwarding rules, this target must be a global load balancing resource. The forwarded traffic must be of a type appropriate to the target object. For INTERNAL_SELF_MANAGED' load balancing, only HTTP and HTTPS targets are valid."),
      description: "Creates a GlobalForwardingRule resource in the specified project using the data included in the request.") {
      p_project, p_requestId,r_IPAddress, r_IPProtocol, r_backendService, r_creationTimestamp, r_description, r_id, r_ipVersion, r_kind, r_loadBalancingScheme, r_name, r_network, r_networkTier, r_portRange, r_ports, r_region, r_selfLink, r_serviceLabel, r_serviceName, r_subnetwork, r_target in
      do {
        var parameters = Compute.GlobalForwardingRulesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.ForwardingRule()
        if let r_IPAddress = r_IPAddress.first {
          request.IPAddress = r_IPAddress
        }
        if let r_IPProtocol = r_IPProtocol.first {
          request.IPProtocol = r_IPProtocol
        }
        if let r_backendService = r_backendService.first {
          request.backendService = r_backendService
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_ipVersion = r_ipVersion.first {
          request.ipVersion = r_ipVersion
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_loadBalancingScheme = r_loadBalancingScheme.first {
          request.loadBalancingScheme = r_loadBalancingScheme
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_network = r_network.first {
          request.network = r_network
        }
        if let r_networkTier = r_networkTier.first {
          request.networkTier = r_networkTier
        }
        if let r_portRange = r_portRange.first {
          request.portRange = r_portRange
        }
        if r_ports.count > 0 {
          request.ports = r_ports
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_serviceLabel = r_serviceLabel.first {
          request.serviceLabel = r_serviceLabel
        }
        if let r_serviceName = r_serviceName.first {
          request.serviceName = r_serviceName
        }
        if let r_subnetwork = r_subnetwork.first {
          request.subnetwork = r_subnetwork
        }
        if let r_target = r_target.first {
          request.target = r_target
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.globalForwardingRules_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "globalForwardingRules.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves a list of GlobalForwardingRule resources available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.GlobalForwardingRulesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.globalForwardingRules_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "globalForwardingRules.setTarget",
      Options<String>("p_forwardingRule", default: [], count: 1, description: "Name of the ForwardingRule resource in which target is to be set."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_target", default: [], count: 1, description: ""),
      description: "Changes target URL for the GlobalForwardingRule resource. The new target should be of the same type as the old target.") {
      p_forwardingRule, p_project, p_requestId,r_target in
      do {
        var parameters = Compute.GlobalForwardingRulesSetTargetParameters()
        if let p_forwardingRule = p_forwardingRule.first {
          parameters.forwardingRule = p_forwardingRule
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.TargetReference()
        if let r_target = r_target.first {
          request.target = r_target
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.globalForwardingRules_setTarget(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "globalOperations.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of all operations.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.GlobalOperationsAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.globalOperations_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "globalOperations.delete",
      Options<String>("p_operation", default: [], count: 1, description: "Name of the Operations resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Deletes the specified Operations resource.") {
      p_operation, p_project in
      do {
        var parameters = Compute.GlobalOperationsDeleteParameters()
        if let p_operation = p_operation.first {
          parameters.operation = p_operation
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.globalOperations_delete(parameters:parameters) {
          error in
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "globalOperations.get",
      Options<String>("p_operation", default: [], count: 1, description: "Name of the Operations resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the specified Operations resource. Gets a list of operations by making a list() request.") {
      p_operation, p_project in
      do {
        var parameters = Compute.GlobalOperationsGetParameters()
        if let p_operation = p_operation.first {
          parameters.operation = p_operation
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.globalOperations_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "globalOperations.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves a list of Operation resources contained within the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.GlobalOperationsListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.globalOperations_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "healthChecks.delete",
      Options<String>("p_healthCheck", default: [], count: 1, description: "Name of the HealthCheck resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified HealthCheck resource.") {
      p_healthCheck, p_project, p_requestId in
      do {
        var parameters = Compute.HealthChecksDeleteParameters()
        if let p_healthCheck = p_healthCheck.first {
          parameters.healthCheck = p_healthCheck
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.healthChecks_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "healthChecks.get",
      Options<String>("p_healthCheck", default: [], count: 1, description: "Name of the HealthCheck resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.") {
      p_healthCheck, p_project in
      do {
        var parameters = Compute.HealthChecksGetParameters()
        if let p_healthCheck = p_healthCheck.first {
          parameters.healthCheck = p_healthCheck
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.healthChecks_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "healthChecks.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<Int>("r_checkIntervalSec", default: [], count: 1, description: "How often (in seconds) to send a health check. The default value is 5 seconds."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in 3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<Int>("r_healthyThreshold", default: [], count: 1, description: "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "Type of the resource."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<Int>("r_timeoutSec", default: [], count: 1, description: "How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec."),
      Options<String>("r_type", default: [], count: 1, description: "Specifies the type of the healthCheck, either TCP, SSL, HTTP or HTTPS. If not specified, the default is TCP. Exactly one of the protocol-specific health check field must be specified, which must match type field."),
      Options<Int>("r_unhealthyThreshold", default: [], count: 1, description: "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2."),
      description: "Creates a HealthCheck resource in the specified project using the data included in the request.") {
      p_project, p_requestId,r_checkIntervalSec, r_creationTimestamp, r_description, r_healthyThreshold, r_id, r_kind, r_name, r_selfLink, r_timeoutSec, r_type, r_unhealthyThreshold in
      do {
        var parameters = Compute.HealthChecksInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.HealthCheck()
        if let r_checkIntervalSec = r_checkIntervalSec.first {
          request.checkIntervalSec = r_checkIntervalSec
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_healthyThreshold = r_healthyThreshold.first {
          request.healthyThreshold = r_healthyThreshold
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_timeoutSec = r_timeoutSec.first {
          request.timeoutSec = r_timeoutSec
        }
        if let r_type = r_type.first {
          request.type = r_type
        }
        if let r_unhealthyThreshold = r_unhealthyThreshold.first {
          request.unhealthyThreshold = r_unhealthyThreshold
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.healthChecks_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "healthChecks.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of HealthCheck resources available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.HealthChecksListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.healthChecks_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "healthChecks.patch",
      Options<String>("p_healthCheck", default: [], count: 1, description: "Name of the HealthCheck resource to patch."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<Int>("r_checkIntervalSec", default: [], count: 1, description: "How often (in seconds) to send a health check. The default value is 5 seconds."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in 3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<Int>("r_healthyThreshold", default: [], count: 1, description: "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "Type of the resource."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<Int>("r_timeoutSec", default: [], count: 1, description: "How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec."),
      Options<String>("r_type", default: [], count: 1, description: "Specifies the type of the healthCheck, either TCP, SSL, HTTP or HTTPS. If not specified, the default is TCP. Exactly one of the protocol-specific health check field must be specified, which must match type field."),
      Options<Int>("r_unhealthyThreshold", default: [], count: 1, description: "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2."),
      description: "Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.") {
      p_healthCheck, p_project, p_requestId,r_checkIntervalSec, r_creationTimestamp, r_description, r_healthyThreshold, r_id, r_kind, r_name, r_selfLink, r_timeoutSec, r_type, r_unhealthyThreshold in
      do {
        var parameters = Compute.HealthChecksPatchParameters()
        if let p_healthCheck = p_healthCheck.first {
          parameters.healthCheck = p_healthCheck
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.HealthCheck()
        if let r_checkIntervalSec = r_checkIntervalSec.first {
          request.checkIntervalSec = r_checkIntervalSec
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_healthyThreshold = r_healthyThreshold.first {
          request.healthyThreshold = r_healthyThreshold
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_timeoutSec = r_timeoutSec.first {
          request.timeoutSec = r_timeoutSec
        }
        if let r_type = r_type.first {
          request.type = r_type
        }
        if let r_unhealthyThreshold = r_unhealthyThreshold.first {
          request.unhealthyThreshold = r_unhealthyThreshold
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.healthChecks_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "healthChecks.update",
      Options<String>("p_healthCheck", default: [], count: 1, description: "Name of the HealthCheck resource to update."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<Int>("r_checkIntervalSec", default: [], count: 1, description: "How often (in seconds) to send a health check. The default value is 5 seconds."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in 3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<Int>("r_healthyThreshold", default: [], count: 1, description: "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "Type of the resource."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<Int>("r_timeoutSec", default: [], count: 1, description: "How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec."),
      Options<String>("r_type", default: [], count: 1, description: "Specifies the type of the healthCheck, either TCP, SSL, HTTP or HTTPS. If not specified, the default is TCP. Exactly one of the protocol-specific health check field must be specified, which must match type field."),
      Options<Int>("r_unhealthyThreshold", default: [], count: 1, description: "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2."),
      description: "Updates a HealthCheck resource in the specified project using the data included in the request.") {
      p_healthCheck, p_project, p_requestId,r_checkIntervalSec, r_creationTimestamp, r_description, r_healthyThreshold, r_id, r_kind, r_name, r_selfLink, r_timeoutSec, r_type, r_unhealthyThreshold in
      do {
        var parameters = Compute.HealthChecksUpdateParameters()
        if let p_healthCheck = p_healthCheck.first {
          parameters.healthCheck = p_healthCheck
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.HealthCheck()
        if let r_checkIntervalSec = r_checkIntervalSec.first {
          request.checkIntervalSec = r_checkIntervalSec
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_healthyThreshold = r_healthyThreshold.first {
          request.healthyThreshold = r_healthyThreshold
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_timeoutSec = r_timeoutSec.first {
          request.timeoutSec = r_timeoutSec
        }
        if let r_type = r_type.first {
          request.type = r_type
        }
        if let r_unhealthyThreshold = r_unhealthyThreshold.first {
          request.unhealthyThreshold = r_unhealthyThreshold
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.healthChecks_update(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "httpHealthChecks.delete",
      Options<String>("p_httpHealthCheck", default: [], count: 1, description: "Name of the HttpHealthCheck resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified HttpHealthCheck resource.") {
      p_httpHealthCheck, p_project, p_requestId in
      do {
        var parameters = Compute.HttpHealthChecksDeleteParameters()
        if let p_httpHealthCheck = p_httpHealthCheck.first {
          parameters.httpHealthCheck = p_httpHealthCheck
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.httpHealthChecks_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "httpHealthChecks.get",
      Options<String>("p_httpHealthCheck", default: [], count: 1, description: "Name of the HttpHealthCheck resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Returns the specified HttpHealthCheck resource. Gets a list of available HTTP health checks by making a list() request.") {
      p_httpHealthCheck, p_project in
      do {
        var parameters = Compute.HttpHealthChecksGetParameters()
        if let p_httpHealthCheck = p_httpHealthCheck.first {
          parameters.httpHealthCheck = p_httpHealthCheck
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.httpHealthChecks_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "httpHealthChecks.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<Int>("r_checkIntervalSec", default: [], count: 1, description: "How often (in seconds) to send a health check. The default value is 5 seconds."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<Int>("r_healthyThreshold", default: [], count: 1, description: "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2."),
      Options<String>("r_host", default: [], count: 1, description: "The value of the host header in the HTTP health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#httpHealthCheck for HTTP health checks."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<Int>("r_port", default: [], count: 1, description: "The TCP port number for the HTTP health check request. The default value is 80."),
      Options<String>("r_requestPath", default: [], count: 1, description: "The request path of the HTTP health check request. The default value is /."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<Int>("r_timeoutSec", default: [], count: 1, description: "How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec."),
      Options<Int>("r_unhealthyThreshold", default: [], count: 1, description: "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2."),
      description: "Creates a HttpHealthCheck resource in the specified project using the data included in the request.") {
      p_project, p_requestId,r_checkIntervalSec, r_creationTimestamp, r_description, r_healthyThreshold, r_host, r_id, r_kind, r_name, r_port, r_requestPath, r_selfLink, r_timeoutSec, r_unhealthyThreshold in
      do {
        var parameters = Compute.HttpHealthChecksInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.HttpHealthCheck()
        if let r_checkIntervalSec = r_checkIntervalSec.first {
          request.checkIntervalSec = r_checkIntervalSec
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_healthyThreshold = r_healthyThreshold.first {
          request.healthyThreshold = r_healthyThreshold
        }
        if let r_host = r_host.first {
          request.host = r_host
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_port = r_port.first {
          request.port = r_port
        }
        if let r_requestPath = r_requestPath.first {
          request.requestPath = r_requestPath
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_timeoutSec = r_timeoutSec.first {
          request.timeoutSec = r_timeoutSec
        }
        if let r_unhealthyThreshold = r_unhealthyThreshold.first {
          request.unhealthyThreshold = r_unhealthyThreshold
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.httpHealthChecks_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "httpHealthChecks.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of HttpHealthCheck resources available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.HttpHealthChecksListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.httpHealthChecks_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "httpHealthChecks.patch",
      Options<String>("p_httpHealthCheck", default: [], count: 1, description: "Name of the HttpHealthCheck resource to patch."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<Int>("r_checkIntervalSec", default: [], count: 1, description: "How often (in seconds) to send a health check. The default value is 5 seconds."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<Int>("r_healthyThreshold", default: [], count: 1, description: "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2."),
      Options<String>("r_host", default: [], count: 1, description: "The value of the host header in the HTTP health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#httpHealthCheck for HTTP health checks."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<Int>("r_port", default: [], count: 1, description: "The TCP port number for the HTTP health check request. The default value is 80."),
      Options<String>("r_requestPath", default: [], count: 1, description: "The request path of the HTTP health check request. The default value is /."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<Int>("r_timeoutSec", default: [], count: 1, description: "How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec."),
      Options<Int>("r_unhealthyThreshold", default: [], count: 1, description: "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2."),
      description: "Updates a HttpHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.") {
      p_httpHealthCheck, p_project, p_requestId,r_checkIntervalSec, r_creationTimestamp, r_description, r_healthyThreshold, r_host, r_id, r_kind, r_name, r_port, r_requestPath, r_selfLink, r_timeoutSec, r_unhealthyThreshold in
      do {
        var parameters = Compute.HttpHealthChecksPatchParameters()
        if let p_httpHealthCheck = p_httpHealthCheck.first {
          parameters.httpHealthCheck = p_httpHealthCheck
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.HttpHealthCheck()
        if let r_checkIntervalSec = r_checkIntervalSec.first {
          request.checkIntervalSec = r_checkIntervalSec
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_healthyThreshold = r_healthyThreshold.first {
          request.healthyThreshold = r_healthyThreshold
        }
        if let r_host = r_host.first {
          request.host = r_host
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_port = r_port.first {
          request.port = r_port
        }
        if let r_requestPath = r_requestPath.first {
          request.requestPath = r_requestPath
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_timeoutSec = r_timeoutSec.first {
          request.timeoutSec = r_timeoutSec
        }
        if let r_unhealthyThreshold = r_unhealthyThreshold.first {
          request.unhealthyThreshold = r_unhealthyThreshold
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.httpHealthChecks_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "httpHealthChecks.update",
      Options<String>("p_httpHealthCheck", default: [], count: 1, description: "Name of the HttpHealthCheck resource to update."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<Int>("r_checkIntervalSec", default: [], count: 1, description: "How often (in seconds) to send a health check. The default value is 5 seconds."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<Int>("r_healthyThreshold", default: [], count: 1, description: "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2."),
      Options<String>("r_host", default: [], count: 1, description: "The value of the host header in the HTTP health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#httpHealthCheck for HTTP health checks."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<Int>("r_port", default: [], count: 1, description: "The TCP port number for the HTTP health check request. The default value is 80."),
      Options<String>("r_requestPath", default: [], count: 1, description: "The request path of the HTTP health check request. The default value is /."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<Int>("r_timeoutSec", default: [], count: 1, description: "How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec."),
      Options<Int>("r_unhealthyThreshold", default: [], count: 1, description: "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2."),
      description: "Updates a HttpHealthCheck resource in the specified project using the data included in the request.") {
      p_httpHealthCheck, p_project, p_requestId,r_checkIntervalSec, r_creationTimestamp, r_description, r_healthyThreshold, r_host, r_id, r_kind, r_name, r_port, r_requestPath, r_selfLink, r_timeoutSec, r_unhealthyThreshold in
      do {
        var parameters = Compute.HttpHealthChecksUpdateParameters()
        if let p_httpHealthCheck = p_httpHealthCheck.first {
          parameters.httpHealthCheck = p_httpHealthCheck
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.HttpHealthCheck()
        if let r_checkIntervalSec = r_checkIntervalSec.first {
          request.checkIntervalSec = r_checkIntervalSec
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_healthyThreshold = r_healthyThreshold.first {
          request.healthyThreshold = r_healthyThreshold
        }
        if let r_host = r_host.first {
          request.host = r_host
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_port = r_port.first {
          request.port = r_port
        }
        if let r_requestPath = r_requestPath.first {
          request.requestPath = r_requestPath
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_timeoutSec = r_timeoutSec.first {
          request.timeoutSec = r_timeoutSec
        }
        if let r_unhealthyThreshold = r_unhealthyThreshold.first {
          request.unhealthyThreshold = r_unhealthyThreshold
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.httpHealthChecks_update(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "httpsHealthChecks.delete",
      Options<String>("p_httpsHealthCheck", default: [], count: 1, description: "Name of the HttpsHealthCheck resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified HttpsHealthCheck resource.") {
      p_httpsHealthCheck, p_project, p_requestId in
      do {
        var parameters = Compute.HttpsHealthChecksDeleteParameters()
        if let p_httpsHealthCheck = p_httpsHealthCheck.first {
          parameters.httpsHealthCheck = p_httpsHealthCheck
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.httpsHealthChecks_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "httpsHealthChecks.get",
      Options<String>("p_httpsHealthCheck", default: [], count: 1, description: "Name of the HttpsHealthCheck resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Returns the specified HttpsHealthCheck resource. Gets a list of available HTTPS health checks by making a list() request.") {
      p_httpsHealthCheck, p_project in
      do {
        var parameters = Compute.HttpsHealthChecksGetParameters()
        if let p_httpsHealthCheck = p_httpsHealthCheck.first {
          parameters.httpsHealthCheck = p_httpsHealthCheck
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.httpsHealthChecks_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "httpsHealthChecks.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<Int>("r_checkIntervalSec", default: [], count: 1, description: "How often (in seconds) to send a health check. The default value is 5 seconds."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<Int>("r_healthyThreshold", default: [], count: 1, description: "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2."),
      Options<String>("r_host", default: [], count: 1, description: "The value of the host header in the HTTPS health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "Type of the resource."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<Int>("r_port", default: [], count: 1, description: "The TCP port number for the HTTPS health check request. The default value is 443."),
      Options<String>("r_requestPath", default: [], count: 1, description: "The request path of the HTTPS health check request. The default value is '/'."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<Int>("r_timeoutSec", default: [], count: 1, description: "How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have a greater value than checkIntervalSec."),
      Options<Int>("r_unhealthyThreshold", default: [], count: 1, description: "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2."),
      description: "Creates a HttpsHealthCheck resource in the specified project using the data included in the request.") {
      p_project, p_requestId,r_checkIntervalSec, r_creationTimestamp, r_description, r_healthyThreshold, r_host, r_id, r_kind, r_name, r_port, r_requestPath, r_selfLink, r_timeoutSec, r_unhealthyThreshold in
      do {
        var parameters = Compute.HttpsHealthChecksInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.HttpsHealthCheck()
        if let r_checkIntervalSec = r_checkIntervalSec.first {
          request.checkIntervalSec = r_checkIntervalSec
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_healthyThreshold = r_healthyThreshold.first {
          request.healthyThreshold = r_healthyThreshold
        }
        if let r_host = r_host.first {
          request.host = r_host
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_port = r_port.first {
          request.port = r_port
        }
        if let r_requestPath = r_requestPath.first {
          request.requestPath = r_requestPath
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_timeoutSec = r_timeoutSec.first {
          request.timeoutSec = r_timeoutSec
        }
        if let r_unhealthyThreshold = r_unhealthyThreshold.first {
          request.unhealthyThreshold = r_unhealthyThreshold
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.httpsHealthChecks_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "httpsHealthChecks.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of HttpsHealthCheck resources available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.HttpsHealthChecksListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.httpsHealthChecks_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "httpsHealthChecks.patch",
      Options<String>("p_httpsHealthCheck", default: [], count: 1, description: "Name of the HttpsHealthCheck resource to patch."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<Int>("r_checkIntervalSec", default: [], count: 1, description: "How often (in seconds) to send a health check. The default value is 5 seconds."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<Int>("r_healthyThreshold", default: [], count: 1, description: "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2."),
      Options<String>("r_host", default: [], count: 1, description: "The value of the host header in the HTTPS health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "Type of the resource."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<Int>("r_port", default: [], count: 1, description: "The TCP port number for the HTTPS health check request. The default value is 443."),
      Options<String>("r_requestPath", default: [], count: 1, description: "The request path of the HTTPS health check request. The default value is '/'."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<Int>("r_timeoutSec", default: [], count: 1, description: "How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have a greater value than checkIntervalSec."),
      Options<Int>("r_unhealthyThreshold", default: [], count: 1, description: "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2."),
      description: "Updates a HttpsHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.") {
      p_httpsHealthCheck, p_project, p_requestId,r_checkIntervalSec, r_creationTimestamp, r_description, r_healthyThreshold, r_host, r_id, r_kind, r_name, r_port, r_requestPath, r_selfLink, r_timeoutSec, r_unhealthyThreshold in
      do {
        var parameters = Compute.HttpsHealthChecksPatchParameters()
        if let p_httpsHealthCheck = p_httpsHealthCheck.first {
          parameters.httpsHealthCheck = p_httpsHealthCheck
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.HttpsHealthCheck()
        if let r_checkIntervalSec = r_checkIntervalSec.first {
          request.checkIntervalSec = r_checkIntervalSec
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_healthyThreshold = r_healthyThreshold.first {
          request.healthyThreshold = r_healthyThreshold
        }
        if let r_host = r_host.first {
          request.host = r_host
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_port = r_port.first {
          request.port = r_port
        }
        if let r_requestPath = r_requestPath.first {
          request.requestPath = r_requestPath
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_timeoutSec = r_timeoutSec.first {
          request.timeoutSec = r_timeoutSec
        }
        if let r_unhealthyThreshold = r_unhealthyThreshold.first {
          request.unhealthyThreshold = r_unhealthyThreshold
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.httpsHealthChecks_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "httpsHealthChecks.update",
      Options<String>("p_httpsHealthCheck", default: [], count: 1, description: "Name of the HttpsHealthCheck resource to update."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<Int>("r_checkIntervalSec", default: [], count: 1, description: "How often (in seconds) to send a health check. The default value is 5 seconds."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<Int>("r_healthyThreshold", default: [], count: 1, description: "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2."),
      Options<String>("r_host", default: [], count: 1, description: "The value of the host header in the HTTPS health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "Type of the resource."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<Int>("r_port", default: [], count: 1, description: "The TCP port number for the HTTPS health check request. The default value is 443."),
      Options<String>("r_requestPath", default: [], count: 1, description: "The request path of the HTTPS health check request. The default value is '/'."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<Int>("r_timeoutSec", default: [], count: 1, description: "How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have a greater value than checkIntervalSec."),
      Options<Int>("r_unhealthyThreshold", default: [], count: 1, description: "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2."),
      description: "Updates a HttpsHealthCheck resource in the specified project using the data included in the request.") {
      p_httpsHealthCheck, p_project, p_requestId,r_checkIntervalSec, r_creationTimestamp, r_description, r_healthyThreshold, r_host, r_id, r_kind, r_name, r_port, r_requestPath, r_selfLink, r_timeoutSec, r_unhealthyThreshold in
      do {
        var parameters = Compute.HttpsHealthChecksUpdateParameters()
        if let p_httpsHealthCheck = p_httpsHealthCheck.first {
          parameters.httpsHealthCheck = p_httpsHealthCheck
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.HttpsHealthCheck()
        if let r_checkIntervalSec = r_checkIntervalSec.first {
          request.checkIntervalSec = r_checkIntervalSec
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_healthyThreshold = r_healthyThreshold.first {
          request.healthyThreshold = r_healthyThreshold
        }
        if let r_host = r_host.first {
          request.host = r_host
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_port = r_port.first {
          request.port = r_port
        }
        if let r_requestPath = r_requestPath.first {
          request.requestPath = r_requestPath
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_timeoutSec = r_timeoutSec.first {
          request.timeoutSec = r_timeoutSec
        }
        if let r_unhealthyThreshold = r_unhealthyThreshold.first {
          request.unhealthyThreshold = r_unhealthyThreshold
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.httpsHealthChecks_update(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "images.delete",
      Options<String>("p_image", default: [], count: 1, description: "Name of the image resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified image.") {
      p_image, p_project, p_requestId in
      do {
        var parameters = Compute.ImagesDeleteParameters()
        if let p_image = p_image.first {
          parameters.image = p_image
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.images_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "images.deprecate",
      Options<String>("p_image", default: [], count: 1, description: "Image name."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_deleted", default: [], count: 1, description: "An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it."),
      Options<String>("r_deprecated", default: [], count: 1, description: "An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it."),
      Options<String>("r_obsolete", default: [], count: 1, description: "An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it."),
      Options<String>("r_replacement", default: [], count: 1, description: "The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource."),
      Options<String>("r_state", default: [], count: 1, description: "The deprecation state of this resource. This can be DEPRECATED, OBSOLETE, or DELETED. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error."),
      description: "Sets the deprecation status of an image.  If an empty request body is given, clears the deprecation status instead.") {
      p_image, p_project, p_requestId,r_deleted, r_deprecated, r_obsolete, r_replacement, r_state in
      do {
        var parameters = Compute.ImagesDeprecateParameters()
        if let p_image = p_image.first {
          parameters.image = p_image
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.DeprecationStatus()
        if let r_deleted = r_deleted.first {
          request.deleted = r_deleted
        }
        if let r_deprecated = r_deprecated.first {
          request.deprecated = r_deprecated
        }
        if let r_obsolete = r_obsolete.first {
          request.obsolete = r_obsolete
        }
        if let r_replacement = r_replacement.first {
          request.replacement = r_replacement
        }
        if let r_state = r_state.first {
          request.state = r_state
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.images_deprecate(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "images.get",
      Options<String>("p_image", default: [], count: 1, description: "Name of the image resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Returns the specified image. Gets a list of available images by making a list() request.") {
      p_image, p_project in
      do {
        var parameters = Compute.ImagesGetParameters()
        if let p_image = p_image.first {
          parameters.image = p_image
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.images_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "images.getFromFamily",
      Options<String>("p_family", default: [], count: 1, description: "Name of the image family to search for."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Returns the latest image that is part of an image family and is not deprecated.") {
      p_family, p_project in
      do {
        var parameters = Compute.ImagesGetFromFamilyParameters()
        if let p_family = p_family.first {
          parameters.family = p_family
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.images_getFromFamily(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "images.getIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      description: "Gets the access control policy for a resource. May be empty if no such policy or resource exists.") {
      p_project, p_resource in
      do {
        var parameters = Compute.ImagesGetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.images_getIamPolicy(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "images.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_archiveSizeBytes", default: [], count: 1, description: "Size of the image tar.gz archive stored in Google Cloud Storage (in bytes)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_diskSizeGb", default: [], count: 1, description: "Size of the image when restored onto a persistent disk (in GB)."),
      Options<String>("r_family", default: [], count: 1, description: "The name of the image family to which this image belongs. You can create disks by specifying an image family instead of a specific image name. The image family always returns its latest image that is not deprecated. The name of the image family must comply with RFC1035."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#image for images."),
      Options<String>("r_labelFingerprint", default: [], count: 1, description: "A fingerprint for the labels being applied to this image, which is essentially a hash of the labels used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve an image."),
      VariadicOption<String>("r_licenseCodes", default: [], description: "Integer license codes indicating which licenses are attached to this image."),
      VariadicOption<String>("r_licenses", default: [], description: "Any applicable license URI."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_sourceDisk", default: [], count: 1, description: "URL of the source disk used to create this image. This can be a full or valid partial URL. You must provide either this property or the rawDisk.source property but not both to create an image. For example, the following are valid values:   - https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk  - projects/project/zones/zone/disks/disk  - zones/zone/disks/disk"),
      Options<String>("r_sourceDiskId", default: [], count: 1, description: "[Output Only] The ID value of the disk used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given disk name."),
      Options<String>("r_sourceImage", default: [], count: 1, description: "URL of the source image used to create this image. This can be a full or valid partial URL. You must provide exactly one of:   - this property, or   - the rawDisk.source property, or   - the sourceDisk property   in order to create an image."),
      Options<String>("r_sourceImageId", default: [], count: 1, description: "[Output Only] The ID value of the image used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given image name."),
      Options<String>("r_sourceSnapshot", default: [], count: 1, description: "URL of the source snapshot used to create this image. This can be a full or valid partial URL. You must provide exactly one of:   - this property, or   - the sourceImage property, or   - the rawDisk.source property, or   - the sourceDisk property   in order to create an image."),
      Options<String>("r_sourceSnapshotId", default: [], count: 1, description: "[Output Only] The ID value of the snapshot used to create this image. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given snapshot name."),
      Options<String>("r_sourceType", default: [], count: 1, description: "The type of the image used to create this disk. The default and only value is RAW"),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] The status of the image. An image can be used to create other resources, such as instances, only after the image has been successfully created and the status is set to READY. Possible values are FAILED, PENDING, or READY."),
      description: "Creates an image in the specified project using the data included in the request.") {
      p_project, p_requestId,r_archiveSizeBytes, r_creationTimestamp, r_description, r_diskSizeGb, r_family, r_id, r_kind, r_labelFingerprint, r_licenseCodes, r_licenses, r_name, r_selfLink, r_sourceDisk, r_sourceDiskId, r_sourceImage, r_sourceImageId, r_sourceSnapshot, r_sourceSnapshotId, r_sourceType, r_status in
      do {
        var parameters = Compute.ImagesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Image()
        if let r_archiveSizeBytes = r_archiveSizeBytes.first {
          request.archiveSizeBytes = r_archiveSizeBytes
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_diskSizeGb = r_diskSizeGb.first {
          request.diskSizeGb = r_diskSizeGb
        }
        if let r_family = r_family.first {
          request.family = r_family
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_labelFingerprint = r_labelFingerprint.first {
          request.labelFingerprint = r_labelFingerprint
        }
        if r_licenseCodes.count > 0 {
          request.licenseCodes = r_licenseCodes
        }
        if r_licenses.count > 0 {
          request.licenses = r_licenses
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_sourceDisk = r_sourceDisk.first {
          request.sourceDisk = r_sourceDisk
        }
        if let r_sourceDiskId = r_sourceDiskId.first {
          request.sourceDiskId = r_sourceDiskId
        }
        if let r_sourceImage = r_sourceImage.first {
          request.sourceImage = r_sourceImage
        }
        if let r_sourceImageId = r_sourceImageId.first {
          request.sourceImageId = r_sourceImageId
        }
        if let r_sourceSnapshot = r_sourceSnapshot.first {
          request.sourceSnapshot = r_sourceSnapshot
        }
        if let r_sourceSnapshotId = r_sourceSnapshotId.first {
          request.sourceSnapshotId = r_sourceSnapshotId
        }
        if let r_sourceType = r_sourceType.first {
          request.sourceType = r_sourceType
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.images_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "images.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of custom images available to the specified project. Custom images are images you create that belong to your project. This method does not get any images that belong to other projects, including publicly-available images, like Debian 8. If you want to get a list of publicly-available images, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.ImagesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.images_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "images.setIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("r_etag", default: [], count: 1, description: "Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag."),
      description: "Sets the access control policy on the specified resource. Replaces any existing policy.") {
      p_project, p_resource,r_etag in
      do {
        var parameters = Compute.ImagesSetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        var request = Compute.GlobalSetPolicyRequest()
        if let r_etag = r_etag.first {
          request.etag = r_etag
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.images_setIamPolicy(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "images.setLabels",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("r_labelFingerprint", default: [], count: 1, description: "The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash when updating or changing labels, otherwise the request will fail with error 412 conditionNotMet. Make a get() request to the resource to get the latest fingerprint."),
      description: "Sets the labels on an image. To learn more about labels, read the Labeling Resources documentation.") {
      p_project, p_resource,r_labelFingerprint in
      do {
        var parameters = Compute.ImagesSetLabelsParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        var request = Compute.GlobalSetLabelsRequest()
        if let r_labelFingerprint = r_labelFingerprint.first {
          request.labelFingerprint = r_labelFingerprint
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.images_setLabels(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "images.testIamPermissions",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      VariadicOption<String>("r_permissions", default: [], description: "The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed."),
      description: "Returns permissions that a caller has on the specified resource.") {
      p_project, p_resource,r_permissions in
      do {
        var parameters = Compute.ImagesTestIamPermissionsParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        var request = Compute.TestPermissionsRequest()
        if r_permissions.count > 0 {
          request.permissions = r_permissions
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.images_testIamPermissions(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroupManagers.abandonInstances",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "The name of the managed instance group."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where the managed instance group is located."),
      VariadicOption<String>("r_instances", default: [], description: "The URLs of one or more instances to abandon. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]."),
      description: "Flags the specified instances to be removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.  You can specify a maximum of 1000 instances with this method per request.") {
      p_instanceGroupManager, p_project, p_requestId, p_zone,r_instances in
      do {
        var parameters = Compute.InstanceGroupManagersAbandonInstancesParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstanceGroupManagersAbandonInstancesRequest()
        if r_instances.count > 0 {
          request.instances = r_instances
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroupManagers_abandonInstances(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroupManagers.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of managed instance groups and groups them by zone.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.InstanceGroupManagersAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroupManagers_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroupManagers.delete",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "The name of the managed instance group to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where the managed instance group is located."),
      description: "Deletes the specified managed instance group and all of the instances in that group. Note that the instance group must not belong to a backend service. Read  Deleting an instance group for more information.") {
      p_instanceGroupManager, p_project, p_requestId, p_zone in
      do {
        var parameters = Compute.InstanceGroupManagersDeleteParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroupManagers_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroupManagers.deleteInstances",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "The name of the managed instance group."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where the managed instance group is located."),
      VariadicOption<String>("r_instances", default: [], description: "The URLs of one or more instances to delete. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]."),
      description: "Flags the specified instances in the managed instance group for immediate deletion. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. This operation is marked as DONE when the action is scheduled even if the instances are still being deleted. You must separately verify the status of the deleting action with the listmanagedinstances method.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.  You can specify a maximum of 1000 instances with this method per request.") {
      p_instanceGroupManager, p_project, p_requestId, p_zone,r_instances in
      do {
        var parameters = Compute.InstanceGroupManagersDeleteInstancesParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstanceGroupManagersDeleteInstancesRequest()
        if r_instances.count > 0 {
          request.instances = r_instances
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroupManagers_deleteInstances(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroupManagers.get",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "The name of the managed instance group."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where the managed instance group is located."),
      description: "Returns all of the details about the specified managed instance group. Gets a list of available managed instance groups by making a list() request.") {
      p_instanceGroupManager, p_project, p_zone in
      do {
        var parameters = Compute.InstanceGroupManagersGetParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroupManagers_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroupManagers.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where you want to create the managed instance group."),
      Options<String>("r_baseInstanceName", default: [], count: 1, description: "The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] The creation timestamp for this managed instance group in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of this resource. This field may be used in optimistic locking. It will be ignored when inserting an InstanceGroupManager. An up-to-date fingerprint must be provided in order to update the InstanceGroupManager, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve an InstanceGroupManager."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] A unique identifier for this resource type. The server generates this identifier."),
      Options<String>("r_instanceGroup", default: [], count: 1, description: "[Output Only] The URL of the Instance Group resource."),
      Options<String>("r_instanceTemplate", default: [], count: 1, description: "The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] The resource type, which is always compute#instanceGroupManager for managed instance groups."),
      Options<String>("r_name", default: [], count: 1, description: "The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] The URL of the region where the managed instance group resides (for regional resources)."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] The URL for this managed instance group. The server defines this URL."),
      VariadicOption<String>("r_targetPools", default: [], description: "The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group."),
      Options<Int>("r_targetSize", default: [], count: 1, description: "The target number of running instances for this managed instance group. Deleting or abandoning instances reduces this number. Resizing the group changes this number."),
      Options<String>("r_zone", default: [], count: 1, description: "[Output Only] The URL of the zone where the managed instance group is located (for zonal resources)."),
      description: "Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method.  A managed instance group can have up to 1000 VM instances per group. Please contact Cloud Support if you need an increase in this limit.") {
      p_project, p_requestId, p_zone,r_baseInstanceName, r_creationTimestamp, r_description, r_fingerprint, r_id, r_instanceGroup, r_instanceTemplate, r_kind, r_name, r_region, r_selfLink, r_targetPools, r_targetSize, r_zone in
      do {
        var parameters = Compute.InstanceGroupManagersInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstanceGroupManager()
        if let r_baseInstanceName = r_baseInstanceName.first {
          request.baseInstanceName = r_baseInstanceName
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_instanceGroup = r_instanceGroup.first {
          request.instanceGroup = r_instanceGroup
        }
        if let r_instanceTemplate = r_instanceTemplate.first {
          request.instanceTemplate = r_instanceTemplate
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if r_targetPools.count > 0 {
          request.targetPools = r_targetPools
        }
        if let r_targetSize = r_targetSize.first {
          request.targetSize = r_targetSize
        }
        if let r_zone = r_zone.first {
          request.zone = r_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroupManagers_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroupManagers.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where the managed instance group is located."),
      description: "Retrieves a list of managed instance groups that are contained within the specified project and zone.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_zone in
      do {
        var parameters = Compute.InstanceGroupManagersListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroupManagers_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroupManagers.listManagedInstances",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "The name of the managed instance group."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_order_by", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where the managed instance group is located."),
      description: "Lists all of the instances in the managed instance group. Each instance in the list has a currentAction, which indicates the action that the managed instance group is performing on the instance. For example, if the group is still creating an instance, the currentAction is CREATING. If a previous action failed, the list displays the errors for that failed action.") {
      p_filter, p_instanceGroupManager, p_maxResults, p_order_by, p_pageToken, p_project, p_zone in
      do {
        var parameters = Compute.InstanceGroupManagersListManagedInstancesParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_order_by = p_order_by.first {
          parameters.order_by = p_order_by
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroupManagers_listManagedInstances(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroupManagers.patch",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "The name of the instance group manager."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where you want to create the managed instance group."),
      Options<String>("r_baseInstanceName", default: [], count: 1, description: "The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] The creation timestamp for this managed instance group in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of this resource. This field may be used in optimistic locking. It will be ignored when inserting an InstanceGroupManager. An up-to-date fingerprint must be provided in order to update the InstanceGroupManager, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve an InstanceGroupManager."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] A unique identifier for this resource type. The server generates this identifier."),
      Options<String>("r_instanceGroup", default: [], count: 1, description: "[Output Only] The URL of the Instance Group resource."),
      Options<String>("r_instanceTemplate", default: [], count: 1, description: "The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] The resource type, which is always compute#instanceGroupManager for managed instance groups."),
      Options<String>("r_name", default: [], count: 1, description: "The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] The URL of the region where the managed instance group resides (for regional resources)."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] The URL for this managed instance group. The server defines this URL."),
      VariadicOption<String>("r_targetPools", default: [], description: "The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group."),
      Options<Int>("r_targetSize", default: [], count: 1, description: "The target number of running instances for this managed instance group. Deleting or abandoning instances reduces this number. Resizing the group changes this number."),
      Options<String>("r_zone", default: [], count: 1, description: "[Output Only] The URL of the zone where the managed instance group is located (for zonal resources)."),
      description: "Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listManagedInstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.") {
      p_instanceGroupManager, p_project, p_requestId, p_zone,r_baseInstanceName, r_creationTimestamp, r_description, r_fingerprint, r_id, r_instanceGroup, r_instanceTemplate, r_kind, r_name, r_region, r_selfLink, r_targetPools, r_targetSize, r_zone in
      do {
        var parameters = Compute.InstanceGroupManagersPatchParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstanceGroupManager()
        if let r_baseInstanceName = r_baseInstanceName.first {
          request.baseInstanceName = r_baseInstanceName
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_instanceGroup = r_instanceGroup.first {
          request.instanceGroup = r_instanceGroup
        }
        if let r_instanceTemplate = r_instanceTemplate.first {
          request.instanceTemplate = r_instanceTemplate
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if r_targetPools.count > 0 {
          request.targetPools = r_targetPools
        }
        if let r_targetSize = r_targetSize.first {
          request.targetSize = r_targetSize
        }
        if let r_zone = r_zone.first {
          request.zone = r_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroupManagers_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroupManagers.recreateInstances",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "The name of the managed instance group."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where the managed instance group is located."),
      VariadicOption<String>("r_instances", default: [], description: "The URLs of one or more instances to recreate. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]."),
      description: "Flags the specified instances in the managed instance group to be immediately recreated. The instances are deleted and recreated using the current instance template for the managed instance group. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of the recreating action with the listmanagedinstances method.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.  You can specify a maximum of 1000 instances with this method per request.") {
      p_instanceGroupManager, p_project, p_requestId, p_zone,r_instances in
      do {
        var parameters = Compute.InstanceGroupManagersRecreateInstancesParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstanceGroupManagersRecreateInstancesRequest()
        if r_instances.count > 0 {
          request.instances = r_instances
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroupManagers_recreateInstances(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroupManagers.resize",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "The name of the managed instance group."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<Int>("p_size", default: [], count: 1, description: "The number of running instances that the managed instance group should maintain at any given time. The group automatically adds or removes instances to maintain the number of instances specified by this parameter."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where the managed instance group is located."),
      description: "Resizes the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes instances. The resize operation is marked DONE when the resize actions are scheduled even if the group has not yet added or deleted any instances. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method.  When resizing down, the instance group arbitrarily chooses the order in which VMs are deleted. The group takes into account some VM attributes when making the selection including:  + The status of the VM instance. + The health of the VM instance. + The instance template version the VM is based on. + For regional managed instance groups, the location of the VM instance.  This list is subject to change.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.") {
      p_instanceGroupManager, p_project, p_requestId, p_size, p_zone in
      do {
        var parameters = Compute.InstanceGroupManagersResizeParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_size = p_size.first {
          parameters.size = p_size
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroupManagers_resize(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroupManagers.setInstanceTemplate",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "The name of the managed instance group."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where the managed instance group is located."),
      Options<String>("r_instanceTemplate", default: [], count: 1, description: "The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group."),
      description: "Specifies the instance template to use when creating new instances in this group. The templates for existing instances in the group do not change unless you recreate them.") {
      p_instanceGroupManager, p_project, p_requestId, p_zone,r_instanceTemplate in
      do {
        var parameters = Compute.InstanceGroupManagersSetInstanceTemplateParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstanceGroupManagersSetInstanceTemplateRequest()
        if let r_instanceTemplate = r_instanceTemplate.first {
          request.instanceTemplate = r_instanceTemplate
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroupManagers_setInstanceTemplate(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroupManagers.setTargetPools",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "The name of the managed instance group."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where the managed instance group is located."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "The fingerprint of the target pools information. Use this optional property to prevent conflicts when multiple users change the target pools settings concurrently. Obtain the fingerprint with the instanceGroupManagers.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request."),
      VariadicOption<String>("r_targetPools", default: [], description: "The list of target pool URLs that instances in this managed instance group belong to. The managed instance group applies these target pools to all of the instances in the group. Existing instances and new instances in the group all receive these target pool settings."),
      description: "Modifies the target pools to which all instances in this managed instance group are assigned. The target pools automatically apply to all of the instances in the managed instance group. This operation is marked DONE when you make the request even if the instances have not yet been added to their target pools. The change might take some time to apply to all of the instances in the group depending on the size of the group.") {
      p_instanceGroupManager, p_project, p_requestId, p_zone,r_fingerprint, r_targetPools in
      do {
        var parameters = Compute.InstanceGroupManagersSetTargetPoolsParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstanceGroupManagersSetTargetPoolsRequest()
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if r_targetPools.count > 0 {
          request.targetPools = r_targetPools
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroupManagers_setTargetPools(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroups.addInstances",
      Options<String>("p_instanceGroup", default: [], count: 1, description: "The name of the instance group where you are adding instances."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where the instance group is located."),
      description: "Adds a list of instances to the specified instance group. All of the instances in the instance group must be in the same network/subnetwork. Read  Adding instances for more information.") {
      p_instanceGroup, p_project, p_requestId, p_zone in
      do {
        var parameters = Compute.InstanceGroupsAddInstancesParameters()
        if let p_instanceGroup = p_instanceGroup.first {
          parameters.instanceGroup = p_instanceGroup
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstanceGroupsAddInstancesRequest()
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroups_addInstances(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroups.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of instance groups and sorts them by zone.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.InstanceGroupsAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroups_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroups.delete",
      Options<String>("p_instanceGroup", default: [], count: 1, description: "The name of the instance group to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where the instance group is located."),
      description: "Deletes the specified instance group. The instances in the group are not deleted. Note that instance group must not belong to a backend service. Read  Deleting an instance group for more information.") {
      p_instanceGroup, p_project, p_requestId, p_zone in
      do {
        var parameters = Compute.InstanceGroupsDeleteParameters()
        if let p_instanceGroup = p_instanceGroup.first {
          parameters.instanceGroup = p_instanceGroup
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroups_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroups.get",
      Options<String>("p_instanceGroup", default: [], count: 1, description: "The name of the instance group."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where the instance group is located."),
      description: "Returns the specified instance group. Gets a list of available instance groups by making a list() request.") {
      p_instanceGroup, p_project, p_zone in
      do {
        var parameters = Compute.InstanceGroupsGetParameters()
        if let p_instanceGroup = p_instanceGroup.first {
          parameters.instanceGroup = p_instanceGroup
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroups_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroups.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where you want to create the instance group."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] The creation timestamp for this instance group in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "[Output Only] The fingerprint of the named ports. The system uses this fingerprint to detect conflicts when multiple users change the named ports concurrently."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] A unique identifier for this instance group, generated by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] The resource type, which is always compute#instanceGroup for instance groups."),
      Options<String>("r_name", default: [], count: 1, description: "The name of the instance group. The name must be 1-63 characters long, and comply with RFC1035."),
      Options<String>("r_network", default: [], count: 1, description: "The URL of the network to which all instances in the instance group belong."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] The URL of the region where the instance group is located (for regional resources)."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] The URL for this instance group. The server generates this URL."),
      Options<Int>("r_size", default: [], count: 1, description: "[Output Only] The total number of instances in the instance group."),
      Options<String>("r_subnetwork", default: [], count: 1, description: "[Output Only] The URL of the subnetwork to which all instances in the instance group belong."),
      Options<String>("r_zone", default: [], count: 1, description: "[Output Only] The URL of the zone where the instance group is located (for zonal resources)."),
      description: "Creates an instance group in the specified project using the parameters that are included in the request.") {
      p_project, p_requestId, p_zone,r_creationTimestamp, r_description, r_fingerprint, r_id, r_kind, r_name, r_network, r_region, r_selfLink, r_size, r_subnetwork, r_zone in
      do {
        var parameters = Compute.InstanceGroupsInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstanceGroup()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_network = r_network.first {
          request.network = r_network
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_size = r_size.first {
          request.size = r_size
        }
        if let r_subnetwork = r_subnetwork.first {
          request.subnetwork = r_subnetwork
        }
        if let r_zone = r_zone.first {
          request.zone = r_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroups_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroups.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where the instance group is located."),
      description: "Retrieves the list of instance groups that are located in the specified project and zone.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_zone in
      do {
        var parameters = Compute.InstanceGroupsListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroups_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroups.listInstances",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<String>("p_instanceGroup", default: [], count: 1, description: "The name of the instance group from which you want to generate a list of included instances."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where the instance group is located."),
      Options<String>("r_instanceState", default: [], count: 1, description: "A filter for the state of the instances in the instance group. Valid options are ALL or RUNNING. If you do not specify this parameter the list includes all instances regardless of their state."),
      description: "Lists the instances in the specified instance group.") {
      p_filter, p_instanceGroup, p_maxResults, p_orderBy, p_pageToken, p_project, p_zone,r_instanceState in
      do {
        var parameters = Compute.InstanceGroupsListInstancesParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_instanceGroup = p_instanceGroup.first {
          parameters.instanceGroup = p_instanceGroup
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstanceGroupsListInstancesRequest()
        if let r_instanceState = r_instanceState.first {
          request.instanceState = r_instanceState
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroups_listInstances(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroups.removeInstances",
      Options<String>("p_instanceGroup", default: [], count: 1, description: "The name of the instance group where the specified instances will be removed."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where the instance group is located."),
      description: "Removes one or more instances from the specified instance group, but does not delete those instances.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration before the VM instance is removed or deleted.") {
      p_instanceGroup, p_project, p_requestId, p_zone in
      do {
        var parameters = Compute.InstanceGroupsRemoveInstancesParameters()
        if let p_instanceGroup = p_instanceGroup.first {
          parameters.instanceGroup = p_instanceGroup
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstanceGroupsRemoveInstancesRequest()
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroups_removeInstances(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceGroups.setNamedPorts",
      Options<String>("p_instanceGroup", default: [], count: 1, description: "The name of the instance group where the named ports are updated."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone where the instance group is located."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request. A request with an incorrect fingerprint will fail with error 412 conditionNotMet."),
      description: "Sets the named ports for the specified instance group.") {
      p_instanceGroup, p_project, p_requestId, p_zone,r_fingerprint in
      do {
        var parameters = Compute.InstanceGroupsSetNamedPortsParameters()
        if let p_instanceGroup = p_instanceGroup.first {
          parameters.instanceGroup = p_instanceGroup
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstanceGroupsSetNamedPortsRequest()
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceGroups_setNamedPorts(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceTemplates.delete",
      Options<String>("p_instanceTemplate", default: [], count: 1, description: "The name of the instance template to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified instance template. Deleting an instance template is permanent and cannot be undone. It is not possible to delete templates that are already in use by a managed instance group.") {
      p_instanceTemplate, p_project, p_requestId in
      do {
        var parameters = Compute.InstanceTemplatesDeleteParameters()
        if let p_instanceTemplate = p_instanceTemplate.first {
          parameters.instanceTemplate = p_instanceTemplate
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceTemplates_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceTemplates.get",
      Options<String>("p_instanceTemplate", default: [], count: 1, description: "The name of the instance template."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Returns the specified instance template. Gets a list of available instance templates by making a list() request.") {
      p_instanceTemplate, p_project in
      do {
        var parameters = Compute.InstanceTemplatesGetParameters()
        if let p_instanceTemplate = p_instanceTemplate.first {
          parameters.instanceTemplate = p_instanceTemplate
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceTemplates_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceTemplates.getIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      description: "Gets the access control policy for a resource. May be empty if no such policy or resource exists.") {
      p_project, p_resource in
      do {
        var parameters = Compute.InstanceTemplatesGetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceTemplates_getIamPolicy(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceTemplates.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] The creation timestamp for this instance template in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] A unique identifier for this instance template. The server defines this identifier."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] The resource type, which is always compute#instanceTemplate for instance templates."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] The URL for this instance template. The server defines this URL."),
      Options<String>("r_sourceInstance", default: [], count: 1, description: "The source instance used to create the template. You can provide this as a partial or full URL to the resource. For example, the following are valid values:   - https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance  - projects/project/zones/zone/instances/instance"),
      description: "Creates an instance template in the specified project using the data that is included in the request. If you are creating a new template to update an existing instance group, your new instance template must use the same network or, if applicable, the same subnetwork as the original template.") {
      p_project, p_requestId,r_creationTimestamp, r_description, r_id, r_kind, r_name, r_selfLink, r_sourceInstance in
      do {
        var parameters = Compute.InstanceTemplatesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.InstanceTemplate()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_sourceInstance = r_sourceInstance.first {
          request.sourceInstance = r_sourceInstance
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceTemplates_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceTemplates.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves a list of instance templates that are contained within the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.InstanceTemplatesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceTemplates_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceTemplates.setIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("r_etag", default: [], count: 1, description: "Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag."),
      description: "Sets the access control policy on the specified resource. Replaces any existing policy.") {
      p_project, p_resource,r_etag in
      do {
        var parameters = Compute.InstanceTemplatesSetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        var request = Compute.GlobalSetPolicyRequest()
        if let r_etag = r_etag.first {
          request.etag = r_etag
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceTemplates_setIamPolicy(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instanceTemplates.testIamPermissions",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      VariadicOption<String>("r_permissions", default: [], description: "The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed."),
      description: "Returns permissions that a caller has on the specified resource.") {
      p_project, p_resource,r_permissions in
      do {
        var parameters = Compute.InstanceTemplatesTestIamPermissionsParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        var request = Compute.TestPermissionsRequest()
        if r_permissions.count > 0 {
          request.permissions = r_permissions
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instanceTemplates_testIamPermissions(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.addAccessConfig",
      Options<String>("p_instance", default: [], count: 1, description: "The instance name for this request."),
      Options<String>("p_networkInterface", default: [], count: 1, description: "The name of the network interface to add to this instance."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#accessConfig for access configs."),
      Options<String>("r_name", default: [], count: 1, description: "The name of this access configuration. The default and recommended name is External NAT but you can use any arbitrary string you would like. For example, My external IP or Network Access."),
      Options<String>("r_natIP", default: [], count: 1, description: "An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance."),
      Options<String>("r_networkTier", default: [], count: 1, description: "This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD.  If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier.  If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP."),
      Options<String>("r_publicPtrDomainName", default: [], count: 1, description: "The DNS domain name for the public PTR record. This field can only be set when the set_public_ptr field is enabled."),
      Options<String>("r_type", default: [], count: 1, description: "The type of configuration. The default and only option is ONE_TO_ONE_NAT."),
      description: "Adds an access config to an instance's network interface.") {
      p_instance, p_networkInterface, p_project, p_requestId, p_zone,r_kind, r_name, r_natIP, r_networkTier, r_publicPtrDomainName, r_type in
      do {
        var parameters = Compute.InstancesAddAccessConfigParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_networkInterface = p_networkInterface.first {
          parameters.networkInterface = p_networkInterface
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.AccessConfig()
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_natIP = r_natIP.first {
          request.natIP = r_natIP
        }
        if let r_networkTier = r_networkTier.first {
          request.networkTier = r_networkTier
        }
        if let r_publicPtrDomainName = r_publicPtrDomainName.first {
          request.publicPtrDomainName = r_publicPtrDomainName
        }
        if let r_type = r_type.first {
          request.type = r_type
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_addAccessConfig(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves aggregated list of all of the instances in your project across all regions and zones.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.InstancesAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.attachDisk",
      Options<String>("p_instance", default: [], count: 1, description: "The instance name for this request."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_deviceName", default: [], count: 1, description: "Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance.  If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks."),
      Options<Int>("r_index", default: [], count: 1, description: "[Output Only] A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number."),
      Options<String>("r_interface", default: [], count: 1, description: "Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#attachedDisk for attached disks."),
      VariadicOption<String>("r_licenses", default: [], description: "[Output Only] Any valid publicly visible licenses."),
      Options<String>("r_mode", default: [], count: 1, description: "The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode."),
      Options<String>("r_source", default: [], count: 1, description: "Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or disks.source is required except for local SSD.  If desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks.  Note that for InstanceTemplate, specify the disk name, not the URL for the disk."),
      Options<String>("r_type", default: [], count: 1, description: "Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT."),
      description: "Attaches an existing Disk resource to an instance. You must first create the disk before you can attach it. It is not possible to create and attach a disk at the same time. For more information, read Adding a persistent disk to your instance.") {
      p_instance, p_project, p_requestId, p_zone,r_deviceName, r_index, r_interface, r_kind, r_licenses, r_mode, r_source, r_type in
      do {
        var parameters = Compute.InstancesAttachDiskParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.AttachedDisk()
        if let r_deviceName = r_deviceName.first {
          request.deviceName = r_deviceName
        }
        if let r_index = r_index.first {
          request.index = r_index
        }
        if let r_interface = r_interface.first {
          request.interface = r_interface
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if r_licenses.count > 0 {
          request.licenses = r_licenses
        }
        if let r_mode = r_mode.first {
          request.mode = r_mode
        }
        if let r_source = r_source.first {
          request.source = r_source
        }
        if let r_type = r_type.first {
          request.type = r_type
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_attachDisk(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.delete",
      Options<String>("p_instance", default: [], count: 1, description: "Name of the instance resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Deletes the specified Instance resource. For more information, see Stopping or Deleting an Instance.") {
      p_instance, p_project, p_requestId, p_zone in
      do {
        var parameters = Compute.InstancesDeleteParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.deleteAccessConfig",
      Options<String>("p_accessConfig", default: [], count: 1, description: "The name of the access config to delete."),
      Options<String>("p_instance", default: [], count: 1, description: "The instance name for this request."),
      Options<String>("p_networkInterface", default: [], count: 1, description: "The name of the network interface."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Deletes an access config from an instance's network interface.") {
      p_accessConfig, p_instance, p_networkInterface, p_project, p_requestId, p_zone in
      do {
        var parameters = Compute.InstancesDeleteAccessConfigParameters()
        if let p_accessConfig = p_accessConfig.first {
          parameters.accessConfig = p_accessConfig
        }
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_networkInterface = p_networkInterface.first {
          parameters.networkInterface = p_networkInterface
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_deleteAccessConfig(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.detachDisk",
      Options<String>("p_deviceName", default: [], count: 1, description: "The device name of the disk to detach. Make a get() request on the instance to view currently attached disks and device names."),
      Options<String>("p_instance", default: [], count: 1, description: "Instance name for this request."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Detaches a disk from an instance.") {
      p_deviceName, p_instance, p_project, p_requestId, p_zone in
      do {
        var parameters = Compute.InstancesDetachDiskParameters()
        if let p_deviceName = p_deviceName.first {
          parameters.deviceName = p_deviceName
        }
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_detachDisk(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.get",
      Options<String>("p_instance", default: [], count: 1, description: "Name of the instance resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Returns the specified Instance resource. Gets a list of available instances by making a list() request.") {
      p_instance, p_project, p_zone in
      do {
        var parameters = Compute.InstancesGetParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.getIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Gets the access control policy for a resource. May be empty if no such policy or resource exists.") {
      p_project, p_resource, p_zone in
      do {
        var parameters = Compute.InstancesGetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_getIamPolicy(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.getSerialPortOutput",
      Options<String>("p_instance", default: [], count: 1, description: "Name of the instance scoping this request."),
      Options<Int>("p_port", default: [], count: 1, description: "Specifies which COM or serial port to retrieve data from."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_start", default: [], count: 1, description: "Returns output starting from a specific byte position. Use this to page through output when the output is too large to return in a single request. For the initial request, leave this field unspecified. For subsequent calls, this field should be set to the next value returned in the previous call."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Returns the last 1 MB of serial port output from the specified instance.") {
      p_instance, p_port, p_project, p_start, p_zone in
      do {
        var parameters = Compute.InstancesGetSerialPortOutputParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_port = p_port.first {
          parameters.port = p_port
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_start = p_start.first {
          parameters.start = p_start
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_getSerialPortOutput(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_sourceInstanceTemplate", default: [], count: 1, description: "Specifies instance template to create the instance.  This field is optional. It can be a full or partial URL. For example, the following are all valid URLs to an instance template:   - https://www.googleapis.com/compute/v1/projects/project/global/instanceTemplates/instanceTemplate  - projects/project/global/instanceTemplates/instanceTemplate  - global/instanceTemplates/instanceTemplate"),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_cpuPlatform", default: [], count: 1, description: "[Output Only] The CPU platform used by this instance."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_hostname", default: [], count: 1, description: ""),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#instance for instances."),
      Options<String>("r_labelFingerprint", default: [], count: 1, description: "A fingerprint for this request, which is essentially a hash of the label's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels.  To see the latest fingerprint, make get() request to the instance."),
      Options<String>("r_machineType", default: [], count: 1, description: "Full or partial URL of the machine type resource to use for this instance, in the format: zones/zone/machineTypes/machine-type. This is provided by the client when the instance is created. For example, the following is a valid partial url to a predefined machine type: zones/us-central1-f/machineTypes/n1-standard-1   To create a custom machine type, provide a URL to a machine type in the following format, where CPUS is 1 or an even number up to 32 (2, 4, 6, ... 24, etc), and MEMORY is the total memory for this instance. Memory must be a multiple of 256 MB and must be supplied in MB (e.g. 5 GB of memory is 5120 MB): zones/zone/machineTypes/custom-CPUS-MEMORY   For example: zones/us-central1-f/machineTypes/custom-4-5120   For a full list of restrictions, read the Specifications for custom machine types."),
      Options<String>("r_minCpuPlatform", default: [], count: 1, description: "Specifies a minimum CPU platform for the VM instance. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: 'Intel Haswell' or minCpuPlatform: 'Intel Sandy Bridge'."),
      Options<String>("r_name", default: [], count: 1, description: "The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for this resource."),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] The status of the instance. One of the following values: PROVISIONING, STAGING, RUNNING, STOPPING, STOPPED, SUSPENDING, SUSPENDED, and TERMINATED."),
      Options<String>("r_statusMessage", default: [], count: 1, description: "[Output Only] An optional, human-readable explanation of the status."),
      Options<String>("r_zone", default: [], count: 1, description: "[Output Only] URL of the zone where the instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      description: "Creates an instance resource in the specified project using the data included in the request.") {
      p_project, p_requestId, p_sourceInstanceTemplate, p_zone,r_cpuPlatform, r_creationTimestamp, r_description, r_hostname, r_id, r_kind, r_labelFingerprint, r_machineType, r_minCpuPlatform, r_name, r_selfLink, r_status, r_statusMessage, r_zone in
      do {
        var parameters = Compute.InstancesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_sourceInstanceTemplate = p_sourceInstanceTemplate.first {
          parameters.sourceInstanceTemplate = p_sourceInstanceTemplate
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.Instance()
        if let r_cpuPlatform = r_cpuPlatform.first {
          request.cpuPlatform = r_cpuPlatform
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_hostname = r_hostname.first {
          request.hostname = r_hostname
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_labelFingerprint = r_labelFingerprint.first {
          request.labelFingerprint = r_labelFingerprint
        }
        if let r_machineType = r_machineType.first {
          request.machineType = r_machineType
        }
        if let r_minCpuPlatform = r_minCpuPlatform.first {
          request.minCpuPlatform = r_minCpuPlatform
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if let r_statusMessage = r_statusMessage.first {
          request.statusMessage = r_statusMessage
        }
        if let r_zone = r_zone.first {
          request.zone = r_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Retrieves the list of instances contained within the specified zone.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_zone in
      do {
        var parameters = Compute.InstancesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.listReferrers",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<String>("p_instance", default: [], count: 1, description: "Name of the target instance scoping this request, or '-' if the request should span over all instances in the container."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Retrieves the list of referrers to instances contained within the specified zone. For more information, read Viewing Referrers to VM Instances.") {
      p_filter, p_instance, p_maxResults, p_orderBy, p_pageToken, p_project, p_zone in
      do {
        var parameters = Compute.InstancesListReferrersParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_listReferrers(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.reset",
      Options<String>("p_instance", default: [], count: 1, description: "Name of the instance scoping this request."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Performs a reset on the instance. This is a hard reset; the VM does not do a graceful shutdown. For more information, see Resetting an instance.") {
      p_instance, p_project, p_requestId, p_zone in
      do {
        var parameters = Compute.InstancesResetParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_reset(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.setDeletionProtection",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Sets deletion protection on the instance.") {
      p_project, p_requestId, p_resource, p_zone in
      do {
        var parameters = Compute.InstancesSetDeletionProtectionParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_setDeletionProtection(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.setDiskAutoDelete",
      Options<String>("p_deviceName", default: [], count: 1, description: "The device name of the disk to modify. Make a get() request on the instance to view currently attached disks and device names."),
      Options<String>("p_instance", default: [], count: 1, description: "The instance name for this request."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Sets the auto-delete flag for a disk attached to an instance.") {
      p_deviceName, p_instance, p_project, p_requestId, p_zone in
      do {
        var parameters = Compute.InstancesSetDiskAutoDeleteParameters()
        if let p_deviceName = p_deviceName.first {
          parameters.deviceName = p_deviceName
        }
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_setDiskAutoDelete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.setIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_etag", default: [], count: 1, description: "Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag."),
      description: "Sets the access control policy on the specified resource. Replaces any existing policy.") {
      p_project, p_resource, p_zone,r_etag in
      do {
        var parameters = Compute.InstancesSetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.ZoneSetPolicyRequest()
        if let r_etag = r_etag.first {
          request.etag = r_etag
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_setIamPolicy(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.setLabels",
      Options<String>("p_instance", default: [], count: 1, description: "Name of the instance scoping this request."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_labelFingerprint", default: [], count: 1, description: "Fingerprint of the previous set of labels for this resource, used to prevent conflicts. Provide the latest fingerprint value when making a request to add or change labels."),
      description: "Sets labels on an instance. To learn more about labels, read the Labeling Resources documentation.") {
      p_instance, p_project, p_requestId, p_zone,r_labelFingerprint in
      do {
        var parameters = Compute.InstancesSetLabelsParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstancesSetLabelsRequest()
        if let r_labelFingerprint = r_labelFingerprint.first {
          request.labelFingerprint = r_labelFingerprint
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_setLabels(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.setMachineResources",
      Options<String>("p_instance", default: [], count: 1, description: "Name of the instance scoping this request."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Changes the number and/or type of accelerator for a stopped instance to the values specified in the request.") {
      p_instance, p_project, p_requestId, p_zone in
      do {
        var parameters = Compute.InstancesSetMachineResourcesParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstancesSetMachineResourcesRequest()
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_setMachineResources(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.setMachineType",
      Options<String>("p_instance", default: [], count: 1, description: "Name of the instance scoping this request."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_machineType", default: [], count: 1, description: "Full or partial URL of the machine type resource. See Machine Types for a full list of machine types. For example: zones/us-central1-f/machineTypes/n1-standard-1"),
      description: "Changes the machine type for a stopped instance to the machine type specified in the request.") {
      p_instance, p_project, p_requestId, p_zone,r_machineType in
      do {
        var parameters = Compute.InstancesSetMachineTypeParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstancesSetMachineTypeRequest()
        if let r_machineType = r_machineType.first {
          request.machineType = r_machineType
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_setMachineType(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.setMetadata",
      Options<String>("p_instance", default: [], count: 1, description: "Name of the instance scoping this request."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Specifies a fingerprint for this request, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve the resource."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#metadata for metadata."),
      description: "Sets metadata for the specified instance to the data included in the request.") {
      p_instance, p_project, p_requestId, p_zone,r_fingerprint, r_kind in
      do {
        var parameters = Compute.InstancesSetMetadataParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.Metadata()
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_setMetadata(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.setMinCpuPlatform",
      Options<String>("p_instance", default: [], count: 1, description: "Name of the instance scoping this request."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_minCpuPlatform", default: [], count: 1, description: "Minimum cpu/platform this instance should be started at."),
      description: "Changes the minimum CPU platform that this instance should use. This method can only be called on a stopped instance. For more information, read Specifying a Minimum CPU Platform.") {
      p_instance, p_project, p_requestId, p_zone,r_minCpuPlatform in
      do {
        var parameters = Compute.InstancesSetMinCpuPlatformParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstancesSetMinCpuPlatformRequest()
        if let r_minCpuPlatform = r_minCpuPlatform.first {
          request.minCpuPlatform = r_minCpuPlatform
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_setMinCpuPlatform(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.setScheduling",
      Options<String>("p_instance", default: [], count: 1, description: "Instance name for this request."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_onHostMaintenance", default: [], count: 1, description: "Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Setting Instance Scheduling Options."),
      description: "Sets an instance's scheduling options.") {
      p_instance, p_project, p_requestId, p_zone,r_onHostMaintenance in
      do {
        var parameters = Compute.InstancesSetSchedulingParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.Scheduling()
        if let r_onHostMaintenance = r_onHostMaintenance.first {
          request.onHostMaintenance = r_onHostMaintenance
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_setScheduling(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.setServiceAccount",
      Options<String>("p_instance", default: [], count: 1, description: "Name of the instance resource to start."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_email", default: [], count: 1, description: "Email address of the service account."),
      VariadicOption<String>("r_scopes", default: [], description: "The list of scopes to be made available for this service account."),
      description: "Sets the service account on the instance. For more information, read Changing the service account and access scopes for an instance.") {
      p_instance, p_project, p_requestId, p_zone,r_email, r_scopes in
      do {
        var parameters = Compute.InstancesSetServiceAccountParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstancesSetServiceAccountRequest()
        if let r_email = r_email.first {
          request.email = r_email
        }
        if r_scopes.count > 0 {
          request.scopes = r_scopes
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_setServiceAccount(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.setTags",
      Options<String>("p_instance", default: [], count: 1, description: "Name of the instance scoping this request."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Specifies a fingerprint for this request, which is essentially a hash of the tags' contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags.  To see the latest fingerprint, make get() request to the instance."),
      VariadicOption<String>("r_items", default: [], description: "An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035."),
      description: "Sets network tags for the specified instance to the data included in the request.") {
      p_instance, p_project, p_requestId, p_zone,r_fingerprint, r_items in
      do {
        var parameters = Compute.InstancesSetTagsParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.Tags()
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if r_items.count > 0 {
          request.items = r_items
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_setTags(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.simulateMaintenanceEvent",
      Options<String>("p_instance", default: [], count: 1, description: "Name of the instance scoping this request."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Simulates a maintenance event on the instance.") {
      p_instance, p_project, p_zone in
      do {
        var parameters = Compute.InstancesSimulateMaintenanceEventParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_simulateMaintenanceEvent(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.start",
      Options<String>("p_instance", default: [], count: 1, description: "Name of the instance resource to start."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.") {
      p_instance, p_project, p_requestId, p_zone in
      do {
        var parameters = Compute.InstancesStartParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_start(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.startWithEncryptionKey",
      Options<String>("p_instance", default: [], count: 1, description: "Name of the instance resource to start."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.") {
      p_instance, p_project, p_requestId, p_zone in
      do {
        var parameters = Compute.InstancesStartWithEncryptionKeyParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.InstancesStartWithEncryptionKeyRequest()
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_startWithEncryptionKey(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.stop",
      Options<String>("p_instance", default: [], count: 1, description: "Name of the instance resource to stop."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Stops a running instance, shutting it down cleanly, and allows you to restart the instance at a later time. Stopped instances do not incur VM usage charges while they are stopped. However, resources that the VM is using, such as persistent disks and static IP addresses, will continue to be charged until they are deleted. For more information, see Stopping an instance.") {
      p_instance, p_project, p_requestId, p_zone in
      do {
        var parameters = Compute.InstancesStopParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_stop(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.testIamPermissions",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      VariadicOption<String>("r_permissions", default: [], description: "The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed."),
      description: "Returns permissions that a caller has on the specified resource.") {
      p_project, p_resource, p_zone,r_permissions in
      do {
        var parameters = Compute.InstancesTestIamPermissionsParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.TestPermissionsRequest()
        if r_permissions.count > 0 {
          request.permissions = r_permissions
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_testIamPermissions(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.updateAccessConfig",
      Options<String>("p_instance", default: [], count: 1, description: "The instance name for this request."),
      Options<String>("p_networkInterface", default: [], count: 1, description: "The name of the network interface where the access config is attached."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#accessConfig for access configs."),
      Options<String>("r_name", default: [], count: 1, description: "The name of this access configuration. The default and recommended name is External NAT but you can use any arbitrary string you would like. For example, My external IP or Network Access."),
      Options<String>("r_natIP", default: [], count: 1, description: "An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance."),
      Options<String>("r_networkTier", default: [], count: 1, description: "This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD.  If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier.  If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP."),
      Options<String>("r_publicPtrDomainName", default: [], count: 1, description: "The DNS domain name for the public PTR record. This field can only be set when the set_public_ptr field is enabled."),
      Options<String>("r_type", default: [], count: 1, description: "The type of configuration. The default and only option is ONE_TO_ONE_NAT."),
      description: "Updates the specified access config from an instance's network interface with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.") {
      p_instance, p_networkInterface, p_project, p_requestId, p_zone,r_kind, r_name, r_natIP, r_networkTier, r_publicPtrDomainName, r_type in
      do {
        var parameters = Compute.InstancesUpdateAccessConfigParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_networkInterface = p_networkInterface.first {
          parameters.networkInterface = p_networkInterface
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.AccessConfig()
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_natIP = r_natIP.first {
          request.natIP = r_natIP
        }
        if let r_networkTier = r_networkTier.first {
          request.networkTier = r_networkTier
        }
        if let r_publicPtrDomainName = r_publicPtrDomainName.first {
          request.publicPtrDomainName = r_publicPtrDomainName
        }
        if let r_type = r_type.first {
          request.type = r_type
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_updateAccessConfig(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "instances.updateNetworkInterface",
      Options<String>("p_instance", default: [], count: 1, description: "The instance name for this request."),
      Options<String>("p_networkInterface", default: [], count: 1, description: "The name of the network interface to update."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be provided in order to update the NetworkInterface, otherwise the request will fail with error 412 conditionNotMet."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#networkInterface for network interfaces."),
      Options<String>("r_name", default: [], count: 1, description: "[Output Only] The name of the network interface, generated by the server. For network devices, these are eth0, eth1, etc."),
      Options<String>("r_network", default: [], count: 1, description: "URL of the network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used; if the network is not specified but the subnetwork is specified, the network is inferred.  This field is optional when creating a firewall rule. If not specified when creating a firewall rule, the default network global/networks/default is used.  If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs:   - https://www.googleapis.com/compute/v1/projects/project/global/networks/network  - projects/project/global/networks/network  - global/networks/default"),
      Options<String>("r_networkIP", default: [], count: 1, description: "An IPv4 internal network address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system."),
      Options<String>("r_subnetwork", default: [], count: 1, description: "The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not provide this property. If the network is in auto subnet mode, providing the subnetwork is optional. If the network is in custom subnet mode, then this field should be specified. If you specify this property, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs:   - https://www.googleapis.com/compute/v1/projects/project/regions/region/subnetworks/subnetwork  - regions/region/subnetworks/subnetwork"),
      description: "Updates an instance's network interface. This method follows PATCH semantics.") {
      p_instance, p_networkInterface, p_project, p_requestId, p_zone,r_fingerprint, r_kind, r_name, r_network, r_networkIP, r_subnetwork in
      do {
        var parameters = Compute.InstancesUpdateNetworkInterfaceParameters()
        if let p_instance = p_instance.first {
          parameters.instance = p_instance
        }
        if let p_networkInterface = p_networkInterface.first {
          parameters.networkInterface = p_networkInterface
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.NetworkInterface()
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_network = r_network.first {
          request.network = r_network
        }
        if let r_networkIP = r_networkIP.first {
          request.networkIP = r_networkIP
        }
        if let r_subnetwork = r_subnetwork.first {
          request.subnetwork = r_subnetwork
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.instances_updateNetworkInterface(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "interconnectAttachments.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of interconnect attachments.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.InterconnectAttachmentsAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.interconnectAttachments_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "interconnectAttachments.delete",
      Options<String>("p_interconnectAttachment", default: [], count: 1, description: "Name of the interconnect attachment to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified interconnect attachment.") {
      p_interconnectAttachment, p_project, p_region, p_requestId in
      do {
        var parameters = Compute.InterconnectAttachmentsDeleteParameters()
        if let p_interconnectAttachment = p_interconnectAttachment.first {
          parameters.interconnectAttachment = p_interconnectAttachment
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.interconnectAttachments_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "interconnectAttachments.get",
      Options<String>("p_interconnectAttachment", default: [], count: 1, description: "Name of the interconnect attachment to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      description: "Returns the specified interconnect attachment.") {
      p_interconnectAttachment, p_project, p_region in
      do {
        var parameters = Compute.InterconnectAttachmentsGetParameters()
        if let p_interconnectAttachment = p_interconnectAttachment.first {
          parameters.interconnectAttachment = p_interconnectAttachment
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.interconnectAttachments_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "interconnectAttachments.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_bandwidth", default: [], count: 1, description: "Provisioned bandwidth capacity for the interconnectAttachment. Can be set by the partner to update the customer's provisioned bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED."),
      VariadicOption<String>("r_candidateSubnets", default: [], description: "Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate prefix(es). The request will fail if all possible /29s are in use on Google?s edge. If not supplied, Google will randomly select an unused /29 from all of link-local space."),
      Options<String>("r_cloudRouterIpAddress", default: [], count: 1, description: "[Output Only] IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_customerRouterIpAddress", default: [], count: 1, description: "[Output Only] IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource."),
      Options<String>("r_edgeAvailabilityDomain", default: [], count: 1, description: "Desired availability domain for the attachment. Only available for type PARTNER, at creation time. For improved reliability, customers should configure a pair of attachments with one per availability domain. The selected availability domain will be provided to the Partner via the pairing key so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY."),
      Options<String>("r_googleReferenceId", default: [], count: 1, description: "[Output Only] Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_interconnect", default: [], count: 1, description: "URL of the underlying Interconnect object that this attachment's traffic will traverse through."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#interconnectAttachment for interconnect attachments."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_operationalStatus", default: [], count: 1, description: "[Output Only] The current status of whether or not this interconnect attachment is functional."),
      Options<String>("r_pairingKey", default: [], count: 1, description: "[Output only for type PARTNER. Input only for PARTNER_PROVIDER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to initiate provisioning with a selected partner. Of the form 'XXXXX/region/domain'"),
      Options<String>("r_partnerAsn", default: [], count: 1, description: "Optional BGP ASN for the router that should be supplied by a layer 3 Partner if they configured BGP on behalf of the customer. Output only for PARTNER type, input only for PARTNER_PROVIDER, not available for DEDICATED."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the regional interconnect attachment resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      Options<String>("r_router", default: [], count: 1, description: "URL of the Cloud Router to be used for dynamic routing. This router must be in the same region as this InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network & region within which the Cloud Router is configured."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_state", default: [], count: 1, description: "[Output Only] The current state of this attachment's functionality."),
      Options<String>("r_type", default: [], count: 1, description: ""),
      Options<Int>("r_vlanTag8021q", default: [], count: 1, description: "The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. Only specified at creation time."),
      description: "Creates an InterconnectAttachment in the specified project using the data included in the request.") {
      p_project, p_region, p_requestId,r_bandwidth, r_candidateSubnets, r_cloudRouterIpAddress, r_creationTimestamp, r_customerRouterIpAddress, r_description, r_edgeAvailabilityDomain, r_googleReferenceId, r_id, r_interconnect, r_kind, r_name, r_operationalStatus, r_pairingKey, r_partnerAsn, r_region, r_router, r_selfLink, r_state, r_type, r_vlanTag8021q in
      do {
        var parameters = Compute.InterconnectAttachmentsInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.InterconnectAttachment()
        if let r_bandwidth = r_bandwidth.first {
          request.bandwidth = r_bandwidth
        }
        if r_candidateSubnets.count > 0 {
          request.candidateSubnets = r_candidateSubnets
        }
        if let r_cloudRouterIpAddress = r_cloudRouterIpAddress.first {
          request.cloudRouterIpAddress = r_cloudRouterIpAddress
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_customerRouterIpAddress = r_customerRouterIpAddress.first {
          request.customerRouterIpAddress = r_customerRouterIpAddress
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_edgeAvailabilityDomain = r_edgeAvailabilityDomain.first {
          request.edgeAvailabilityDomain = r_edgeAvailabilityDomain
        }
        if let r_googleReferenceId = r_googleReferenceId.first {
          request.googleReferenceId = r_googleReferenceId
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_interconnect = r_interconnect.first {
          request.interconnect = r_interconnect
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_operationalStatus = r_operationalStatus.first {
          request.operationalStatus = r_operationalStatus
        }
        if let r_pairingKey = r_pairingKey.first {
          request.pairingKey = r_pairingKey
        }
        if let r_partnerAsn = r_partnerAsn.first {
          request.partnerAsn = r_partnerAsn
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_router = r_router.first {
          request.router = r_router
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_state = r_state.first {
          request.state = r_state
        }
        if let r_type = r_type.first {
          request.type = r_type
        }
        if let r_vlanTag8021q = r_vlanTag8021q.first {
          request.vlanTag8021q = r_vlanTag8021q
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.interconnectAttachments_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "interconnectAttachments.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      description: "Retrieves the list of interconnect attachments contained within the specified region.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.InterconnectAttachmentsListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.interconnectAttachments_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "interconnectAttachments.patch",
      Options<String>("p_interconnectAttachment", default: [], count: 1, description: "Name of the interconnect attachment to patch."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_bandwidth", default: [], count: 1, description: "Provisioned bandwidth capacity for the interconnectAttachment. Can be set by the partner to update the customer's provisioned bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED."),
      VariadicOption<String>("r_candidateSubnets", default: [], description: "Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate prefix(es). The request will fail if all possible /29s are in use on Google?s edge. If not supplied, Google will randomly select an unused /29 from all of link-local space."),
      Options<String>("r_cloudRouterIpAddress", default: [], count: 1, description: "[Output Only] IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_customerRouterIpAddress", default: [], count: 1, description: "[Output Only] IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource."),
      Options<String>("r_edgeAvailabilityDomain", default: [], count: 1, description: "Desired availability domain for the attachment. Only available for type PARTNER, at creation time. For improved reliability, customers should configure a pair of attachments with one per availability domain. The selected availability domain will be provided to the Partner via the pairing key so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY."),
      Options<String>("r_googleReferenceId", default: [], count: 1, description: "[Output Only] Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_interconnect", default: [], count: 1, description: "URL of the underlying Interconnect object that this attachment's traffic will traverse through."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#interconnectAttachment for interconnect attachments."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_operationalStatus", default: [], count: 1, description: "[Output Only] The current status of whether or not this interconnect attachment is functional."),
      Options<String>("r_pairingKey", default: [], count: 1, description: "[Output only for type PARTNER. Input only for PARTNER_PROVIDER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to initiate provisioning with a selected partner. Of the form 'XXXXX/region/domain'"),
      Options<String>("r_partnerAsn", default: [], count: 1, description: "Optional BGP ASN for the router that should be supplied by a layer 3 Partner if they configured BGP on behalf of the customer. Output only for PARTNER type, input only for PARTNER_PROVIDER, not available for DEDICATED."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the regional interconnect attachment resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      Options<String>("r_router", default: [], count: 1, description: "URL of the Cloud Router to be used for dynamic routing. This router must be in the same region as this InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network & region within which the Cloud Router is configured."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_state", default: [], count: 1, description: "[Output Only] The current state of this attachment's functionality."),
      Options<String>("r_type", default: [], count: 1, description: ""),
      Options<Int>("r_vlanTag8021q", default: [], count: 1, description: "The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. Only specified at creation time."),
      description: "Updates the specified interconnect attachment with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.") {
      p_interconnectAttachment, p_project, p_region, p_requestId,r_bandwidth, r_candidateSubnets, r_cloudRouterIpAddress, r_creationTimestamp, r_customerRouterIpAddress, r_description, r_edgeAvailabilityDomain, r_googleReferenceId, r_id, r_interconnect, r_kind, r_name, r_operationalStatus, r_pairingKey, r_partnerAsn, r_region, r_router, r_selfLink, r_state, r_type, r_vlanTag8021q in
      do {
        var parameters = Compute.InterconnectAttachmentsPatchParameters()
        if let p_interconnectAttachment = p_interconnectAttachment.first {
          parameters.interconnectAttachment = p_interconnectAttachment
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.InterconnectAttachment()
        if let r_bandwidth = r_bandwidth.first {
          request.bandwidth = r_bandwidth
        }
        if r_candidateSubnets.count > 0 {
          request.candidateSubnets = r_candidateSubnets
        }
        if let r_cloudRouterIpAddress = r_cloudRouterIpAddress.first {
          request.cloudRouterIpAddress = r_cloudRouterIpAddress
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_customerRouterIpAddress = r_customerRouterIpAddress.first {
          request.customerRouterIpAddress = r_customerRouterIpAddress
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_edgeAvailabilityDomain = r_edgeAvailabilityDomain.first {
          request.edgeAvailabilityDomain = r_edgeAvailabilityDomain
        }
        if let r_googleReferenceId = r_googleReferenceId.first {
          request.googleReferenceId = r_googleReferenceId
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_interconnect = r_interconnect.first {
          request.interconnect = r_interconnect
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_operationalStatus = r_operationalStatus.first {
          request.operationalStatus = r_operationalStatus
        }
        if let r_pairingKey = r_pairingKey.first {
          request.pairingKey = r_pairingKey
        }
        if let r_partnerAsn = r_partnerAsn.first {
          request.partnerAsn = r_partnerAsn
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_router = r_router.first {
          request.router = r_router
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_state = r_state.first {
          request.state = r_state
        }
        if let r_type = r_type.first {
          request.type = r_type
        }
        if let r_vlanTag8021q = r_vlanTag8021q.first {
          request.vlanTag8021q = r_vlanTag8021q
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.interconnectAttachments_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "interconnectLocations.get",
      Options<String>("p_interconnectLocation", default: [], count: 1, description: "Name of the interconnect location to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Returns the details for the specified interconnect location. Gets a list of available interconnect locations by making a list() request.") {
      p_interconnectLocation, p_project in
      do {
        var parameters = Compute.InterconnectLocationsGetParameters()
        if let p_interconnectLocation = p_interconnectLocation.first {
          parameters.interconnectLocation = p_interconnectLocation
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.interconnectLocations_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "interconnectLocations.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of interconnect locations available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.InterconnectLocationsListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.interconnectLocations_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "interconnects.delete",
      Options<String>("p_interconnect", default: [], count: 1, description: "Name of the interconnect to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified interconnect.") {
      p_interconnect, p_project, p_requestId in
      do {
        var parameters = Compute.InterconnectsDeleteParameters()
        if let p_interconnect = p_interconnect.first {
          parameters.interconnect = p_interconnect
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.interconnects_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "interconnects.get",
      Options<String>("p_interconnect", default: [], count: 1, description: "Name of the interconnect to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Returns the specified interconnect. Get a list of available interconnects by making a list() request.") {
      p_interconnect, p_project in
      do {
        var parameters = Compute.InterconnectsGetParameters()
        if let p_interconnect = p_interconnect.first {
          parameters.interconnect = p_interconnect
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.interconnects_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "interconnects.getDiagnostics",
      Options<String>("p_interconnect", default: [], count: 1, description: "Name of the interconnect resource to query."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Returns the interconnectDiagnostics for the specified interconnect.") {
      p_interconnect, p_project in
      do {
        var parameters = Compute.InterconnectsGetDiagnosticsParameters()
        if let p_interconnect = p_interconnect.first {
          parameters.interconnect = p_interconnect
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.interconnects_getDiagnostics(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "interconnects.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_customerName", default: [], count: 1, description: "Customer name, to put in the Letter of Authorization as the party authorized to request a crossconnect."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_googleIpAddress", default: [], count: 1, description: "[Output Only] IP address configured on the Google side of the Interconnect link. This can be used only for ping tests."),
      Options<String>("r_googleReferenceId", default: [], count: 1, description: "[Output Only] Google reference ID; to be used when raising support tickets with Google or otherwise to debug backend connectivity issues."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      VariadicOption<String>("r_interconnectAttachments", default: [], description: "[Output Only] A list of the URLs of all InterconnectAttachments configured to use this Interconnect."),
      Options<String>("r_interconnectType", default: [], count: 1, description: "Type of interconnect. Note that 'IT_PRIVATE' has been deprecated in favor of 'DEDICATED'"),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#interconnect for interconnects."),
      Options<String>("r_linkType", default: [], count: 1, description: "Type of link requested. This field indicates speed of each of the links in the bundle, not the entire bundle."),
      Options<String>("r_location", default: [], count: 1, description: "URL of the InterconnectLocation object that represents where this connection is to be provisioned."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_nocContactEmail", default: [], count: 1, description: "Email address to contact the customer NOC for operations and maintenance notifications regarding this Interconnect. If specified, this will be used for notifications in addition to all other forms described, such as Stackdriver logs alerting and Cloud Notifications."),
      Options<String>("r_operationalStatus", default: [], count: 1, description: "[Output Only] The current status of whether or not this Interconnect is functional."),
      Options<String>("r_peerIpAddress", default: [], count: 1, description: "[Output Only] IP address configured on the customer side of the Interconnect link. The customer should configure this IP address during turnup when prompted by Google NOC. This can be used only for ping tests."),
      Options<Int>("r_provisionedLinkCount", default: [], count: 1, description: "[Output Only] Number of links actually provisioned in this interconnect."),
      Options<Int>("r_requestedLinkCount", default: [], count: 1, description: "Target number of physical links in the link bundle, as requested by the customer."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_state", default: [], count: 1, description: "[Output Only] The current state of whether or not this Interconnect is functional."),
      description: "Creates a Interconnect in the specified project using the data included in the request.") {
      p_project, p_requestId,r_creationTimestamp, r_customerName, r_description, r_googleIpAddress, r_googleReferenceId, r_id, r_interconnectAttachments, r_interconnectType, r_kind, r_linkType, r_location, r_name, r_nocContactEmail, r_operationalStatus, r_peerIpAddress, r_provisionedLinkCount, r_requestedLinkCount, r_selfLink, r_state in
      do {
        var parameters = Compute.InterconnectsInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Interconnect()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_customerName = r_customerName.first {
          request.customerName = r_customerName
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_googleIpAddress = r_googleIpAddress.first {
          request.googleIpAddress = r_googleIpAddress
        }
        if let r_googleReferenceId = r_googleReferenceId.first {
          request.googleReferenceId = r_googleReferenceId
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if r_interconnectAttachments.count > 0 {
          request.interconnectAttachments = r_interconnectAttachments
        }
        if let r_interconnectType = r_interconnectType.first {
          request.interconnectType = r_interconnectType
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_linkType = r_linkType.first {
          request.linkType = r_linkType
        }
        if let r_location = r_location.first {
          request.location = r_location
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_nocContactEmail = r_nocContactEmail.first {
          request.nocContactEmail = r_nocContactEmail
        }
        if let r_operationalStatus = r_operationalStatus.first {
          request.operationalStatus = r_operationalStatus
        }
        if let r_peerIpAddress = r_peerIpAddress.first {
          request.peerIpAddress = r_peerIpAddress
        }
        if let r_provisionedLinkCount = r_provisionedLinkCount.first {
          request.provisionedLinkCount = r_provisionedLinkCount
        }
        if let r_requestedLinkCount = r_requestedLinkCount.first {
          request.requestedLinkCount = r_requestedLinkCount
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_state = r_state.first {
          request.state = r_state
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.interconnects_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "interconnects.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of interconnect available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.InterconnectsListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.interconnects_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "interconnects.patch",
      Options<String>("p_interconnect", default: [], count: 1, description: "Name of the interconnect to update."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_customerName", default: [], count: 1, description: "Customer name, to put in the Letter of Authorization as the party authorized to request a crossconnect."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_googleIpAddress", default: [], count: 1, description: "[Output Only] IP address configured on the Google side of the Interconnect link. This can be used only for ping tests."),
      Options<String>("r_googleReferenceId", default: [], count: 1, description: "[Output Only] Google reference ID; to be used when raising support tickets with Google or otherwise to debug backend connectivity issues."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      VariadicOption<String>("r_interconnectAttachments", default: [], description: "[Output Only] A list of the URLs of all InterconnectAttachments configured to use this Interconnect."),
      Options<String>("r_interconnectType", default: [], count: 1, description: "Type of interconnect. Note that 'IT_PRIVATE' has been deprecated in favor of 'DEDICATED'"),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#interconnect for interconnects."),
      Options<String>("r_linkType", default: [], count: 1, description: "Type of link requested. This field indicates speed of each of the links in the bundle, not the entire bundle."),
      Options<String>("r_location", default: [], count: 1, description: "URL of the InterconnectLocation object that represents where this connection is to be provisioned."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_nocContactEmail", default: [], count: 1, description: "Email address to contact the customer NOC for operations and maintenance notifications regarding this Interconnect. If specified, this will be used for notifications in addition to all other forms described, such as Stackdriver logs alerting and Cloud Notifications."),
      Options<String>("r_operationalStatus", default: [], count: 1, description: "[Output Only] The current status of whether or not this Interconnect is functional."),
      Options<String>("r_peerIpAddress", default: [], count: 1, description: "[Output Only] IP address configured on the customer side of the Interconnect link. The customer should configure this IP address during turnup when prompted by Google NOC. This can be used only for ping tests."),
      Options<Int>("r_provisionedLinkCount", default: [], count: 1, description: "[Output Only] Number of links actually provisioned in this interconnect."),
      Options<Int>("r_requestedLinkCount", default: [], count: 1, description: "Target number of physical links in the link bundle, as requested by the customer."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_state", default: [], count: 1, description: "[Output Only] The current state of whether or not this Interconnect is functional."),
      description: "Updates the specified interconnect with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.") {
      p_interconnect, p_project, p_requestId,r_creationTimestamp, r_customerName, r_description, r_googleIpAddress, r_googleReferenceId, r_id, r_interconnectAttachments, r_interconnectType, r_kind, r_linkType, r_location, r_name, r_nocContactEmail, r_operationalStatus, r_peerIpAddress, r_provisionedLinkCount, r_requestedLinkCount, r_selfLink, r_state in
      do {
        var parameters = Compute.InterconnectsPatchParameters()
        if let p_interconnect = p_interconnect.first {
          parameters.interconnect = p_interconnect
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Interconnect()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_customerName = r_customerName.first {
          request.customerName = r_customerName
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_googleIpAddress = r_googleIpAddress.first {
          request.googleIpAddress = r_googleIpAddress
        }
        if let r_googleReferenceId = r_googleReferenceId.first {
          request.googleReferenceId = r_googleReferenceId
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if r_interconnectAttachments.count > 0 {
          request.interconnectAttachments = r_interconnectAttachments
        }
        if let r_interconnectType = r_interconnectType.first {
          request.interconnectType = r_interconnectType
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_linkType = r_linkType.first {
          request.linkType = r_linkType
        }
        if let r_location = r_location.first {
          request.location = r_location
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_nocContactEmail = r_nocContactEmail.first {
          request.nocContactEmail = r_nocContactEmail
        }
        if let r_operationalStatus = r_operationalStatus.first {
          request.operationalStatus = r_operationalStatus
        }
        if let r_peerIpAddress = r_peerIpAddress.first {
          request.peerIpAddress = r_peerIpAddress
        }
        if let r_provisionedLinkCount = r_provisionedLinkCount.first {
          request.provisionedLinkCount = r_provisionedLinkCount
        }
        if let r_requestedLinkCount = r_requestedLinkCount.first {
          request.requestedLinkCount = r_requestedLinkCount
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_state = r_state.first {
          request.state = r_state
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.interconnects_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "licenseCodes.get",
      Options<String>("p_licenseCode", default: [], count: 1, description: "Number corresponding to the License code resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Return a specified license code. License codes are mirrored across all projects that have permissions to read the License Code.") {
      p_licenseCode, p_project in
      do {
        var parameters = Compute.LicenseCodesGetParameters()
        if let p_licenseCode = p_licenseCode.first {
          parameters.licenseCode = p_licenseCode
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.licenseCodes_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "licenseCodes.testIamPermissions",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      VariadicOption<String>("r_permissions", default: [], description: "The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed."),
      description: "Returns permissions that a caller has on the specified resource.") {
      p_project, p_resource,r_permissions in
      do {
        var parameters = Compute.LicenseCodesTestIamPermissionsParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        var request = Compute.TestPermissionsRequest()
        if r_permissions.count > 0 {
          request.permissions = r_permissions
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.licenseCodes_testIamPermissions(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "licenses.delete",
      Options<String>("p_license", default: [], count: 1, description: "Name of the license resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified license.") {
      p_license, p_project, p_requestId in
      do {
        var parameters = Compute.LicensesDeleteParameters()
        if let p_license = p_license.first {
          parameters.license = p_license
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.licenses_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "licenses.get",
      Options<String>("p_license", default: [], count: 1, description: "Name of the License resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Returns the specified License resource.") {
      p_license, p_project in
      do {
        var parameters = Compute.LicensesGetParameters()
        if let p_license = p_license.first {
          parameters.license = p_license
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.licenses_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "licenses.getIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      description: "Gets the access control policy for a resource. May be empty if no such policy or resource exists.") {
      p_project, p_resource in
      do {
        var parameters = Compute.LicensesGetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.licenses_getIamPolicy(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "licenses.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional textual description of the resource; provided by the client when the resource is created."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of resource. Always compute#license for licenses."),
      Options<String>("r_licenseCode", default: [], count: 1, description: "[Output Only] The unique code used to attach this license to images, snapshots, and disks."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. The name must be 1-63 characters long and comply with RFC1035."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      description: "Create a License resource in the specified project.") {
      p_project, p_requestId,r_creationTimestamp, r_description, r_id, r_kind, r_licenseCode, r_name, r_selfLink in
      do {
        var parameters = Compute.LicensesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.License()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_licenseCode = r_licenseCode.first {
          request.licenseCode = r_licenseCode
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.licenses_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "licenses.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of licenses available in the specified project. This method does not get any licenses that belong to other projects, including licenses attached to publicly-available images, like Debian 9. If you want to get a list of publicly-available licenses, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.LicensesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.licenses_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "licenses.setIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("r_etag", default: [], count: 1, description: "Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag."),
      description: "Sets the access control policy on the specified resource. Replaces any existing policy.") {
      p_project, p_resource,r_etag in
      do {
        var parameters = Compute.LicensesSetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        var request = Compute.GlobalSetPolicyRequest()
        if let r_etag = r_etag.first {
          request.etag = r_etag
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.licenses_setIamPolicy(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "licenses.testIamPermissions",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      VariadicOption<String>("r_permissions", default: [], description: "The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed."),
      description: "Returns permissions that a caller has on the specified resource.") {
      p_project, p_resource,r_permissions in
      do {
        var parameters = Compute.LicensesTestIamPermissionsParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        var request = Compute.TestPermissionsRequest()
        if r_permissions.count > 0 {
          request.permissions = r_permissions
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.licenses_testIamPermissions(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "machineTypes.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of machine types.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.MachineTypesAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.machineTypes_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "machineTypes.get",
      Options<String>("p_machineType", default: [], count: 1, description: "Name of the machine type to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Returns the specified machine type. Gets a list of available machine types by making a list() request.") {
      p_machineType, p_project, p_zone in
      do {
        var parameters = Compute.MachineTypesGetParameters()
        if let p_machineType = p_machineType.first {
          parameters.machineType = p_machineType
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.machineTypes_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "machineTypes.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Retrieves a list of machine types available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_zone in
      do {
        var parameters = Compute.MachineTypesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.machineTypes_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "networks.addPeering",
      Options<String>("p_network", default: [], count: 1, description: "Name of the network resource to add peering to."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the peering, which should conform to RFC1035."),
      Options<String>("r_peerNetwork", default: [], count: 1, description: "URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network."),
      description: "Adds a peering to the specified network.") {
      p_network, p_project, p_requestId,r_name, r_peerNetwork in
      do {
        var parameters = Compute.NetworksAddPeeringParameters()
        if let p_network = p_network.first {
          parameters.network = p_network
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.NetworksAddPeeringRequest()
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_peerNetwork = r_peerNetwork.first {
          request.peerNetwork = r_peerNetwork
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.networks_addPeering(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "networks.delete",
      Options<String>("p_network", default: [], count: 1, description: "Name of the network to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified network.") {
      p_network, p_project, p_requestId in
      do {
        var parameters = Compute.NetworksDeleteParameters()
        if let p_network = p_network.first {
          parameters.network = p_network
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.networks_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "networks.get",
      Options<String>("p_network", default: [], count: 1, description: "Name of the network to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Returns the specified network. Gets a list of available networks by making a list() request.") {
      p_network, p_project in
      do {
        var parameters = Compute.NetworksGetParameters()
        if let p_network = p_network.first {
          parameters.network = p_network
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.networks_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "networks.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_IPv4Range", default: [], count: 1, description: "The range of internal addresses that are legal on this network. This range is a CIDR specification, for example: 192.168.0.0/16. Provided by the client when the network is created."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_gatewayIPv4", default: [], count: 1, description: "[Output Only] The gateway address for default routing out of the network. This value is read only and is selected by GCP."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#network for networks."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      VariadicOption<String>("r_subnetworks", default: [], description: "[Output Only] Server-defined fully-qualified URLs for all subnetworks in this VPC network."),
      description: "Creates a network in the specified project using the data included in the request.") {
      p_project, p_requestId,r_IPv4Range, r_creationTimestamp, r_description, r_gatewayIPv4, r_id, r_kind, r_name, r_selfLink, r_subnetworks in
      do {
        var parameters = Compute.NetworksInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Network()
        if let r_IPv4Range = r_IPv4Range.first {
          request.IPv4Range = r_IPv4Range
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_gatewayIPv4 = r_gatewayIPv4.first {
          request.gatewayIPv4 = r_gatewayIPv4
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if r_subnetworks.count > 0 {
          request.subnetworks = r_subnetworks
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.networks_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "networks.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of networks available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.NetworksListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.networks_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "networks.patch",
      Options<String>("p_network", default: [], count: 1, description: "Name of the network to update."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_IPv4Range", default: [], count: 1, description: "The range of internal addresses that are legal on this network. This range is a CIDR specification, for example: 192.168.0.0/16. Provided by the client when the network is created."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_gatewayIPv4", default: [], count: 1, description: "[Output Only] The gateway address for default routing out of the network. This value is read only and is selected by GCP."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#network for networks."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      VariadicOption<String>("r_subnetworks", default: [], description: "[Output Only] Server-defined fully-qualified URLs for all subnetworks in this VPC network."),
      description: "Patches the specified network with the data included in the request. Only the following fields can be modified: routingConfig.routingMode.") {
      p_network, p_project, p_requestId,r_IPv4Range, r_creationTimestamp, r_description, r_gatewayIPv4, r_id, r_kind, r_name, r_selfLink, r_subnetworks in
      do {
        var parameters = Compute.NetworksPatchParameters()
        if let p_network = p_network.first {
          parameters.network = p_network
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Network()
        if let r_IPv4Range = r_IPv4Range.first {
          request.IPv4Range = r_IPv4Range
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_gatewayIPv4 = r_gatewayIPv4.first {
          request.gatewayIPv4 = r_gatewayIPv4
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if r_subnetworks.count > 0 {
          request.subnetworks = r_subnetworks
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.networks_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "networks.removePeering",
      Options<String>("p_network", default: [], count: 1, description: "Name of the network resource to remove peering from."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the peering, which should conform to RFC1035."),
      description: "Removes a peering from the specified network.") {
      p_network, p_project, p_requestId,r_name in
      do {
        var parameters = Compute.NetworksRemovePeeringParameters()
        if let p_network = p_network.first {
          parameters.network = p_network
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.NetworksRemovePeeringRequest()
        if let r_name = r_name.first {
          request.name = r_name
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.networks_removePeering(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "networks.switchToCustomMode",
      Options<String>("p_network", default: [], count: 1, description: "Name of the network to be updated."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Switches the network mode from auto subnet mode to custom subnet mode.") {
      p_network, p_project, p_requestId in
      do {
        var parameters = Compute.NetworksSwitchToCustomModeParameters()
        if let p_network = p_network.first {
          parameters.network = p_network
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.networks_switchToCustomMode(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeGroups.addNodes",
      Options<String>("p_nodeGroup", default: [], count: 1, description: "Name of the NodeGroup resource."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<Int>("r_additionalNodeCount", default: [], count: 1, description: "Count of additional nodes to be added to the node group."),
      description: "Adds specified number of nodes to the node group.") {
      p_nodeGroup, p_project, p_requestId, p_zone,r_additionalNodeCount in
      do {
        var parameters = Compute.NodeGroupsAddNodesParameters()
        if let p_nodeGroup = p_nodeGroup.first {
          parameters.nodeGroup = p_nodeGroup
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.NodeGroupsAddNodesRequest()
        if let r_additionalNodeCount = r_additionalNodeCount.first {
          request.additionalNodeCount = r_additionalNodeCount
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeGroups_addNodes(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeGroups.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of node groups. Note: use nodeGroups.listNodes for more details about each group.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.NodeGroupsAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeGroups_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeGroups.delete",
      Options<String>("p_nodeGroup", default: [], count: 1, description: "Name of the NodeGroup resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Deletes the specified NodeGroup resource.") {
      p_nodeGroup, p_project, p_requestId, p_zone in
      do {
        var parameters = Compute.NodeGroupsDeleteParameters()
        if let p_nodeGroup = p_nodeGroup.first {
          parameters.nodeGroup = p_nodeGroup
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeGroups_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeGroups.deleteNodes",
      Options<String>("p_nodeGroup", default: [], count: 1, description: "Name of the NodeGroup resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      VariadicOption<String>("r_nodes", default: [], description: ""),
      description: "Deletes specified nodes from the node group.") {
      p_nodeGroup, p_project, p_requestId, p_zone,r_nodes in
      do {
        var parameters = Compute.NodeGroupsDeleteNodesParameters()
        if let p_nodeGroup = p_nodeGroup.first {
          parameters.nodeGroup = p_nodeGroup
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.NodeGroupsDeleteNodesRequest()
        if r_nodes.count > 0 {
          request.nodes = r_nodes
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeGroups_deleteNodes(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeGroups.get",
      Options<String>("p_nodeGroup", default: [], count: 1, description: "Name of the node group to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Returns the specified NodeGroup. Get a list of available NodeGroups by making a list() request. Note: the 'nodes' field should not be used. Use nodeGroups.listNodes instead.") {
      p_nodeGroup, p_project, p_zone in
      do {
        var parameters = Compute.NodeGroupsGetParameters()
        if let p_nodeGroup = p_nodeGroup.first {
          parameters.nodeGroup = p_nodeGroup
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeGroups_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeGroups.getIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Gets the access control policy for a resource. May be empty if no such policy or resource exists.") {
      p_project, p_resource, p_zone in
      do {
        var parameters = Compute.NodeGroupsGetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeGroups_getIamPolicy(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeGroups.insert",
      Options<Int>("p_initialNodeCount", default: [], count: 1, description: "Initial count of nodes in the node group."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] The type of the resource. Always compute#nodeGroup for node group."),
      Options<String>("r_name", default: [], count: 1, description: "The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_nodeTemplate", default: [], count: 1, description: "The URL of the node template to which this node group belongs."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<Int>("r_size", default: [], count: 1, description: "[Output Only] The total number of nodes in the node group."),
      Options<String>("r_status", default: [], count: 1, description: ""),
      Options<String>("r_zone", default: [], count: 1, description: "[Output Only] The name of the zone where the node group resides, such as us-central1-a."),
      description: "Creates a NodeGroup resource in the specified project using the data included in the request.") {
      p_initialNodeCount, p_project, p_requestId, p_zone,r_creationTimestamp, r_description, r_id, r_kind, r_name, r_nodeTemplate, r_selfLink, r_size, r_status, r_zone in
      do {
        var parameters = Compute.NodeGroupsInsertParameters()
        if let p_initialNodeCount = p_initialNodeCount.first {
          parameters.initialNodeCount = p_initialNodeCount
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.NodeGroup()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_nodeTemplate = r_nodeTemplate.first {
          request.nodeTemplate = r_nodeTemplate
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_size = r_size.first {
          request.size = r_size
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if let r_zone = r_zone.first {
          request.zone = r_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeGroups_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeGroups.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Retrieves a list of node groups available to the specified project. Note: use nodeGroups.listNodes for more details about each group.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_zone in
      do {
        var parameters = Compute.NodeGroupsListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeGroups_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeGroups.listNodes",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_nodeGroup", default: [], count: 1, description: "Name of the NodeGroup resource whose nodes you want to list."),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Lists nodes in the node group.") {
      p_filter, p_maxResults, p_nodeGroup, p_orderBy, p_pageToken, p_project, p_zone in
      do {
        var parameters = Compute.NodeGroupsListNodesParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_nodeGroup = p_nodeGroup.first {
          parameters.nodeGroup = p_nodeGroup
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeGroups_listNodes(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeGroups.setIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_etag", default: [], count: 1, description: "Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag."),
      description: "Sets the access control policy on the specified resource. Replaces any existing policy.") {
      p_project, p_resource, p_zone,r_etag in
      do {
        var parameters = Compute.NodeGroupsSetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.ZoneSetPolicyRequest()
        if let r_etag = r_etag.first {
          request.etag = r_etag
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeGroups_setIamPolicy(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeGroups.setNodeTemplate",
      Options<String>("p_nodeGroup", default: [], count: 1, description: "Name of the NodeGroup resource to update."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      Options<String>("r_nodeTemplate", default: [], count: 1, description: "Full or partial URL of the node template resource to be updated for this node group."),
      description: "Updates the node template of the node group.") {
      p_nodeGroup, p_project, p_requestId, p_zone,r_nodeTemplate in
      do {
        var parameters = Compute.NodeGroupsSetNodeTemplateParameters()
        if let p_nodeGroup = p_nodeGroup.first {
          parameters.nodeGroup = p_nodeGroup
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.NodeGroupsSetNodeTemplateRequest()
        if let r_nodeTemplate = r_nodeTemplate.first {
          request.nodeTemplate = r_nodeTemplate
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeGroups_setNodeTemplate(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeGroups.testIamPermissions",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      VariadicOption<String>("r_permissions", default: [], description: "The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed."),
      description: "Returns permissions that a caller has on the specified resource.") {
      p_project, p_resource, p_zone,r_permissions in
      do {
        var parameters = Compute.NodeGroupsTestIamPermissionsParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.TestPermissionsRequest()
        if r_permissions.count > 0 {
          request.permissions = r_permissions
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeGroups_testIamPermissions(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeTemplates.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of node templates.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.NodeTemplatesAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeTemplates_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeTemplates.delete",
      Options<String>("p_nodeTemplate", default: [], count: 1, description: "Name of the NodeTemplate resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "The name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified NodeTemplate resource.") {
      p_nodeTemplate, p_project, p_region, p_requestId in
      do {
        var parameters = Compute.NodeTemplatesDeleteParameters()
        if let p_nodeTemplate = p_nodeTemplate.first {
          parameters.nodeTemplate = p_nodeTemplate
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeTemplates_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeTemplates.get",
      Options<String>("p_nodeTemplate", default: [], count: 1, description: "Name of the node template to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "The name of the region for this request."),
      description: "Returns the specified node template. Gets a list of available node templates by making a list() request.") {
      p_nodeTemplate, p_project, p_region in
      do {
        var parameters = Compute.NodeTemplatesGetParameters()
        if let p_nodeTemplate = p_nodeTemplate.first {
          parameters.nodeTemplate = p_nodeTemplate
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeTemplates_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeTemplates.getIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "The name of the region for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      description: "Gets the access control policy for a resource. May be empty if no such policy or resource exists.") {
      p_project, p_region, p_resource in
      do {
        var parameters = Compute.NodeTemplatesGetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeTemplates_getIamPolicy(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeTemplates.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "The name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] The type of the resource. Always compute#nodeTemplate for node templates."),
      Options<String>("r_name", default: [], count: 1, description: "The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_nodeType", default: [], count: 1, description: "The node type to use for nodes group that are created from this template."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] The name of the region where the node template resides, such as us-central1."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] The status of the node template. One of the following values: CREATING, READY, and DELETING."),
      Options<String>("r_statusMessage", default: [], count: 1, description: "[Output Only] An optional, human-readable explanation of the status."),
      description: "Creates a NodeTemplate resource in the specified project using the data included in the request.") {
      p_project, p_region, p_requestId,r_creationTimestamp, r_description, r_id, r_kind, r_name, r_nodeType, r_region, r_selfLink, r_status, r_statusMessage in
      do {
        var parameters = Compute.NodeTemplatesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.NodeTemplate()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_nodeType = r_nodeType.first {
          request.nodeType = r_nodeType
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if let r_statusMessage = r_statusMessage.first {
          request.statusMessage = r_statusMessage
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeTemplates_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeTemplates.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "The name of the region for this request."),
      description: "Retrieves a list of node templates available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.NodeTemplatesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeTemplates_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeTemplates.setIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "The name of the region for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("r_etag", default: [], count: 1, description: "Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag."),
      description: "Sets the access control policy on the specified resource. Replaces any existing policy.") {
      p_project, p_region, p_resource,r_etag in
      do {
        var parameters = Compute.NodeTemplatesSetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        var request = Compute.RegionSetPolicyRequest()
        if let r_etag = r_etag.first {
          request.etag = r_etag
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeTemplates_setIamPolicy(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeTemplates.testIamPermissions",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "The name of the region for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      VariadicOption<String>("r_permissions", default: [], description: "The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed."),
      description: "Returns permissions that a caller has on the specified resource.") {
      p_project, p_region, p_resource,r_permissions in
      do {
        var parameters = Compute.NodeTemplatesTestIamPermissionsParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        var request = Compute.TestPermissionsRequest()
        if r_permissions.count > 0 {
          request.permissions = r_permissions
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeTemplates_testIamPermissions(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeTypes.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of node types.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.NodeTypesAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeTypes_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeTypes.get",
      Options<String>("p_nodeType", default: [], count: 1, description: "Name of the node type to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Returns the specified node type. Gets a list of available node types by making a list() request.") {
      p_nodeType, p_project, p_zone in
      do {
        var parameters = Compute.NodeTypesGetParameters()
        if let p_nodeType = p_nodeType.first {
          parameters.nodeType = p_nodeType
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeTypes_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "nodeTypes.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "The name of the zone for this request."),
      description: "Retrieves a list of node types available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_zone in
      do {
        var parameters = Compute.NodeTypesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.nodeTypes_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "projects.disableXpnHost",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Disable this project as a shared VPC host project.") {
      p_project, p_requestId in
      do {
        var parameters = Compute.ProjectsDisableXpnHostParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.projects_disableXpnHost(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "projects.disableXpnResource",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Disable a serivce resource (a.k.a service project) associated with this host project.") {
      p_project, p_requestId in
      do {
        var parameters = Compute.ProjectsDisableXpnResourceParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.ProjectsDisableXpnResourceRequest()
        let sem = DispatchSemaphore(value: 0)
        try compute.projects_disableXpnResource(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "projects.enableXpnHost",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Enable this project as a shared VPC host project.") {
      p_project, p_requestId in
      do {
        var parameters = Compute.ProjectsEnableXpnHostParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.projects_enableXpnHost(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "projects.enableXpnResource",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Enable service resource (a.k.a service project) for a host project, so that subnets in the host project can be used by instances in the service project.") {
      p_project, p_requestId in
      do {
        var parameters = Compute.ProjectsEnableXpnResourceParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.ProjectsEnableXpnResourceRequest()
        let sem = DispatchSemaphore(value: 0)
        try compute.projects_enableXpnResource(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "projects.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Returns the specified Project resource.") {
      p_project in
      do {
        var parameters = Compute.ProjectsGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.projects_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "projects.getXpnHost",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Gets the shared VPC host project that this project links to. May be empty if no link exists.") {
      p_project in
      do {
        var parameters = Compute.ProjectsGetXpnHostParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.projects_getXpnHost(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "projects.getXpnResources",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_order_by", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Gets service resources (a.k.a service project) associated with this host project.") {
      p_filter, p_maxResults, p_order_by, p_pageToken, p_project in
      do {
        var parameters = Compute.ProjectsGetXpnResourcesParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_order_by = p_order_by.first {
          parameters.order_by = p_order_by
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.projects_getXpnResources(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "projects.listXpnHosts",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_order_by", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("r_organization", default: [], count: 1, description: "Optional organization ID managed by Cloud Resource Manager, for which to list shared VPC host projects. If not specified, the organization will be inferred from the project."),
      description: "Lists all shared VPC host projects visible to the user in an organization.") {
      p_filter, p_maxResults, p_order_by, p_pageToken, p_project,r_organization in
      do {
        var parameters = Compute.ProjectsListXpnHostsParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_order_by = p_order_by.first {
          parameters.order_by = p_order_by
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        var request = Compute.ProjectsListXpnHostsRequest()
        if let r_organization = r_organization.first {
          request.organization = r_organization
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.projects_listXpnHosts(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "projects.moveDisk",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_destinationZone", default: [], count: 1, description: "The URL of the destination zone to move the disk. This can be a full or partial URL. For example, the following are all valid URLs to a zone:   - https://www.googleapis.com/compute/v1/projects/project/zones/zone  - projects/project/zones/zone  - zones/zone"),
      Options<String>("r_targetDisk", default: [], count: 1, description: "The URL of the target disk to move. This can be a full or partial URL. For example, the following are all valid URLs to a disk:   - https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk  - projects/project/zones/zone/disks/disk  - zones/zone/disks/disk"),
      description: "Moves a persistent disk from one zone to another.") {
      p_project, p_requestId,r_destinationZone, r_targetDisk in
      do {
        var parameters = Compute.ProjectsMoveDiskParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.DiskMoveRequest()
        if let r_destinationZone = r_destinationZone.first {
          request.destinationZone = r_destinationZone
        }
        if let r_targetDisk = r_targetDisk.first {
          request.targetDisk = r_targetDisk
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.projects_moveDisk(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "projects.moveInstance",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_destinationZone", default: [], count: 1, description: "The URL of the destination zone to move the instance. This can be a full or partial URL. For example, the following are all valid URLs to a zone:   - https://www.googleapis.com/compute/v1/projects/project/zones/zone  - projects/project/zones/zone  - zones/zone"),
      Options<String>("r_targetInstance", default: [], count: 1, description: "The URL of the target instance to move. This can be a full or partial URL. For example, the following are all valid URLs to an instance:   - https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance  - projects/project/zones/zone/instances/instance  - zones/zone/instances/instance"),
      description: "Moves an instance and its attached persistent disks from one zone to another.") {
      p_project, p_requestId,r_destinationZone, r_targetInstance in
      do {
        var parameters = Compute.ProjectsMoveInstanceParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.InstanceMoveRequest()
        if let r_destinationZone = r_destinationZone.first {
          request.destinationZone = r_destinationZone
        }
        if let r_targetInstance = r_targetInstance.first {
          request.targetInstance = r_targetInstance
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.projects_moveInstance(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "projects.setCommonInstanceMetadata",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Specifies a fingerprint for this request, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve the resource."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#metadata for metadata."),
      description: "Sets metadata common to all instances within the specified project using the data included in the request.") {
      p_project, p_requestId,r_fingerprint, r_kind in
      do {
        var parameters = Compute.ProjectsSetCommonInstanceMetadataParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Metadata()
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.projects_setCommonInstanceMetadata(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "projects.setDefaultNetworkTier",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_networkTier", default: [], count: 1, description: "Default network tier to be set."),
      description: "Sets the default network tier of the project. The default network tier is used when an address/forwardingRule/instance is created without specifying the network tier field.") {
      p_project, p_requestId,r_networkTier in
      do {
        var parameters = Compute.ProjectsSetDefaultNetworkTierParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.ProjectsSetDefaultNetworkTierRequest()
        if let r_networkTier = r_networkTier.first {
          request.networkTier = r_networkTier
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.projects_setDefaultNetworkTier(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "projects.setUsageExportBucket",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_bucketName", default: [], count: 1, description: "The name of an existing bucket in Cloud Storage where the usage report object is stored. The Google Service Account is granted write access to this bucket. This can either be the bucket name by itself, such as example-bucket, or the bucket name with gs:// or https://storage.googleapis.com/ in front of it, such as gs://example-bucket."),
      Options<String>("r_reportNamePrefix", default: [], count: 1, description: "An optional prefix for the name of the usage report object stored in bucketName. If not supplied, defaults to usage. The report is stored as a CSV file named report_name_prefix_gce_YYYYMMDD.csv where YYYYMMDD is the day of the usage according to Pacific Time. If you supply a prefix, it should conform to Cloud Storage object naming conventions."),
      description: "Enables the usage export feature and sets the usage export bucket where reports are stored. If you provide an empty request body using this method, the usage export feature will be disabled.") {
      p_project, p_requestId,r_bucketName, r_reportNamePrefix in
      do {
        var parameters = Compute.ProjectsSetUsageExportBucketParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.UsageExportLocation()
        if let r_bucketName = r_bucketName.first {
          request.bucketName = r_bucketName
        }
        if let r_reportNamePrefix = r_reportNamePrefix.first {
          request.reportNamePrefix = r_reportNamePrefix
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.projects_setUsageExportBucket(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionAutoscalers.delete",
      Options<String>("p_autoscaler", default: [], count: 1, description: "Name of the autoscaler to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified autoscaler.") {
      p_autoscaler, p_project, p_region, p_requestId in
      do {
        var parameters = Compute.RegionAutoscalersDeleteParameters()
        if let p_autoscaler = p_autoscaler.first {
          parameters.autoscaler = p_autoscaler
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionAutoscalers_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionAutoscalers.get",
      Options<String>("p_autoscaler", default: [], count: 1, description: "Name of the autoscaler to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      description: "Returns the specified autoscaler.") {
      p_autoscaler, p_project, p_region in
      do {
        var parameters = Compute.RegionAutoscalersGetParameters()
        if let p_autoscaler = p_autoscaler.first {
          parameters.autoscaler = p_autoscaler
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionAutoscalers_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionAutoscalers.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#autoscaler for autoscalers."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the instance group resides (for autoscalers living in regional scope)."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] The status of the autoscaler configuration."),
      Options<String>("r_target", default: [], count: 1, description: "URL of the managed instance group that this autoscaler will scale."),
      Options<String>("r_zone", default: [], count: 1, description: "[Output Only] URL of the zone where the instance group resides (for autoscalers living in zonal scope)."),
      description: "Creates an autoscaler in the specified project using the data included in the request.") {
      p_project, p_region, p_requestId,r_creationTimestamp, r_description, r_id, r_kind, r_name, r_region, r_selfLink, r_status, r_target, r_zone in
      do {
        var parameters = Compute.RegionAutoscalersInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Autoscaler()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if let r_target = r_target.first {
          request.target = r_target
        }
        if let r_zone = r_zone.first {
          request.zone = r_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionAutoscalers_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionAutoscalers.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      description: "Retrieves a list of autoscalers contained within the specified region.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.RegionAutoscalersListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionAutoscalers_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionAutoscalers.patch",
      Options<String>("p_autoscaler", default: [], count: 1, description: "Name of the autoscaler to patch."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#autoscaler for autoscalers."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the instance group resides (for autoscalers living in regional scope)."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] The status of the autoscaler configuration."),
      Options<String>("r_target", default: [], count: 1, description: "URL of the managed instance group that this autoscaler will scale."),
      Options<String>("r_zone", default: [], count: 1, description: "[Output Only] URL of the zone where the instance group resides (for autoscalers living in zonal scope)."),
      description: "Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.") {
      p_autoscaler, p_project, p_region, p_requestId,r_creationTimestamp, r_description, r_id, r_kind, r_name, r_region, r_selfLink, r_status, r_target, r_zone in
      do {
        var parameters = Compute.RegionAutoscalersPatchParameters()
        if let p_autoscaler = p_autoscaler.first {
          parameters.autoscaler = p_autoscaler
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Autoscaler()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if let r_target = r_target.first {
          request.target = r_target
        }
        if let r_zone = r_zone.first {
          request.zone = r_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionAutoscalers_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionAutoscalers.update",
      Options<String>("p_autoscaler", default: [], count: 1, description: "Name of the autoscaler to update."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#autoscaler for autoscalers."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the instance group resides (for autoscalers living in regional scope)."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] The status of the autoscaler configuration."),
      Options<String>("r_target", default: [], count: 1, description: "URL of the managed instance group that this autoscaler will scale."),
      Options<String>("r_zone", default: [], count: 1, description: "[Output Only] URL of the zone where the instance group resides (for autoscalers living in zonal scope)."),
      description: "Updates an autoscaler in the specified project using the data included in the request.") {
      p_autoscaler, p_project, p_region, p_requestId,r_creationTimestamp, r_description, r_id, r_kind, r_name, r_region, r_selfLink, r_status, r_target, r_zone in
      do {
        var parameters = Compute.RegionAutoscalersUpdateParameters()
        if let p_autoscaler = p_autoscaler.first {
          parameters.autoscaler = p_autoscaler
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Autoscaler()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if let r_target = r_target.first {
          request.target = r_target
        }
        if let r_zone = r_zone.first {
          request.zone = r_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionAutoscalers_update(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionBackendServices.delete",
      Options<String>("p_backendService", default: [], count: 1, description: "Name of the BackendService resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified regional BackendService resource.") {
      p_backendService, p_project, p_region, p_requestId in
      do {
        var parameters = Compute.RegionBackendServicesDeleteParameters()
        if let p_backendService = p_backendService.first {
          parameters.backendService = p_backendService
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionBackendServices_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionBackendServices.get",
      Options<String>("p_backendService", default: [], count: 1, description: "Name of the BackendService resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      description: "Returns the specified regional BackendService resource.") {
      p_backendService, p_project, p_region in
      do {
        var parameters = Compute.RegionBackendServicesGetParameters()
        if let p_backendService = p_backendService.first {
          parameters.backendService = p_backendService
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionBackendServices_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionBackendServices.getHealth",
      Options<String>("p_backendService", default: [], count: 1, description: "Name of the BackendService resource for which to get health."),
      Options<String>("p_project", default: [], count: 1, description: ""),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("r_group", default: [], count: 1, description: "A URI referencing one of the instance groups or network endpoint groups listed in the backend service."),
      description: "Gets the most recent health check results for this regional BackendService.") {
      p_backendService, p_project, p_region,r_group in
      do {
        var parameters = Compute.RegionBackendServicesGetHealthParameters()
        if let p_backendService = p_backendService.first {
          parameters.backendService = p_backendService
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        var request = Compute.ResourceGroupReference()
        if let r_group = r_group.first {
          request.group = r_group
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionBackendServices_getHealth(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionBackendServices.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<Int>("r_affinityCookieTtlSec", default: [], count: 1, description: "Lifetime of cookies in seconds if session_affinity is GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value for TTL is one day.  When the load balancing scheme is INTERNAL, this field is not used."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a BackendService."),
      VariadicOption<String>("r_healthChecks", default: [], description: "The list of URLs to the HttpHealthCheck or HttpsHealthCheck resource for health checking this BackendService. Currently at most one health check can be specified, and a health check is required for Compute Engine backend services. A health check must not be specified for App Engine backend and Cloud Function backend.  For internal load balancing, a URL to a HealthCheck resource must be specified instead."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of resource. Always compute#backendService for backend services."),
      Options<String>("r_loadBalancingScheme", default: [], count: 1, description: "Indicates whether the backend service will be used with internal or external load balancing. A backend service created for one type of load balancing cannot be used with the other. Possible values are INTERNAL and EXTERNAL."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<Int>("r_port", default: [], count: 1, description: "Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80.  This cannot be used for internal load balancing."),
      Options<String>("r_portName", default: [], count: 1, description: "Name of backend port. The same name should appear in the instance groups referenced by this service. Required when the load balancing scheme is EXTERNAL.  When the load balancing scheme is INTERNAL, this field is not used."),
      Options<String>("r_protocol", default: [], count: 1, description: "The protocol this BackendService uses to communicate with backends.  Possible values are HTTP, HTTPS, TCP, and SSL. The default is HTTP.  For internal load balancing, the possible values are TCP and UDP, and the default is TCP."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      Options<String>("r_securityPolicy", default: [], count: 1, description: "[Output Only] The resource URL for the security policy associated with this backend service."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_sessionAffinity", default: [], count: 1, description: "Type of session affinity to use. The default is NONE.  When the load balancing scheme is EXTERNAL, can be NONE, CLIENT_IP, or GENERATED_COOKIE.  When the load balancing scheme is INTERNAL, can be NONE, CLIENT_IP, CLIENT_IP_PROTO, or CLIENT_IP_PORT_PROTO.  When the protocol is UDP, this field is not used."),
      Options<Int>("r_timeoutSec", default: [], count: 1, description: "How many seconds to wait for the backend before considering it a failed request. Default is 30 seconds."),
      description: "Creates a regional BackendService resource in the specified project using the data included in the request. There are several restrictions and guidelines to keep in mind when creating a regional backend service. Read  Restrictions and Guidelines for more information.") {
      p_project, p_region, p_requestId,r_affinityCookieTtlSec, r_creationTimestamp, r_description, r_fingerprint, r_healthChecks, r_id, r_kind, r_loadBalancingScheme, r_name, r_port, r_portName, r_protocol, r_region, r_securityPolicy, r_selfLink, r_sessionAffinity, r_timeoutSec in
      do {
        var parameters = Compute.RegionBackendServicesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.BackendService()
        if let r_affinityCookieTtlSec = r_affinityCookieTtlSec.first {
          request.affinityCookieTtlSec = r_affinityCookieTtlSec
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if r_healthChecks.count > 0 {
          request.healthChecks = r_healthChecks
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_loadBalancingScheme = r_loadBalancingScheme.first {
          request.loadBalancingScheme = r_loadBalancingScheme
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_port = r_port.first {
          request.port = r_port
        }
        if let r_portName = r_portName.first {
          request.portName = r_portName
        }
        if let r_protocol = r_protocol.first {
          request.protocol = r_protocol
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_securityPolicy = r_securityPolicy.first {
          request.securityPolicy = r_securityPolicy
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_sessionAffinity = r_sessionAffinity.first {
          request.sessionAffinity = r_sessionAffinity
        }
        if let r_timeoutSec = r_timeoutSec.first {
          request.timeoutSec = r_timeoutSec
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionBackendServices_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionBackendServices.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      description: "Retrieves the list of regional BackendService resources available to the specified project in the given region.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.RegionBackendServicesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionBackendServices_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionBackendServices.patch",
      Options<String>("p_backendService", default: [], count: 1, description: "Name of the BackendService resource to patch."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<Int>("r_affinityCookieTtlSec", default: [], count: 1, description: "Lifetime of cookies in seconds if session_affinity is GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value for TTL is one day.  When the load balancing scheme is INTERNAL, this field is not used."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a BackendService."),
      VariadicOption<String>("r_healthChecks", default: [], description: "The list of URLs to the HttpHealthCheck or HttpsHealthCheck resource for health checking this BackendService. Currently at most one health check can be specified, and a health check is required for Compute Engine backend services. A health check must not be specified for App Engine backend and Cloud Function backend.  For internal load balancing, a URL to a HealthCheck resource must be specified instead."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of resource. Always compute#backendService for backend services."),
      Options<String>("r_loadBalancingScheme", default: [], count: 1, description: "Indicates whether the backend service will be used with internal or external load balancing. A backend service created for one type of load balancing cannot be used with the other. Possible values are INTERNAL and EXTERNAL."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<Int>("r_port", default: [], count: 1, description: "Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80.  This cannot be used for internal load balancing."),
      Options<String>("r_portName", default: [], count: 1, description: "Name of backend port. The same name should appear in the instance groups referenced by this service. Required when the load balancing scheme is EXTERNAL.  When the load balancing scheme is INTERNAL, this field is not used."),
      Options<String>("r_protocol", default: [], count: 1, description: "The protocol this BackendService uses to communicate with backends.  Possible values are HTTP, HTTPS, TCP, and SSL. The default is HTTP.  For internal load balancing, the possible values are TCP and UDP, and the default is TCP."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      Options<String>("r_securityPolicy", default: [], count: 1, description: "[Output Only] The resource URL for the security policy associated with this backend service."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_sessionAffinity", default: [], count: 1, description: "Type of session affinity to use. The default is NONE.  When the load balancing scheme is EXTERNAL, can be NONE, CLIENT_IP, or GENERATED_COOKIE.  When the load balancing scheme is INTERNAL, can be NONE, CLIENT_IP, CLIENT_IP_PROTO, or CLIENT_IP_PORT_PROTO.  When the protocol is UDP, this field is not used."),
      Options<Int>("r_timeoutSec", default: [], count: 1, description: "How many seconds to wait for the backend before considering it a failed request. Default is 30 seconds."),
      description: "Updates the specified regional BackendService resource with the data included in the request. There are several restrictions and guidelines to keep in mind when updating a backend service. Read  Restrictions and Guidelines for more information. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.") {
      p_backendService, p_project, p_region, p_requestId,r_affinityCookieTtlSec, r_creationTimestamp, r_description, r_fingerprint, r_healthChecks, r_id, r_kind, r_loadBalancingScheme, r_name, r_port, r_portName, r_protocol, r_region, r_securityPolicy, r_selfLink, r_sessionAffinity, r_timeoutSec in
      do {
        var parameters = Compute.RegionBackendServicesPatchParameters()
        if let p_backendService = p_backendService.first {
          parameters.backendService = p_backendService
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.BackendService()
        if let r_affinityCookieTtlSec = r_affinityCookieTtlSec.first {
          request.affinityCookieTtlSec = r_affinityCookieTtlSec
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if r_healthChecks.count > 0 {
          request.healthChecks = r_healthChecks
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_loadBalancingScheme = r_loadBalancingScheme.first {
          request.loadBalancingScheme = r_loadBalancingScheme
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_port = r_port.first {
          request.port = r_port
        }
        if let r_portName = r_portName.first {
          request.portName = r_portName
        }
        if let r_protocol = r_protocol.first {
          request.protocol = r_protocol
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_securityPolicy = r_securityPolicy.first {
          request.securityPolicy = r_securityPolicy
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_sessionAffinity = r_sessionAffinity.first {
          request.sessionAffinity = r_sessionAffinity
        }
        if let r_timeoutSec = r_timeoutSec.first {
          request.timeoutSec = r_timeoutSec
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionBackendServices_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionBackendServices.update",
      Options<String>("p_backendService", default: [], count: 1, description: "Name of the BackendService resource to update."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<Int>("r_affinityCookieTtlSec", default: [], count: 1, description: "Lifetime of cookies in seconds if session_affinity is GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value for TTL is one day.  When the load balancing scheme is INTERNAL, this field is not used."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a BackendService."),
      VariadicOption<String>("r_healthChecks", default: [], description: "The list of URLs to the HttpHealthCheck or HttpsHealthCheck resource for health checking this BackendService. Currently at most one health check can be specified, and a health check is required for Compute Engine backend services. A health check must not be specified for App Engine backend and Cloud Function backend.  For internal load balancing, a URL to a HealthCheck resource must be specified instead."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of resource. Always compute#backendService for backend services."),
      Options<String>("r_loadBalancingScheme", default: [], count: 1, description: "Indicates whether the backend service will be used with internal or external load balancing. A backend service created for one type of load balancing cannot be used with the other. Possible values are INTERNAL and EXTERNAL."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<Int>("r_port", default: [], count: 1, description: "Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80.  This cannot be used for internal load balancing."),
      Options<String>("r_portName", default: [], count: 1, description: "Name of backend port. The same name should appear in the instance groups referenced by this service. Required when the load balancing scheme is EXTERNAL.  When the load balancing scheme is INTERNAL, this field is not used."),
      Options<String>("r_protocol", default: [], count: 1, description: "The protocol this BackendService uses to communicate with backends.  Possible values are HTTP, HTTPS, TCP, and SSL. The default is HTTP.  For internal load balancing, the possible values are TCP and UDP, and the default is TCP."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      Options<String>("r_securityPolicy", default: [], count: 1, description: "[Output Only] The resource URL for the security policy associated with this backend service."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_sessionAffinity", default: [], count: 1, description: "Type of session affinity to use. The default is NONE.  When the load balancing scheme is EXTERNAL, can be NONE, CLIENT_IP, or GENERATED_COOKIE.  When the load balancing scheme is INTERNAL, can be NONE, CLIENT_IP, CLIENT_IP_PROTO, or CLIENT_IP_PORT_PROTO.  When the protocol is UDP, this field is not used."),
      Options<Int>("r_timeoutSec", default: [], count: 1, description: "How many seconds to wait for the backend before considering it a failed request. Default is 30 seconds."),
      description: "Updates the specified regional BackendService resource with the data included in the request. There are several restrictions and guidelines to keep in mind when updating a backend service. Read  Restrictions and Guidelines for more information.") {
      p_backendService, p_project, p_region, p_requestId,r_affinityCookieTtlSec, r_creationTimestamp, r_description, r_fingerprint, r_healthChecks, r_id, r_kind, r_loadBalancingScheme, r_name, r_port, r_portName, r_protocol, r_region, r_securityPolicy, r_selfLink, r_sessionAffinity, r_timeoutSec in
      do {
        var parameters = Compute.RegionBackendServicesUpdateParameters()
        if let p_backendService = p_backendService.first {
          parameters.backendService = p_backendService
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.BackendService()
        if let r_affinityCookieTtlSec = r_affinityCookieTtlSec.first {
          request.affinityCookieTtlSec = r_affinityCookieTtlSec
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if r_healthChecks.count > 0 {
          request.healthChecks = r_healthChecks
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_loadBalancingScheme = r_loadBalancingScheme.first {
          request.loadBalancingScheme = r_loadBalancingScheme
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_port = r_port.first {
          request.port = r_port
        }
        if let r_portName = r_portName.first {
          request.portName = r_portName
        }
        if let r_protocol = r_protocol.first {
          request.protocol = r_protocol
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_securityPolicy = r_securityPolicy.first {
          request.securityPolicy = r_securityPolicy
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_sessionAffinity = r_sessionAffinity.first {
          request.sessionAffinity = r_sessionAffinity
        }
        if let r_timeoutSec = r_timeoutSec.first {
          request.timeoutSec = r_timeoutSec
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionBackendServices_update(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionCommitments.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of commitments.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.RegionCommitmentsAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionCommitments_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionCommitments.get",
      Options<String>("p_commitment", default: [], count: 1, description: "Name of the commitment to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      description: "Returns the specified commitment resource. Gets a list of available commitments by making a list() request.") {
      p_commitment, p_project, p_region in
      do {
        var parameters = Compute.RegionCommitmentsGetParameters()
        if let p_commitment = p_commitment.first {
          parameters.commitment = p_commitment
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionCommitments_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionCommitments.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_endTimestamp", default: [], count: 1, description: "[Output Only] Commitment end time in RFC3339 text format."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#commitment for commitments."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_plan", default: [], count: 1, description: "The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years)."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where this commitment may be used."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_startTimestamp", default: [], count: 1, description: "[Output Only] Commitment start time in RFC3339 text format."),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] Status of the commitment with regards to eventual expiration (each commitment has an end date defined). One of the following values: NOT_YET_ACTIVE, ACTIVE, EXPIRED."),
      Options<String>("r_statusMessage", default: [], count: 1, description: "[Output Only] An optional, human-readable explanation of the status."),
      description: "Creates a commitment in the specified project using the data included in the request.") {
      p_project, p_region, p_requestId,r_creationTimestamp, r_description, r_endTimestamp, r_id, r_kind, r_name, r_plan, r_region, r_selfLink, r_startTimestamp, r_status, r_statusMessage in
      do {
        var parameters = Compute.RegionCommitmentsInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Commitment()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_endTimestamp = r_endTimestamp.first {
          request.endTimestamp = r_endTimestamp
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_plan = r_plan.first {
          request.plan = r_plan
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_startTimestamp = r_startTimestamp.first {
          request.startTimestamp = r_startTimestamp
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if let r_statusMessage = r_statusMessage.first {
          request.statusMessage = r_statusMessage
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionCommitments_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionCommitments.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      description: "Retrieves a list of commitments contained within the specified region.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.RegionCommitmentsListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionCommitments_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionDiskTypes.get",
      Options<String>("p_diskType", default: [], count: 1, description: "Name of the disk type to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "The name of the region for this request."),
      description: "Returns the specified regional disk type. Gets a list of available disk types by making a list() request.") {
      p_diskType, p_project, p_region in
      do {
        var parameters = Compute.RegionDiskTypesGetParameters()
        if let p_diskType = p_diskType.first {
          parameters.diskType = p_diskType
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionDiskTypes_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionDiskTypes.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "The name of the region for this request."),
      description: "Retrieves a list of regional disk types available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.RegionDiskTypesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionDiskTypes_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionDisks.createSnapshot",
      Options<String>("p_disk", default: [], count: 1, description: "Name of the regional persistent disk to snapshot."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_diskSizeGb", default: [], count: 1, description: "[Output Only] Size of the snapshot, specified in GB."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#snapshot for Snapshot resources."),
      Options<String>("r_labelFingerprint", default: [], count: 1, description: "A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a snapshot."),
      VariadicOption<String>("r_licenseCodes", default: [], description: "[Output Only] Integer license codes indicating which licenses are attached to this snapshot."),
      VariadicOption<String>("r_licenses", default: [], description: "[Output Only] A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image)."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_sourceDisk", default: [], count: 1, description: "[Output Only] The source disk used to create this snapshot."),
      Options<String>("r_sourceDiskId", default: [], count: 1, description: "[Output Only] The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given disk name."),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING."),
      Options<String>("r_storageBytes", default: [], count: 1, description: "[Output Only] A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion."),
      Options<String>("r_storageBytesStatus", default: [], count: 1, description: "[Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date."),
      description: "Creates a snapshot of this regional disk.") {
      p_disk, p_project, p_region, p_requestId,r_creationTimestamp, r_description, r_diskSizeGb, r_id, r_kind, r_labelFingerprint, r_licenseCodes, r_licenses, r_name, r_selfLink, r_sourceDisk, r_sourceDiskId, r_status, r_storageBytes, r_storageBytesStatus in
      do {
        var parameters = Compute.RegionDisksCreateSnapshotParameters()
        if let p_disk = p_disk.first {
          parameters.disk = p_disk
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Snapshot()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_diskSizeGb = r_diskSizeGb.first {
          request.diskSizeGb = r_diskSizeGb
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_labelFingerprint = r_labelFingerprint.first {
          request.labelFingerprint = r_labelFingerprint
        }
        if r_licenseCodes.count > 0 {
          request.licenseCodes = r_licenseCodes
        }
        if r_licenses.count > 0 {
          request.licenses = r_licenses
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_sourceDisk = r_sourceDisk.first {
          request.sourceDisk = r_sourceDisk
        }
        if let r_sourceDiskId = r_sourceDiskId.first {
          request.sourceDiskId = r_sourceDiskId
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if let r_storageBytes = r_storageBytes.first {
          request.storageBytes = r_storageBytes
        }
        if let r_storageBytesStatus = r_storageBytesStatus.first {
          request.storageBytesStatus = r_storageBytesStatus
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionDisks_createSnapshot(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionDisks.delete",
      Options<String>("p_disk", default: [], count: 1, description: "Name of the regional persistent disk to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified regional persistent disk. Deleting a regional disk removes all the replicas of its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.") {
      p_disk, p_project, p_region, p_requestId in
      do {
        var parameters = Compute.RegionDisksDeleteParameters()
        if let p_disk = p_disk.first {
          parameters.disk = p_disk
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionDisks_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionDisks.get",
      Options<String>("p_disk", default: [], count: 1, description: "Name of the regional persistent disk to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      description: "Returns a specified regional persistent disk.") {
      p_disk, p_project, p_region in
      do {
        var parameters = Compute.RegionDisksGetParameters()
        if let p_disk = p_disk.first {
          parameters.disk = p_disk
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionDisks_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionDisks.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_sourceImage", default: [], count: 1, description: "Optional. Source image to restore onto a disk."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#disk for disks."),
      Options<String>("r_labelFingerprint", default: [], count: 1, description: "A fingerprint for the labels being applied to this disk, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a disk."),
      Options<String>("r_lastAttachTimestamp", default: [], count: 1, description: "[Output Only] Last attach timestamp in RFC3339 text format."),
      Options<String>("r_lastDetachTimestamp", default: [], count: 1, description: "[Output Only] Last detach timestamp in RFC3339 text format."),
      VariadicOption<String>("r_licenseCodes", default: [], description: "Integer license codes indicating which licenses are attached to this disk."),
      VariadicOption<String>("r_licenses", default: [], description: "A list of publicly visible licenses. Reserved for Google's use."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_options", default: [], count: 1, description: "Internal use only."),
      Options<String>("r_physicalBlockSizeBytes", default: [], count: 1, description: "Physical block size of the persistent disk, in bytes. If not present in a request, a default value is used. Currently supported sizes are 4096 and 16384, other sizes may be added in the future. If an unsupported value is requested, the error message will list the supported values for the caller's project."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the disk resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      VariadicOption<String>("r_replicaZones", default: [], description: "URLs of the zones where the disk should be replicated to. Only applicable for regional resources."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined fully-qualified URL for this resource."),
      Options<String>("r_sizeGb", default: [], count: 1, description: "Size of the persistent disk, specified in GB. You can specify this field when creating a persistent disk using the sourceImage or sourceSnapshot parameter, or specify it alone to create an empty persistent disk.  If you specify this field along with sourceImage or sourceSnapshot, the value of sizeGb must not be less than the size of the sourceImage or the size of the snapshot. Acceptable values are 1 to 65536, inclusive."),
      Options<String>("r_sourceImage", default: [], count: 1, description: "The source image used to create this disk. If the source image is deleted, this field will not be set.  To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9   Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD   To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image   You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family"),
      Options<String>("r_sourceImageId", default: [], count: 1, description: "[Output Only] The ID value of the image used to create this disk. This value identifies the exact image that was used to create this persistent disk. For example, if you created the persistent disk from an image that was later deleted and recreated under the same name, the source image ID would identify the exact version of the image that was used."),
      Options<String>("r_sourceSnapshot", default: [], count: 1, description: "The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values:   - https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot  - projects/project/global/snapshots/snapshot  - global/snapshots/snapshot"),
      Options<String>("r_sourceSnapshotId", default: [], count: 1, description: "[Output Only] The unique ID of the snapshot used to create this disk. This value identifies the exact snapshot that was used to create this persistent disk. For example, if you created the persistent disk from a snapshot that was later deleted and recreated under the same name, the source snapshot ID would identify the exact version of the snapshot that was used."),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] The status of disk creation."),
      Options<String>("r_type", default: [], count: 1, description: "URL of the disk type resource describing which disk type to use to create the disk. Provide this when creating the disk. For example: project/zones/zone/diskTypes/pd-standard or pd-ssd"),
      VariadicOption<String>("r_users", default: [], description: "[Output Only] Links to the users of the disk (attached instances) in form: project/zones/zone/instances/instance"),
      Options<String>("r_zone", default: [], count: 1, description: "[Output Only] URL of the zone where the disk resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      description: "Creates a persistent regional disk in the specified project using the data included in the request.") {
      p_project, p_region, p_requestId, p_sourceImage,r_creationTimestamp, r_description, r_id, r_kind, r_labelFingerprint, r_lastAttachTimestamp, r_lastDetachTimestamp, r_licenseCodes, r_licenses, r_name, r_options, r_physicalBlockSizeBytes, r_region, r_replicaZones, r_selfLink, r_sizeGb, r_sourceImage, r_sourceImageId, r_sourceSnapshot, r_sourceSnapshotId, r_status, r_type, r_users, r_zone in
      do {
        var parameters = Compute.RegionDisksInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_sourceImage = p_sourceImage.first {
          parameters.sourceImage = p_sourceImage
        }
        var request = Compute.Disk()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_labelFingerprint = r_labelFingerprint.first {
          request.labelFingerprint = r_labelFingerprint
        }
        if let r_lastAttachTimestamp = r_lastAttachTimestamp.first {
          request.lastAttachTimestamp = r_lastAttachTimestamp
        }
        if let r_lastDetachTimestamp = r_lastDetachTimestamp.first {
          request.lastDetachTimestamp = r_lastDetachTimestamp
        }
        if r_licenseCodes.count > 0 {
          request.licenseCodes = r_licenseCodes
        }
        if r_licenses.count > 0 {
          request.licenses = r_licenses
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_options = r_options.first {
          request.options = r_options
        }
        if let r_physicalBlockSizeBytes = r_physicalBlockSizeBytes.first {
          request.physicalBlockSizeBytes = r_physicalBlockSizeBytes
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if r_replicaZones.count > 0 {
          request.replicaZones = r_replicaZones
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_sizeGb = r_sizeGb.first {
          request.sizeGb = r_sizeGb
        }
        if let r_sourceImage = r_sourceImage.first {
          request.sourceImage = r_sourceImage
        }
        if let r_sourceImageId = r_sourceImageId.first {
          request.sourceImageId = r_sourceImageId
        }
        if let r_sourceSnapshot = r_sourceSnapshot.first {
          request.sourceSnapshot = r_sourceSnapshot
        }
        if let r_sourceSnapshotId = r_sourceSnapshotId.first {
          request.sourceSnapshotId = r_sourceSnapshotId
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if let r_type = r_type.first {
          request.type = r_type
        }
        if r_users.count > 0 {
          request.users = r_users
        }
        if let r_zone = r_zone.first {
          request.zone = r_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionDisks_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionDisks.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      description: "Retrieves the list of persistent disks contained within the specified region.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.RegionDisksListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionDisks_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionDisks.resize",
      Options<String>("p_disk", default: [], count: 1, description: "Name of the regional persistent disk."),
      Options<String>("p_project", default: [], count: 1, description: "The project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_sizeGb", default: [], count: 1, description: "The new size of the regional persistent disk, which is specified in GB."),
      description: "Resizes the specified regional persistent disk.") {
      p_disk, p_project, p_region, p_requestId,r_sizeGb in
      do {
        var parameters = Compute.RegionDisksResizeParameters()
        if let p_disk = p_disk.first {
          parameters.disk = p_disk
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.RegionDisksResizeRequest()
        if let r_sizeGb = r_sizeGb.first {
          request.sizeGb = r_sizeGb
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionDisks_resize(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionDisks.setLabels",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "The region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("r_labelFingerprint", default: [], count: 1, description: "The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest fingerprint."),
      description: "Sets the labels on the target regional disk.") {
      p_project, p_region, p_requestId, p_resource,r_labelFingerprint in
      do {
        var parameters = Compute.RegionDisksSetLabelsParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        var request = Compute.RegionSetLabelsRequest()
        if let r_labelFingerprint = r_labelFingerprint.first {
          request.labelFingerprint = r_labelFingerprint
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionDisks_setLabels(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionDisks.testIamPermissions",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "The name of the region for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      VariadicOption<String>("r_permissions", default: [], description: "The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed."),
      description: "Returns permissions that a caller has on the specified resource.") {
      p_project, p_region, p_resource,r_permissions in
      do {
        var parameters = Compute.RegionDisksTestIamPermissionsParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        var request = Compute.TestPermissionsRequest()
        if r_permissions.count > 0 {
          request.permissions = r_permissions
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionDisks_testIamPermissions(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionInstanceGroupManagers.abandonInstances",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "Name of the managed instance group."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      VariadicOption<String>("r_instances", default: [], description: "The URLs of one or more instances to abandon. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]."),
      description: "Flags the specified instances to be immediately removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.  You can specify a maximum of 1000 instances with this method per request.") {
      p_instanceGroupManager, p_project, p_region, p_requestId,r_instances in
      do {
        var parameters = Compute.RegionInstanceGroupManagersAbandonInstancesParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.RegionInstanceGroupManagersAbandonInstancesRequest()
        if r_instances.count > 0 {
          request.instances = r_instances
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionInstanceGroupManagers_abandonInstances(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionInstanceGroupManagers.delete",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "Name of the managed instance group to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      description: "Deletes the specified managed instance group and all of the instances in that group.") {
      p_instanceGroupManager, p_project, p_region, p_requestId in
      do {
        var parameters = Compute.RegionInstanceGroupManagersDeleteParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionInstanceGroupManagers_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionInstanceGroupManagers.deleteInstances",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "Name of the managed instance group."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      VariadicOption<String>("r_instances", default: [], description: "The URLs of one or more instances to delete. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]."),
      description: "Flags the specified instances in the managed instance group to be immediately deleted. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. The deleteInstances operation is marked DONE if the deleteInstances request is successful. The underlying actions take additional time. You must separately verify the status of the deleting action with the listmanagedinstances method.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.  You can specify a maximum of 1000 instances with this method per request.") {
      p_instanceGroupManager, p_project, p_region, p_requestId,r_instances in
      do {
        var parameters = Compute.RegionInstanceGroupManagersDeleteInstancesParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.RegionInstanceGroupManagersDeleteInstancesRequest()
        if r_instances.count > 0 {
          request.instances = r_instances
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionInstanceGroupManagers_deleteInstances(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionInstanceGroupManagers.get",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "Name of the managed instance group to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      description: "Returns all of the details about the specified managed instance group.") {
      p_instanceGroupManager, p_project, p_region in
      do {
        var parameters = Compute.RegionInstanceGroupManagersGetParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionInstanceGroupManagers_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionInstanceGroupManagers.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_baseInstanceName", default: [], count: 1, description: "The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] The creation timestamp for this managed instance group in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of this resource. This field may be used in optimistic locking. It will be ignored when inserting an InstanceGroupManager. An up-to-date fingerprint must be provided in order to update the InstanceGroupManager, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve an InstanceGroupManager."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] A unique identifier for this resource type. The server generates this identifier."),
      Options<String>("r_instanceGroup", default: [], count: 1, description: "[Output Only] The URL of the Instance Group resource."),
      Options<String>("r_instanceTemplate", default: [], count: 1, description: "The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] The resource type, which is always compute#instanceGroupManager for managed instance groups."),
      Options<String>("r_name", default: [], count: 1, description: "The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] The URL of the region where the managed instance group resides (for regional resources)."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] The URL for this managed instance group. The server defines this URL."),
      VariadicOption<String>("r_targetPools", default: [], description: "The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group."),
      Options<Int>("r_targetSize", default: [], count: 1, description: "The target number of running instances for this managed instance group. Deleting or abandoning instances reduces this number. Resizing the group changes this number."),
      Options<String>("r_zone", default: [], count: 1, description: "[Output Only] The URL of the zone where the managed instance group is located (for zonal resources)."),
      description: "Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method.  A regional managed instance group can contain up to 2000 instances.") {
      p_project, p_region, p_requestId,r_baseInstanceName, r_creationTimestamp, r_description, r_fingerprint, r_id, r_instanceGroup, r_instanceTemplate, r_kind, r_name, r_region, r_selfLink, r_targetPools, r_targetSize, r_zone in
      do {
        var parameters = Compute.RegionInstanceGroupManagersInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.InstanceGroupManager()
        if let r_baseInstanceName = r_baseInstanceName.first {
          request.baseInstanceName = r_baseInstanceName
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_instanceGroup = r_instanceGroup.first {
          request.instanceGroup = r_instanceGroup
        }
        if let r_instanceTemplate = r_instanceTemplate.first {
          request.instanceTemplate = r_instanceTemplate
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if r_targetPools.count > 0 {
          request.targetPools = r_targetPools
        }
        if let r_targetSize = r_targetSize.first {
          request.targetSize = r_targetSize
        }
        if let r_zone = r_zone.first {
          request.zone = r_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionInstanceGroupManagers_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionInstanceGroupManagers.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      description: "Retrieves the list of managed instance groups that are contained within the specified region.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.RegionInstanceGroupManagersListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionInstanceGroupManagers_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionInstanceGroupManagers.listManagedInstances",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "The name of the managed instance group."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_order_by", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      description: "Lists the instances in the managed instance group and instances that are scheduled to be created. The list includes any current actions that the group has scheduled for its instances.") {
      p_filter, p_instanceGroupManager, p_maxResults, p_order_by, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.RegionInstanceGroupManagersListManagedInstancesParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_order_by = p_order_by.first {
          parameters.order_by = p_order_by
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionInstanceGroupManagers_listManagedInstances(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionInstanceGroupManagers.patch",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "The name of the instance group manager."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_baseInstanceName", default: [], count: 1, description: "The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] The creation timestamp for this managed instance group in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of this resource. This field may be used in optimistic locking. It will be ignored when inserting an InstanceGroupManager. An up-to-date fingerprint must be provided in order to update the InstanceGroupManager, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve an InstanceGroupManager."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] A unique identifier for this resource type. The server generates this identifier."),
      Options<String>("r_instanceGroup", default: [], count: 1, description: "[Output Only] The URL of the Instance Group resource."),
      Options<String>("r_instanceTemplate", default: [], count: 1, description: "The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] The resource type, which is always compute#instanceGroupManager for managed instance groups."),
      Options<String>("r_name", default: [], count: 1, description: "The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] The URL of the region where the managed instance group resides (for regional resources)."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] The URL for this managed instance group. The server defines this URL."),
      VariadicOption<String>("r_targetPools", default: [], description: "The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group."),
      Options<Int>("r_targetSize", default: [], count: 1, description: "The target number of running instances for this managed instance group. Deleting or abandoning instances reduces this number. Resizing the group changes this number."),
      Options<String>("r_zone", default: [], count: 1, description: "[Output Only] The URL of the zone where the managed instance group is located (for zonal resources)."),
      description: "Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listmanagedinstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.") {
      p_instanceGroupManager, p_project, p_region, p_requestId,r_baseInstanceName, r_creationTimestamp, r_description, r_fingerprint, r_id, r_instanceGroup, r_instanceTemplate, r_kind, r_name, r_region, r_selfLink, r_targetPools, r_targetSize, r_zone in
      do {
        var parameters = Compute.RegionInstanceGroupManagersPatchParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.InstanceGroupManager()
        if let r_baseInstanceName = r_baseInstanceName.first {
          request.baseInstanceName = r_baseInstanceName
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_instanceGroup = r_instanceGroup.first {
          request.instanceGroup = r_instanceGroup
        }
        if let r_instanceTemplate = r_instanceTemplate.first {
          request.instanceTemplate = r_instanceTemplate
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if r_targetPools.count > 0 {
          request.targetPools = r_targetPools
        }
        if let r_targetSize = r_targetSize.first {
          request.targetSize = r_targetSize
        }
        if let r_zone = r_zone.first {
          request.zone = r_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionInstanceGroupManagers_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionInstanceGroupManagers.recreateInstances",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "Name of the managed instance group."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      VariadicOption<String>("r_instances", default: [], description: "The URLs of one or more instances to recreate. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]."),
      description: "Flags the specified instances in the managed instance group to be immediately recreated. The instances are deleted and recreated using the current instance template for the managed instance group. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of the recreating action with the listmanagedinstances method.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.  You can specify a maximum of 1000 instances with this method per request.") {
      p_instanceGroupManager, p_project, p_region, p_requestId,r_instances in
      do {
        var parameters = Compute.RegionInstanceGroupManagersRecreateInstancesParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.RegionInstanceGroupManagersRecreateRequest()
        if r_instances.count > 0 {
          request.instances = r_instances
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionInstanceGroupManagers_recreateInstances(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionInstanceGroupManagers.resize",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "Name of the managed instance group."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<Int>("p_size", default: [], count: 1, description: "Number of instances that should exist in this instance group manager."),
      description: "Changes the intended size of the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes one or more instances.  The resize operation is marked DONE if the resize request is successful. The underlying actions take additional time. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.") {
      p_instanceGroupManager, p_project, p_region, p_requestId, p_size in
      do {
        var parameters = Compute.RegionInstanceGroupManagersResizeParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_size = p_size.first {
          parameters.size = p_size
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionInstanceGroupManagers_resize(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionInstanceGroupManagers.setInstanceTemplate",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "The name of the managed instance group."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_instanceTemplate", default: [], count: 1, description: "URL of the InstanceTemplate resource from which all new instances will be created."),
      description: "Sets the instance template to use when creating new instances or recreating instances in this group. Existing instances are not affected.") {
      p_instanceGroupManager, p_project, p_region, p_requestId,r_instanceTemplate in
      do {
        var parameters = Compute.RegionInstanceGroupManagersSetInstanceTemplateParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.RegionInstanceGroupManagersSetTemplateRequest()
        if let r_instanceTemplate = r_instanceTemplate.first {
          request.instanceTemplate = r_instanceTemplate
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionInstanceGroupManagers_setInstanceTemplate(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionInstanceGroupManagers.setTargetPools",
      Options<String>("p_instanceGroupManager", default: [], count: 1, description: "Name of the managed instance group."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of the target pools information, which is a hash of the contents. This field is used for optimistic locking when you update the target pool entries. This field is optional."),
      VariadicOption<String>("r_targetPools", default: [], description: "The URL of all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group."),
      description: "Modifies the target pools to which all new instances in this group are assigned. Existing instances in the group are not affected.") {
      p_instanceGroupManager, p_project, p_region, p_requestId,r_fingerprint, r_targetPools in
      do {
        var parameters = Compute.RegionInstanceGroupManagersSetTargetPoolsParameters()
        if let p_instanceGroupManager = p_instanceGroupManager.first {
          parameters.instanceGroupManager = p_instanceGroupManager
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.RegionInstanceGroupManagersSetTargetPoolsRequest()
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if r_targetPools.count > 0 {
          request.targetPools = r_targetPools
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionInstanceGroupManagers_setTargetPools(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionInstanceGroups.get",
      Options<String>("p_instanceGroup", default: [], count: 1, description: "Name of the instance group resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      description: "Returns the specified instance group resource.") {
      p_instanceGroup, p_project, p_region in
      do {
        var parameters = Compute.RegionInstanceGroupsGetParameters()
        if let p_instanceGroup = p_instanceGroup.first {
          parameters.instanceGroup = p_instanceGroup
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionInstanceGroups_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionInstanceGroups.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      description: "Retrieves the list of instance group resources contained within the specified region.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.RegionInstanceGroupsListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionInstanceGroups_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionInstanceGroups.listInstances",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<String>("p_instanceGroup", default: [], count: 1, description: "Name of the regional instance group for which we want to list the instances."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("r_instanceState", default: [], count: 1, description: "Instances in which state should be returned. Valid options are: 'ALL', 'RUNNING'. By default, it lists all instances."),
      Options<String>("r_portName", default: [], count: 1, description: "Name of port user is interested in. It is optional. If it is set, only information about this ports will be returned. If it is not set, all the named ports will be returned. Always lists all instances."),
      description: "Lists the instances in the specified instance group and displays information about the named ports. Depending on the specified options, this method can list all instances or only the instances that are running.") {
      p_filter, p_instanceGroup, p_maxResults, p_orderBy, p_pageToken, p_project, p_region,r_instanceState, r_portName in
      do {
        var parameters = Compute.RegionInstanceGroupsListInstancesParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_instanceGroup = p_instanceGroup.first {
          parameters.instanceGroup = p_instanceGroup
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        var request = Compute.RegionInstanceGroupsListInstancesRequest()
        if let r_instanceState = r_instanceState.first {
          request.instanceState = r_instanceState
        }
        if let r_portName = r_portName.first {
          request.portName = r_portName
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionInstanceGroups_listInstances(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionInstanceGroups.setNamedPorts",
      Options<String>("p_instanceGroup", default: [], count: 1, description: "The name of the regional instance group where the named ports are updated."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request."),
      description: "Sets the named ports for the specified regional instance group.") {
      p_instanceGroup, p_project, p_region, p_requestId,r_fingerprint in
      do {
        var parameters = Compute.RegionInstanceGroupsSetNamedPortsParameters()
        if let p_instanceGroup = p_instanceGroup.first {
          parameters.instanceGroup = p_instanceGroup
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.RegionInstanceGroupsSetNamedPortsRequest()
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionInstanceGroups_setNamedPorts(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionOperations.delete",
      Options<String>("p_operation", default: [], count: 1, description: "Name of the Operations resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      description: "Deletes the specified region-specific Operations resource.") {
      p_operation, p_project, p_region in
      do {
        var parameters = Compute.RegionOperationsDeleteParameters()
        if let p_operation = p_operation.first {
          parameters.operation = p_operation
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionOperations_delete(parameters:parameters) {
          error in
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionOperations.get",
      Options<String>("p_operation", default: [], count: 1, description: "Name of the Operations resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      description: "Retrieves the specified region-specific Operations resource.") {
      p_operation, p_project, p_region in
      do {
        var parameters = Compute.RegionOperationsGetParameters()
        if let p_operation = p_operation.first {
          parameters.operation = p_operation
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionOperations_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regionOperations.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      description: "Retrieves a list of Operation resources contained within the specified region.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.RegionOperationsListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regionOperations_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regions.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region resource to return."),
      description: "Returns the specified Region resource. Gets a list of available regions by making a list() request.") {
      p_project, p_region in
      do {
        var parameters = Compute.RegionsGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regions_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "regions.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of region resources available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.RegionsListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.regions_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "routers.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of routers.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.RoutersAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.routers_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "routers.delete",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_router", default: [], count: 1, description: "Name of the Router resource to delete."),
      description: "Deletes the specified Router resource.") {
      p_project, p_region, p_requestId, p_router in
      do {
        var parameters = Compute.RoutersDeleteParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_router = p_router.first {
          parameters.router = p_router
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.routers_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "routers.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_router", default: [], count: 1, description: "Name of the Router resource to return."),
      description: "Returns the specified Router resource. Gets a list of available routers by making a list() request.") {
      p_project, p_region, p_router in
      do {
        var parameters = Compute.RoutersGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_router = p_router.first {
          parameters.router = p_router
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.routers_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "routers.getNatMappingInfo",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_router", default: [], count: 1, description: "Name of the Router resource to query for Nat Mapping information of VM endpoints."),
      description: "Retrieves runtime Nat mapping information of VM endpoints.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region, p_router in
      do {
        var parameters = Compute.RoutersGetNatMappingInfoParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_router = p_router.first {
          parameters.router = p_router
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.routers_getNatMappingInfo(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "routers.getRouterStatus",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_router", default: [], count: 1, description: "Name of the Router resource to query."),
      description: "Retrieves runtime information of the specified router.") {
      p_project, p_region, p_router in
      do {
        var parameters = Compute.RoutersGetRouterStatusParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_router = p_router.first {
          parameters.router = p_router
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.routers_getRouterStatus(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "routers.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of resource. Always compute#router for routers."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_network", default: [], count: 1, description: "URI of the network to which this router belongs."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URI of the region where the router resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      description: "Creates a Router resource in the specified project and region using the data included in the request.") {
      p_project, p_region, p_requestId,r_creationTimestamp, r_description, r_id, r_kind, r_name, r_network, r_region, r_selfLink in
      do {
        var parameters = Compute.RoutersInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Router()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_network = r_network.first {
          request.network = r_network
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.routers_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "routers.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      description: "Retrieves a list of Router resources available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.RoutersListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.routers_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "routers.patch",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_router", default: [], count: 1, description: "Name of the Router resource to patch."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of resource. Always compute#router for routers."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_network", default: [], count: 1, description: "URI of the network to which this router belongs."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URI of the region where the router resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      description: "Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.") {
      p_project, p_region, p_requestId, p_router,r_creationTimestamp, r_description, r_id, r_kind, r_name, r_network, r_region, r_selfLink in
      do {
        var parameters = Compute.RoutersPatchParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_router = p_router.first {
          parameters.router = p_router
        }
        var request = Compute.Router()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_network = r_network.first {
          request.network = r_network
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.routers_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "routers.preview",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_router", default: [], count: 1, description: "Name of the Router resource to query."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of resource. Always compute#router for routers."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_network", default: [], count: 1, description: "URI of the network to which this router belongs."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URI of the region where the router resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      description: "Preview fields auto-generated during router create and update operations. Calling this method does NOT create or update the router.") {
      p_project, p_region, p_router,r_creationTimestamp, r_description, r_id, r_kind, r_name, r_network, r_region, r_selfLink in
      do {
        var parameters = Compute.RoutersPreviewParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_router = p_router.first {
          parameters.router = p_router
        }
        var request = Compute.Router()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_network = r_network.first {
          request.network = r_network
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.routers_preview(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "routers.update",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_router", default: [], count: 1, description: "Name of the Router resource to update."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of resource. Always compute#router for routers."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_network", default: [], count: 1, description: "URI of the network to which this router belongs."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URI of the region where the router resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      description: "Updates the specified Router resource with the data included in the request.") {
      p_project, p_region, p_requestId, p_router,r_creationTimestamp, r_description, r_id, r_kind, r_name, r_network, r_region, r_selfLink in
      do {
        var parameters = Compute.RoutersUpdateParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_router = p_router.first {
          parameters.router = p_router
        }
        var request = Compute.Router()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_network = r_network.first {
          request.network = r_network
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.routers_update(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "routes.delete",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_route", default: [], count: 1, description: "Name of the Route resource to delete."),
      description: "Deletes the specified Route resource.") {
      p_project, p_requestId, p_route in
      do {
        var parameters = Compute.RoutesDeleteParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_route = p_route.first {
          parameters.route = p_route
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.routes_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "routes.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_route", default: [], count: 1, description: "Name of the Route resource to return."),
      description: "Returns the specified Route resource. Gets a list of available routes by making a list() request.") {
      p_project, p_route in
      do {
        var parameters = Compute.RoutesGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_route = p_route.first {
          parameters.route = p_route
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.routes_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "routes.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_destRange", default: [], count: 1, description: "The destination range of outgoing packets that this route applies to. Only IPv4 is supported."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of this resource. Always compute#routes for Route resources."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_network", default: [], count: 1, description: "Fully-qualified URL of the network that this route applies to."),
      Options<String>("r_nextHopGateway", default: [], count: 1, description: "The URL to a gateway that should handle matching packets. You can only specify the internet gateway using a full or partial valid URL:  projects/<project-id>/global/gateways/default-internet-gateway"),
      Options<String>("r_nextHopInstance", default: [], count: 1, description: "The URL to an instance that should handle matching packets. You can specify this as a full or partial URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/"),
      Options<String>("r_nextHopIp", default: [], count: 1, description: "The network IP address of an instance that should handle matching packets. Only IPv4 is supported."),
      Options<String>("r_nextHopNetwork", default: [], count: 1, description: "The URL of the local network if it should handle matching packets."),
      Options<String>("r_nextHopPeering", default: [], count: 1, description: "[Output Only] The network peering name that should handle matching packets, which should conform to RFC1035."),
      Options<String>("r_nextHopVpnTunnel", default: [], count: 1, description: "The URL to a VpnTunnel that should handle matching packets."),
      Options<Int>("r_priority", default: [], count: 1, description: "The priority of this route. Priority is used to break ties in cases where there is more than one matching route of equal prefix length. In the case of two routes with equal prefix length, the one with the lowest-numbered priority value wins. Default value is 1000. Valid range is 0 through 65535."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined fully-qualified URL for this resource."),
      VariadicOption<String>("r_tags", default: [], description: "A list of instance tags to which this route applies."),
      description: "Creates a Route resource in the specified project using the data included in the request.") {
      p_project, p_requestId,r_creationTimestamp, r_description, r_destRange, r_id, r_kind, r_name, r_network, r_nextHopGateway, r_nextHopInstance, r_nextHopIp, r_nextHopNetwork, r_nextHopPeering, r_nextHopVpnTunnel, r_priority, r_selfLink, r_tags in
      do {
        var parameters = Compute.RoutesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Route()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_destRange = r_destRange.first {
          request.destRange = r_destRange
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_network = r_network.first {
          request.network = r_network
        }
        if let r_nextHopGateway = r_nextHopGateway.first {
          request.nextHopGateway = r_nextHopGateway
        }
        if let r_nextHopInstance = r_nextHopInstance.first {
          request.nextHopInstance = r_nextHopInstance
        }
        if let r_nextHopIp = r_nextHopIp.first {
          request.nextHopIp = r_nextHopIp
        }
        if let r_nextHopNetwork = r_nextHopNetwork.first {
          request.nextHopNetwork = r_nextHopNetwork
        }
        if let r_nextHopPeering = r_nextHopPeering.first {
          request.nextHopPeering = r_nextHopPeering
        }
        if let r_nextHopVpnTunnel = r_nextHopVpnTunnel.first {
          request.nextHopVpnTunnel = r_nextHopVpnTunnel
        }
        if let r_priority = r_priority.first {
          request.priority = r_priority
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if r_tags.count > 0 {
          request.tags = r_tags
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.routes_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "routes.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of Route resources available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.RoutesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.routes_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "securityPolicies.addRule",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_securityPolicy", default: [], count: 1, description: "Name of the security policy to update."),
      Options<String>("r_action", default: [], count: 1, description: "The Action to preform when the client connection triggers the rule. Can currently be either 'allow' or 'deny()' where valid values for status are 403, 404, and 502."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output only] Type of the resource. Always compute#securityPolicyRule for security policy rules"),
      Options<Int>("r_priority", default: [], count: 1, description: "An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority."),
      description: "Inserts a rule into a security policy.") {
      p_project, p_securityPolicy,r_action, r_description, r_kind, r_priority in
      do {
        var parameters = Compute.SecurityPoliciesAddRuleParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_securityPolicy = p_securityPolicy.first {
          parameters.securityPolicy = p_securityPolicy
        }
        var request = Compute.SecurityPolicyRule()
        if let r_action = r_action.first {
          request.action = r_action
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_priority = r_priority.first {
          request.priority = r_priority
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.securityPolicies_addRule(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "securityPolicies.delete",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_securityPolicy", default: [], count: 1, description: "Name of the security policy to delete."),
      description: "Deletes the specified policy.") {
      p_project, p_requestId, p_securityPolicy in
      do {
        var parameters = Compute.SecurityPoliciesDeleteParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_securityPolicy = p_securityPolicy.first {
          parameters.securityPolicy = p_securityPolicy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.securityPolicies_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "securityPolicies.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_securityPolicy", default: [], count: 1, description: "Name of the security policy to get."),
      description: "List all of the ordered rules present in a single specified policy.") {
      p_project, p_securityPolicy in
      do {
        var parameters = Compute.SecurityPoliciesGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_securityPolicy = p_securityPolicy.first {
          parameters.securityPolicy = p_securityPolicy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.securityPolicies_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "securityPolicies.getRule",
      Options<Int>("p_priority", default: [], count: 1, description: "The priority of the rule to get from the security policy."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_securityPolicy", default: [], count: 1, description: "Name of the security policy to which the queried rule belongs."),
      description: "Gets a rule at the specified priority.") {
      p_priority, p_project, p_securityPolicy in
      do {
        var parameters = Compute.SecurityPoliciesGetRuleParameters()
        if let p_priority = p_priority.first {
          parameters.priority = p_priority
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_securityPolicy = p_securityPolicy.first {
          parameters.securityPolicy = p_securityPolicy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.securityPolicies_getRule(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "securityPolicies.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Specifies a fingerprint for this resource, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make get() request to the security policy."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output only] Type of the resource. Always compute#securityPolicyfor security policies"),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      description: "Creates a new policy in the specified project using the data included in the request.") {
      p_project, p_requestId,r_creationTimestamp, r_description, r_fingerprint, r_id, r_kind, r_name, r_selfLink in
      do {
        var parameters = Compute.SecurityPoliciesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.SecurityPolicy()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.securityPolicies_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "securityPolicies.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "List all the policies that have been configured for the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.SecurityPoliciesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.securityPolicies_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "securityPolicies.patch",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_securityPolicy", default: [], count: 1, description: "Name of the security policy to update."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Specifies a fingerprint for this resource, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make get() request to the security policy."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output only] Type of the resource. Always compute#securityPolicyfor security policies"),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      description: "Patches the specified policy with the data included in the request.") {
      p_project, p_requestId, p_securityPolicy,r_creationTimestamp, r_description, r_fingerprint, r_id, r_kind, r_name, r_selfLink in
      do {
        var parameters = Compute.SecurityPoliciesPatchParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_securityPolicy = p_securityPolicy.first {
          parameters.securityPolicy = p_securityPolicy
        }
        var request = Compute.SecurityPolicy()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.securityPolicies_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "securityPolicies.patchRule",
      Options<Int>("p_priority", default: [], count: 1, description: "The priority of the rule to patch."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_securityPolicy", default: [], count: 1, description: "Name of the security policy to update."),
      Options<String>("r_action", default: [], count: 1, description: "The Action to preform when the client connection triggers the rule. Can currently be either 'allow' or 'deny()' where valid values for status are 403, 404, and 502."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output only] Type of the resource. Always compute#securityPolicyRule for security policy rules"),
      Options<Int>("r_priority", default: [], count: 1, description: "An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority."),
      description: "Patches a rule at the specified priority.") {
      p_priority, p_project, p_securityPolicy,r_action, r_description, r_kind, r_priority in
      do {
        var parameters = Compute.SecurityPoliciesPatchRuleParameters()
        if let p_priority = p_priority.first {
          parameters.priority = p_priority
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_securityPolicy = p_securityPolicy.first {
          parameters.securityPolicy = p_securityPolicy
        }
        var request = Compute.SecurityPolicyRule()
        if let r_action = r_action.first {
          request.action = r_action
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_priority = r_priority.first {
          request.priority = r_priority
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.securityPolicies_patchRule(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "securityPolicies.removeRule",
      Options<Int>("p_priority", default: [], count: 1, description: "The priority of the rule to remove from the security policy."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_securityPolicy", default: [], count: 1, description: "Name of the security policy to update."),
      description: "Deletes a rule at the specified priority.") {
      p_priority, p_project, p_securityPolicy in
      do {
        var parameters = Compute.SecurityPoliciesRemoveRuleParameters()
        if let p_priority = p_priority.first {
          parameters.priority = p_priority
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_securityPolicy = p_securityPolicy.first {
          parameters.securityPolicy = p_securityPolicy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.securityPolicies_removeRule(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "snapshots.delete",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_snapshot", default: [], count: 1, description: "Name of the Snapshot resource to delete."),
      description: "Deletes the specified Snapshot resource. Keep in mind that deleting a single snapshot might not necessarily delete all the data on that snapshot. If any data on the snapshot that is marked for deletion is needed for subsequent snapshots, the data will be moved to the next corresponding snapshot.  For more information, see Deleting snapshots.") {
      p_project, p_requestId, p_snapshot in
      do {
        var parameters = Compute.SnapshotsDeleteParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_snapshot = p_snapshot.first {
          parameters.snapshot = p_snapshot
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.snapshots_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "snapshots.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_snapshot", default: [], count: 1, description: "Name of the Snapshot resource to return."),
      description: "Returns the specified Snapshot resource. Gets a list of available snapshots by making a list() request.") {
      p_project, p_snapshot in
      do {
        var parameters = Compute.SnapshotsGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_snapshot = p_snapshot.first {
          parameters.snapshot = p_snapshot
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.snapshots_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "snapshots.getIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      description: "Gets the access control policy for a resource. May be empty if no such policy or resource exists.") {
      p_project, p_resource in
      do {
        var parameters = Compute.SnapshotsGetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.snapshots_getIamPolicy(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "snapshots.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of Snapshot resources contained within the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.SnapshotsListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.snapshots_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "snapshots.setIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("r_etag", default: [], count: 1, description: "Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag."),
      description: "Sets the access control policy on the specified resource. Replaces any existing policy.") {
      p_project, p_resource,r_etag in
      do {
        var parameters = Compute.SnapshotsSetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        var request = Compute.GlobalSetPolicyRequest()
        if let r_etag = r_etag.first {
          request.etag = r_etag
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.snapshots_setIamPolicy(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "snapshots.setLabels",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("r_labelFingerprint", default: [], count: 1, description: "The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash when updating or changing labels, otherwise the request will fail with error 412 conditionNotMet. Make a get() request to the resource to get the latest fingerprint."),
      description: "Sets the labels on a snapshot. To learn more about labels, read the Labeling Resources documentation.") {
      p_project, p_resource,r_labelFingerprint in
      do {
        var parameters = Compute.SnapshotsSetLabelsParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        var request = Compute.GlobalSetLabelsRequest()
        if let r_labelFingerprint = r_labelFingerprint.first {
          request.labelFingerprint = r_labelFingerprint
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.snapshots_setLabels(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "snapshots.testIamPermissions",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      VariadicOption<String>("r_permissions", default: [], description: "The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed."),
      description: "Returns permissions that a caller has on the specified resource.") {
      p_project, p_resource,r_permissions in
      do {
        var parameters = Compute.SnapshotsTestIamPermissionsParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        var request = Compute.TestPermissionsRequest()
        if r_permissions.count > 0 {
          request.permissions = r_permissions
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.snapshots_testIamPermissions(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "sslCertificates.delete",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_sslCertificate", default: [], count: 1, description: "Name of the SslCertificate resource to delete."),
      description: "Deletes the specified SslCertificate resource.") {
      p_project, p_requestId, p_sslCertificate in
      do {
        var parameters = Compute.SslCertificatesDeleteParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_sslCertificate = p_sslCertificate.first {
          parameters.sslCertificate = p_sslCertificate
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.sslCertificates_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "sslCertificates.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_sslCertificate", default: [], count: 1, description: "Name of the SslCertificate resource to return."),
      description: "Returns the specified SslCertificate resource. Gets a list of available SSL certificates by making a list() request.") {
      p_project, p_sslCertificate in
      do {
        var parameters = Compute.SslCertificatesGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_sslCertificate = p_sslCertificate.first {
          parameters.sslCertificate = p_sslCertificate
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.sslCertificates_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "sslCertificates.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_certificate", default: [], count: 1, description: "A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#sslCertificate for SSL certificates."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_privateKey", default: [], count: 1, description: "A write-only private key in PEM format. Only insert requests will include this field."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output only] Server-defined URL for the resource."),
      description: "Creates a SslCertificate resource in the specified project using the data included in the request.") {
      p_project, p_requestId,r_certificate, r_creationTimestamp, r_description, r_id, r_kind, r_name, r_privateKey, r_selfLink in
      do {
        var parameters = Compute.SslCertificatesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.SslCertificate()
        if let r_certificate = r_certificate.first {
          request.certificate = r_certificate
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_privateKey = r_privateKey.first {
          request.privateKey = r_privateKey
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.sslCertificates_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "sslCertificates.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of SslCertificate resources available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.SslCertificatesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.sslCertificates_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "sslPolicies.delete",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_sslPolicy", default: [], count: 1, description: "Name of the SSL policy to delete. The name must be 1-63 characters long, and comply with RFC1035."),
      description: "Deletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources.") {
      p_project, p_requestId, p_sslPolicy in
      do {
        var parameters = Compute.SslPoliciesDeleteParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_sslPolicy = p_sslPolicy.first {
          parameters.sslPolicy = p_sslPolicy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.sslPolicies_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "sslPolicies.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_sslPolicy", default: [], count: 1, description: "Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035."),
      description: "Lists all of the ordered rules present in a single specified policy.") {
      p_project, p_sslPolicy in
      do {
        var parameters = Compute.SslPoliciesGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_sslPolicy = p_sslPolicy.first {
          parameters.sslPolicy = p_sslPolicy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.sslPolicies_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "sslPolicies.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      VariadicOption<String>("r_customFeatures", default: [], description: "A list of features enabled when the selected profile is CUSTOM. The - method returns the set of features that can be specified in this list. This field must be empty if the profile is not CUSTOM."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      VariadicOption<String>("r_enabledFeatures", default: [], description: "[Output Only] The list of features enabled in the SSL policy."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a SslPolicy. An up-to-date fingerprint must be provided in order to update the SslPolicy, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve an SslPolicy."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output only] Type of the resource. Always compute#sslPolicyfor SSL policies."),
      Options<String>("r_minTlsVersion", default: [], count: 1, description: "The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_profile", default: [], count: 1, description: "Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      description: "Returns the specified SSL policy resource. Gets a list of available SSL policies by making a list() request.") {
      p_project, p_requestId,r_creationTimestamp, r_customFeatures, r_description, r_enabledFeatures, r_fingerprint, r_id, r_kind, r_minTlsVersion, r_name, r_profile, r_selfLink in
      do {
        var parameters = Compute.SslPoliciesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.SslPolicy()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if r_customFeatures.count > 0 {
          request.customFeatures = r_customFeatures
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if r_enabledFeatures.count > 0 {
          request.enabledFeatures = r_enabledFeatures
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_minTlsVersion = r_minTlsVersion.first {
          request.minTlsVersion = r_minTlsVersion
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_profile = r_profile.first {
          request.profile = r_profile
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.sslPolicies_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "sslPolicies.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Lists all the SSL policies that have been configured for the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.SslPoliciesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.sslPolicies_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "sslPolicies.listAvailableFeatures",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Lists all features that can be specified in the SSL policy when using custom profile.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.SslPoliciesListAvailableFeaturesParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.sslPolicies_listAvailableFeatures(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "sslPolicies.patch",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_sslPolicy", default: [], count: 1, description: "Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      VariadicOption<String>("r_customFeatures", default: [], description: "A list of features enabled when the selected profile is CUSTOM. The - method returns the set of features that can be specified in this list. This field must be empty if the profile is not CUSTOM."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      VariadicOption<String>("r_enabledFeatures", default: [], description: "[Output Only] The list of features enabled in the SSL policy."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a SslPolicy. An up-to-date fingerprint must be provided in order to update the SslPolicy, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve an SslPolicy."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output only] Type of the resource. Always compute#sslPolicyfor SSL policies."),
      Options<String>("r_minTlsVersion", default: [], count: 1, description: "The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_profile", default: [], count: 1, description: "Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      description: "Patches the specified SSL policy with the data included in the request.") {
      p_project, p_requestId, p_sslPolicy,r_creationTimestamp, r_customFeatures, r_description, r_enabledFeatures, r_fingerprint, r_id, r_kind, r_minTlsVersion, r_name, r_profile, r_selfLink in
      do {
        var parameters = Compute.SslPoliciesPatchParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_sslPolicy = p_sslPolicy.first {
          parameters.sslPolicy = p_sslPolicy
        }
        var request = Compute.SslPolicy()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if r_customFeatures.count > 0 {
          request.customFeatures = r_customFeatures
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if r_enabledFeatures.count > 0 {
          request.enabledFeatures = r_enabledFeatures
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_minTlsVersion = r_minTlsVersion.first {
          request.minTlsVersion = r_minTlsVersion
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_profile = r_profile.first {
          request.profile = r_profile
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.sslPolicies_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "subnetworks.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of subnetworks.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.SubnetworksAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.subnetworks_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "subnetworks.delete",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_subnetwork", default: [], count: 1, description: "Name of the Subnetwork resource to delete."),
      description: "Deletes the specified subnetwork.") {
      p_project, p_region, p_requestId, p_subnetwork in
      do {
        var parameters = Compute.SubnetworksDeleteParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_subnetwork = p_subnetwork.first {
          parameters.subnetwork = p_subnetwork
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.subnetworks_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "subnetworks.expandIpCidrRange",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_subnetwork", default: [], count: 1, description: "Name of the Subnetwork resource to update."),
      Options<String>("r_ipCidrRange", default: [], count: 1, description: "The IP (in CIDR format or netmask) of internal addresses that are legal on this Subnetwork. This range should be disjoint from other subnetworks within this network. This range can only be larger than (i.e. a superset of) the range previously defined before the update."),
      description: "Expands the IP CIDR range of the subnetwork to a specified value.") {
      p_project, p_region, p_requestId, p_subnetwork,r_ipCidrRange in
      do {
        var parameters = Compute.SubnetworksExpandIpCidrRangeParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_subnetwork = p_subnetwork.first {
          parameters.subnetwork = p_subnetwork
        }
        var request = Compute.SubnetworksExpandIpCidrRangeRequest()
        if let r_ipCidrRange = r_ipCidrRange.first {
          request.ipCidrRange = r_ipCidrRange
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.subnetworks_expandIpCidrRange(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "subnetworks.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_subnetwork", default: [], count: 1, description: "Name of the Subnetwork resource to return."),
      description: "Returns the specified subnetwork. Gets a list of available subnetworks list() request.") {
      p_project, p_region, p_subnetwork in
      do {
        var parameters = Compute.SubnetworksGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_subnetwork = p_subnetwork.first {
          parameters.subnetwork = p_subnetwork
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.subnetworks_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "subnetworks.getIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "The name of the region for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      description: "Gets the access control policy for a resource. May be empty if no such policy or resource exists.") {
      p_project, p_region, p_resource in
      do {
        var parameters = Compute.SubnetworksGetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.subnetworks_getIamPolicy(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "subnetworks.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a Subnetwork. An up-to-date fingerprint must be provided in order to update the Subnetwork, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a Subnetwork."),
      Options<String>("r_gatewayAddress", default: [], count: 1, description: "[Output Only] The gateway address for default routes to reach destination addresses outside this subnetwork."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_ipCidrRange", default: [], count: 1, description: "The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported. This field can be set only at resource creation time."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#subnetwork for Subnetwork resources."),
      Options<String>("r_name", default: [], count: 1, description: "The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_network", default: [], count: 1, description: "The URL of the network to which this subnetwork belongs, provided by the client when initially creating the subnetwork. Only networks that are in the distributed mode can have subnetworks. This field can be set only at resource creation time."),
      Options<String>("r_region", default: [], count: 1, description: "URL of the region where the Subnetwork resides. This field can be set only at resource creation time."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      description: "Creates a subnetwork in the specified project using the data included in the request.") {
      p_project, p_region, p_requestId,r_creationTimestamp, r_description, r_fingerprint, r_gatewayAddress, r_id, r_ipCidrRange, r_kind, r_name, r_network, r_region, r_selfLink in
      do {
        var parameters = Compute.SubnetworksInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.Subnetwork()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if let r_gatewayAddress = r_gatewayAddress.first {
          request.gatewayAddress = r_gatewayAddress
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_ipCidrRange = r_ipCidrRange.first {
          request.ipCidrRange = r_ipCidrRange
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_network = r_network.first {
          request.network = r_network
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.subnetworks_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "subnetworks.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      description: "Retrieves a list of subnetworks available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.SubnetworksListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.subnetworks_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "subnetworks.listUsable",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of usable subnetworks.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.SubnetworksListUsableParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.subnetworks_listUsable(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "subnetworks.patch",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_subnetwork", default: [], count: 1, description: "Name of the Subnetwork resource to patch."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a Subnetwork. An up-to-date fingerprint must be provided in order to update the Subnetwork, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a Subnetwork."),
      Options<String>("r_gatewayAddress", default: [], count: 1, description: "[Output Only] The gateway address for default routes to reach destination addresses outside this subnetwork."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_ipCidrRange", default: [], count: 1, description: "The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported. This field can be set only at resource creation time."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#subnetwork for Subnetwork resources."),
      Options<String>("r_name", default: [], count: 1, description: "The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_network", default: [], count: 1, description: "The URL of the network to which this subnetwork belongs, provided by the client when initially creating the subnetwork. Only networks that are in the distributed mode can have subnetworks. This field can be set only at resource creation time."),
      Options<String>("r_region", default: [], count: 1, description: "URL of the region where the Subnetwork resides. This field can be set only at resource creation time."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      description: "Patches the specified subnetwork with the data included in the request. Only certain fields can up updated with a patch request as indicated in the field descriptions. You must specify the current fingeprint of the subnetwork resource being patched.") {
      p_project, p_region, p_requestId, p_subnetwork,r_creationTimestamp, r_description, r_fingerprint, r_gatewayAddress, r_id, r_ipCidrRange, r_kind, r_name, r_network, r_region, r_selfLink in
      do {
        var parameters = Compute.SubnetworksPatchParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_subnetwork = p_subnetwork.first {
          parameters.subnetwork = p_subnetwork
        }
        var request = Compute.Subnetwork()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if let r_gatewayAddress = r_gatewayAddress.first {
          request.gatewayAddress = r_gatewayAddress
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_ipCidrRange = r_ipCidrRange.first {
          request.ipCidrRange = r_ipCidrRange
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_network = r_network.first {
          request.network = r_network
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.subnetworks_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "subnetworks.setIamPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "The name of the region for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      Options<String>("r_etag", default: [], count: 1, description: "Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag."),
      description: "Sets the access control policy on the specified resource. Replaces any existing policy.") {
      p_project, p_region, p_resource,r_etag in
      do {
        var parameters = Compute.SubnetworksSetIamPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        var request = Compute.RegionSetPolicyRequest()
        if let r_etag = r_etag.first {
          request.etag = r_etag
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.subnetworks_setIamPolicy(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "subnetworks.setPrivateIpGoogleAccess",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_subnetwork", default: [], count: 1, description: "Name of the Subnetwork resource."),
      description: "Set whether VMs in this subnet can access Google services without assigning external IP addresses through Private Google Access.") {
      p_project, p_region, p_requestId, p_subnetwork in
      do {
        var parameters = Compute.SubnetworksSetPrivateIpGoogleAccessParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_subnetwork = p_subnetwork.first {
          parameters.subnetwork = p_subnetwork
        }
        var request = Compute.SubnetworksSetPrivateIpGoogleAccessRequest()
        let sem = DispatchSemaphore(value: 0)
        try compute.subnetworks_setPrivateIpGoogleAccess(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "subnetworks.testIamPermissions",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "The name of the region for this request."),
      Options<String>("p_resource", default: [], count: 1, description: "Name or id of the resource for this request."),
      VariadicOption<String>("r_permissions", default: [], description: "The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed."),
      description: "Returns permissions that a caller has on the specified resource.") {
      p_project, p_region, p_resource,r_permissions in
      do {
        var parameters = Compute.SubnetworksTestIamPermissionsParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_resource = p_resource.first {
          parameters.resource = p_resource
        }
        var request = Compute.TestPermissionsRequest()
        if r_permissions.count > 0 {
          request.permissions = r_permissions
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.subnetworks_testIamPermissions(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetHttpProxies.delete",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetHttpProxy", default: [], count: 1, description: "Name of the TargetHttpProxy resource to delete."),
      description: "Deletes the specified TargetHttpProxy resource.") {
      p_project, p_requestId, p_targetHttpProxy in
      do {
        var parameters = Compute.TargetHttpProxiesDeleteParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetHttpProxy = p_targetHttpProxy.first {
          parameters.targetHttpProxy = p_targetHttpProxy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetHttpProxies_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetHttpProxies.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_targetHttpProxy", default: [], count: 1, description: "Name of the TargetHttpProxy resource to return."),
      description: "Returns the specified TargetHttpProxy resource. Gets a list of available target HTTP proxies by making a list() request.") {
      p_project, p_targetHttpProxy in
      do {
        var parameters = Compute.TargetHttpProxiesGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_targetHttpProxy = p_targetHttpProxy.first {
          parameters.targetHttpProxy = p_targetHttpProxy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetHttpProxies_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetHttpProxies.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of resource. Always compute#targetHttpProxy for target HTTP proxies."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_urlMap", default: [], count: 1, description: "URL to the UrlMap resource that defines the mapping from URL to the BackendService."),
      description: "Creates a TargetHttpProxy resource in the specified project using the data included in the request.") {
      p_project, p_requestId,r_creationTimestamp, r_description, r_id, r_kind, r_name, r_selfLink, r_urlMap in
      do {
        var parameters = Compute.TargetHttpProxiesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.TargetHttpProxy()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_urlMap = r_urlMap.first {
          request.urlMap = r_urlMap
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetHttpProxies_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetHttpProxies.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of TargetHttpProxy resources available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.TargetHttpProxiesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetHttpProxies_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetHttpProxies.setUrlMap",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetHttpProxy", default: [], count: 1, description: "Name of the TargetHttpProxy to set a URL map for."),
      Options<String>("r_urlMap", default: [], count: 1, description: ""),
      description: "Changes the URL map for TargetHttpProxy.") {
      p_project, p_requestId, p_targetHttpProxy,r_urlMap in
      do {
        var parameters = Compute.TargetHttpProxiesSetUrlMapParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetHttpProxy = p_targetHttpProxy.first {
          parameters.targetHttpProxy = p_targetHttpProxy
        }
        var request = Compute.UrlMapReference()
        if let r_urlMap = r_urlMap.first {
          request.urlMap = r_urlMap
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetHttpProxies_setUrlMap(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetHttpsProxies.delete",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetHttpsProxy", default: [], count: 1, description: "Name of the TargetHttpsProxy resource to delete."),
      description: "Deletes the specified TargetHttpsProxy resource.") {
      p_project, p_requestId, p_targetHttpsProxy in
      do {
        var parameters = Compute.TargetHttpsProxiesDeleteParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetHttpsProxy = p_targetHttpsProxy.first {
          parameters.targetHttpsProxy = p_targetHttpsProxy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetHttpsProxies_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetHttpsProxies.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_targetHttpsProxy", default: [], count: 1, description: "Name of the TargetHttpsProxy resource to return."),
      description: "Returns the specified TargetHttpsProxy resource. Gets a list of available target HTTPS proxies by making a list() request.") {
      p_project, p_targetHttpsProxy in
      do {
        var parameters = Compute.TargetHttpsProxiesGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_targetHttpsProxy = p_targetHttpsProxy.first {
          parameters.targetHttpsProxy = p_targetHttpsProxy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetHttpsProxies_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetHttpsProxies.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of resource. Always compute#targetHttpsProxy for target HTTPS proxies."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_quicOverride", default: [], count: 1, description: "Specifies the QUIC override policy for this TargetHttpsProxy resource. This determines whether the load balancer will attempt to negotiate QUIC with clients or not. Can specify one of NONE, ENABLE, or DISABLE. Specify ENABLE to always enable QUIC, Enables QUIC when set to ENABLE, and disables QUIC when set to DISABLE. If NONE is specified, uses the QUIC policy with no user overrides, which is equivalent to DISABLE. Not specifying this field is equivalent to specifying NONE."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      VariadicOption<String>("r_sslCertificates", default: [], description: "URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates."),
      Options<String>("r_sslPolicy", default: [], count: 1, description: "URL of SslPolicy resource that will be associated with the TargetHttpsProxy resource. If not set, the TargetHttpsProxy resource will not have any SSL policy configured."),
      Options<String>("r_urlMap", default: [], count: 1, description: "A fully-qualified or valid partial URL to the UrlMap resource that defines the mapping from URL to the BackendService. For example, the following are all valid URLs for specifying a URL map:   - https://www.googleapis.compute/v1/projects/project/global/urlMaps/url-map  - projects/project/global/urlMaps/url-map  - global/urlMaps/url-map"),
      description: "Creates a TargetHttpsProxy resource in the specified project using the data included in the request.") {
      p_project, p_requestId,r_creationTimestamp, r_description, r_id, r_kind, r_name, r_quicOverride, r_selfLink, r_sslCertificates, r_sslPolicy, r_urlMap in
      do {
        var parameters = Compute.TargetHttpsProxiesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.TargetHttpsProxy()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_quicOverride = r_quicOverride.first {
          request.quicOverride = r_quicOverride
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if r_sslCertificates.count > 0 {
          request.sslCertificates = r_sslCertificates
        }
        if let r_sslPolicy = r_sslPolicy.first {
          request.sslPolicy = r_sslPolicy
        }
        if let r_urlMap = r_urlMap.first {
          request.urlMap = r_urlMap
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetHttpsProxies_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetHttpsProxies.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of TargetHttpsProxy resources available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.TargetHttpsProxiesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetHttpsProxies_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetHttpsProxies.setQuicOverride",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetHttpsProxy", default: [], count: 1, description: "Name of the TargetHttpsProxy resource to set the QUIC override policy for. The name should conform to RFC1035."),
      Options<String>("r_quicOverride", default: [], count: 1, description: "QUIC policy for the TargetHttpsProxy resource."),
      description: "Sets the QUIC override policy for TargetHttpsProxy.") {
      p_project, p_requestId, p_targetHttpsProxy,r_quicOverride in
      do {
        var parameters = Compute.TargetHttpsProxiesSetQuicOverrideParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetHttpsProxy = p_targetHttpsProxy.first {
          parameters.targetHttpsProxy = p_targetHttpsProxy
        }
        var request = Compute.TargetHttpsProxiesSetQuicOverrideRequest()
        if let r_quicOverride = r_quicOverride.first {
          request.quicOverride = r_quicOverride
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetHttpsProxies_setQuicOverride(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetHttpsProxies.setSslCertificates",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetHttpsProxy", default: [], count: 1, description: "Name of the TargetHttpsProxy resource to set an SslCertificates resource for."),
      VariadicOption<String>("r_sslCertificates", default: [], description: "New set of SslCertificate resources to associate with this TargetHttpsProxy resource. Currently exactly one SslCertificate resource must be specified."),
      description: "Replaces SslCertificates for TargetHttpsProxy.") {
      p_project, p_requestId, p_targetHttpsProxy,r_sslCertificates in
      do {
        var parameters = Compute.TargetHttpsProxiesSetSslCertificatesParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetHttpsProxy = p_targetHttpsProxy.first {
          parameters.targetHttpsProxy = p_targetHttpsProxy
        }
        var request = Compute.TargetHttpsProxiesSetSslCertificatesRequest()
        if r_sslCertificates.count > 0 {
          request.sslCertificates = r_sslCertificates
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetHttpsProxies_setSslCertificates(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetHttpsProxies.setSslPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetHttpsProxy", default: [], count: 1, description: "Name of the TargetHttpsProxy resource whose SSL policy is to be set. The name must be 1-63 characters long, and comply with RFC1035."),
      Options<String>("r_sslPolicy", default: [], count: 1, description: "URL of the SSL policy resource. Set this to empty string to clear any existing SSL policy associated with the target proxy resource."),
      description: "Sets the SSL policy for TargetHttpsProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the HTTPS proxy load balancer. They do not affect the connection between the load balancer and the backends.") {
      p_project, p_requestId, p_targetHttpsProxy,r_sslPolicy in
      do {
        var parameters = Compute.TargetHttpsProxiesSetSslPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetHttpsProxy = p_targetHttpsProxy.first {
          parameters.targetHttpsProxy = p_targetHttpsProxy
        }
        var request = Compute.SslPolicyReference()
        if let r_sslPolicy = r_sslPolicy.first {
          request.sslPolicy = r_sslPolicy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetHttpsProxies_setSslPolicy(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetHttpsProxies.setUrlMap",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetHttpsProxy", default: [], count: 1, description: "Name of the TargetHttpsProxy resource whose URL map is to be set."),
      Options<String>("r_urlMap", default: [], count: 1, description: ""),
      description: "Changes the URL map for TargetHttpsProxy.") {
      p_project, p_requestId, p_targetHttpsProxy,r_urlMap in
      do {
        var parameters = Compute.TargetHttpsProxiesSetUrlMapParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetHttpsProxy = p_targetHttpsProxy.first {
          parameters.targetHttpsProxy = p_targetHttpsProxy
        }
        var request = Compute.UrlMapReference()
        if let r_urlMap = r_urlMap.first {
          request.urlMap = r_urlMap
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetHttpsProxies_setUrlMap(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetInstances.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of target instances.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.TargetInstancesAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetInstances_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetInstances.delete",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetInstance", default: [], count: 1, description: "Name of the TargetInstance resource to delete."),
      Options<String>("p_zone", default: [], count: 1, description: "Name of the zone scoping this request."),
      description: "Deletes the specified TargetInstance resource.") {
      p_project, p_requestId, p_targetInstance, p_zone in
      do {
        var parameters = Compute.TargetInstancesDeleteParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetInstance = p_targetInstance.first {
          parameters.targetInstance = p_targetInstance
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetInstances_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetInstances.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_targetInstance", default: [], count: 1, description: "Name of the TargetInstance resource to return."),
      Options<String>("p_zone", default: [], count: 1, description: "Name of the zone scoping this request."),
      description: "Returns the specified TargetInstance resource. Gets a list of available target instances by making a list() request.") {
      p_project, p_targetInstance, p_zone in
      do {
        var parameters = Compute.TargetInstancesGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_targetInstance = p_targetInstance.first {
          parameters.targetInstance = p_targetInstance
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetInstances_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetInstances.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_zone", default: [], count: 1, description: "Name of the zone scoping this request."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_instance", default: [], count: 1, description: "A URL to the virtual machine instance that handles traffic for this target instance. When creating a target instance, you can provide the fully-qualified URL or a valid partial URL to the desired virtual machine. For example, the following are all valid URLs:  - https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance  - projects/project/zones/zone/instances/instance  - zones/zone/instances/instance"),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] The type of the resource. Always compute#targetInstance for target instances."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_natPolicy", default: [], count: 1, description: "NAT option controlling how IPs are NAT'ed to the instance. Currently only NO_NAT (default value) is supported."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_zone", default: [], count: 1, description: "[Output Only] URL of the zone where the target instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      description: "Creates a TargetInstance resource in the specified project and zone using the data included in the request.") {
      p_project, p_requestId, p_zone,r_creationTimestamp, r_description, r_id, r_instance, r_kind, r_name, r_natPolicy, r_selfLink, r_zone in
      do {
        var parameters = Compute.TargetInstancesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        var request = Compute.TargetInstance()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_instance = r_instance.first {
          request.instance = r_instance
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_natPolicy = r_natPolicy.first {
          request.natPolicy = r_natPolicy
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_zone = r_zone.first {
          request.zone = r_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetInstances_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetInstances.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "Name of the zone scoping this request."),
      description: "Retrieves a list of TargetInstance resources available to the specified project and zone.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_zone in
      do {
        var parameters = Compute.TargetInstancesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetInstances_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetPools.addHealthCheck",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetPool", default: [], count: 1, description: "Name of the target pool to add a health check to."),
      description: "Adds health check URLs to a target pool.") {
      p_project, p_region, p_requestId, p_targetPool in
      do {
        var parameters = Compute.TargetPoolsAddHealthCheckParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetPool = p_targetPool.first {
          parameters.targetPool = p_targetPool
        }
        var request = Compute.TargetPoolsAddHealthCheckRequest()
        let sem = DispatchSemaphore(value: 0)
        try compute.targetPools_addHealthCheck(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetPools.addInstance",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetPool", default: [], count: 1, description: "Name of the TargetPool resource to add instances to."),
      description: "Adds an instance to a target pool.") {
      p_project, p_region, p_requestId, p_targetPool in
      do {
        var parameters = Compute.TargetPoolsAddInstanceParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetPool = p_targetPool.first {
          parameters.targetPool = p_targetPool
        }
        var request = Compute.TargetPoolsAddInstanceRequest()
        let sem = DispatchSemaphore(value: 0)
        try compute.targetPools_addInstance(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetPools.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of target pools.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.TargetPoolsAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetPools_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetPools.delete",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetPool", default: [], count: 1, description: "Name of the TargetPool resource to delete."),
      description: "Deletes the specified target pool.") {
      p_project, p_region, p_requestId, p_targetPool in
      do {
        var parameters = Compute.TargetPoolsDeleteParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetPool = p_targetPool.first {
          parameters.targetPool = p_targetPool
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetPools_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetPools.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_targetPool", default: [], count: 1, description: "Name of the TargetPool resource to return."),
      description: "Returns the specified target pool. Gets a list of available target pools by making a list() request.") {
      p_project, p_region, p_targetPool in
      do {
        var parameters = Compute.TargetPoolsGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_targetPool = p_targetPool.first {
          parameters.targetPool = p_targetPool
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetPools_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetPools.getHealth",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_targetPool", default: [], count: 1, description: "Name of the TargetPool resource to which the queried instance belongs."),
      Options<String>("r_instance", default: [], count: 1, description: "The URL for a specific instance."),
      description: "Gets the most recent health check results for each IP for the instance that is referenced by the given target pool.") {
      p_project, p_region, p_targetPool,r_instance in
      do {
        var parameters = Compute.TargetPoolsGetHealthParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_targetPool = p_targetPool.first {
          parameters.targetPool = p_targetPool
        }
        var request = Compute.InstanceReference()
        if let r_instance = r_instance.first {
          request.instance = r_instance
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetPools_getHealth(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetPools.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_backupPool", default: [], count: 1, description: "This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool, and its failoverRatio field is properly set to a value between [0, 1].  backupPool and failoverRatio together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the primary pool is at or below failoverRatio, traffic arriving at the load-balanced IP will be directed to the backup pool.  In case where failoverRatio and backupPool are not set, or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the 'force' mode, where traffic will be spread to the healthy instances with the best effort, or to all instances when no instance is healthy."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      VariadicOption<String>("r_healthChecks", default: [], description: "The URL of the HttpHealthCheck resource. A member instance in this pool is considered healthy if and only if the health checks pass. An empty list means all member instances will be considered healthy at all times. Only HttpHealthChecks are supported. Only one health check may be specified."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      VariadicOption<String>("r_instances", default: [], description: "A list of resource URLs to the virtual machine instances serving this pool. They must live in zones contained in the same region as this pool."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#targetPool for target pools."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the target pool resides."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_sessionAffinity", default: [], count: 1, description: "Session affinity option, must be one of the following values: NONE: Connections from the same client IP may go to any instance in the pool. CLIENT_IP: Connections from the same client IP will go to the same instance in the pool while that instance remains healthy. CLIENT_IP_PROTO: Connections from the same client IP with the same IP protocol will go to the same instance in the pool while that instance remains healthy."),
      description: "Creates a target pool in the specified project and region using the data included in the request.") {
      p_project, p_region, p_requestId,r_backupPool, r_creationTimestamp, r_description, r_healthChecks, r_id, r_instances, r_kind, r_name, r_region, r_selfLink, r_sessionAffinity in
      do {
        var parameters = Compute.TargetPoolsInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.TargetPool()
        if let r_backupPool = r_backupPool.first {
          request.backupPool = r_backupPool
        }
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if r_healthChecks.count > 0 {
          request.healthChecks = r_healthChecks
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if r_instances.count > 0 {
          request.instances = r_instances
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_sessionAffinity = r_sessionAffinity.first {
          request.sessionAffinity = r_sessionAffinity
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetPools_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetPools.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      description: "Retrieves a list of target pools available to the specified project and region.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.TargetPoolsListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetPools_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetPools.removeHealthCheck",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetPool", default: [], count: 1, description: "Name of the target pool to remove health checks from."),
      description: "Removes health check URL from a target pool.") {
      p_project, p_region, p_requestId, p_targetPool in
      do {
        var parameters = Compute.TargetPoolsRemoveHealthCheckParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetPool = p_targetPool.first {
          parameters.targetPool = p_targetPool
        }
        var request = Compute.TargetPoolsRemoveHealthCheckRequest()
        let sem = DispatchSemaphore(value: 0)
        try compute.targetPools_removeHealthCheck(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetPools.removeInstance",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetPool", default: [], count: 1, description: "Name of the TargetPool resource to remove instances from."),
      description: "Removes instance URL from a target pool.") {
      p_project, p_region, p_requestId, p_targetPool in
      do {
        var parameters = Compute.TargetPoolsRemoveInstanceParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetPool = p_targetPool.first {
          parameters.targetPool = p_targetPool
        }
        var request = Compute.TargetPoolsRemoveInstanceRequest()
        let sem = DispatchSemaphore(value: 0)
        try compute.targetPools_removeInstance(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetPools.setBackup",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region scoping this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetPool", default: [], count: 1, description: "Name of the TargetPool resource to set a backup pool for."),
      Options<String>("r_target", default: [], count: 1, description: ""),
      description: "Changes a backup target pool's configurations.") {
      p_project, p_region, p_requestId, p_targetPool,r_target in
      do {
        var parameters = Compute.TargetPoolsSetBackupParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetPool = p_targetPool.first {
          parameters.targetPool = p_targetPool
        }
        var request = Compute.TargetReference()
        if let r_target = r_target.first {
          request.target = r_target
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetPools_setBackup(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetSslProxies.delete",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetSslProxy", default: [], count: 1, description: "Name of the TargetSslProxy resource to delete."),
      description: "Deletes the specified TargetSslProxy resource.") {
      p_project, p_requestId, p_targetSslProxy in
      do {
        var parameters = Compute.TargetSslProxiesDeleteParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetSslProxy = p_targetSslProxy.first {
          parameters.targetSslProxy = p_targetSslProxy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetSslProxies_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetSslProxies.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_targetSslProxy", default: [], count: 1, description: "Name of the TargetSslProxy resource to return."),
      description: "Returns the specified TargetSslProxy resource. Gets a list of available target SSL proxies by making a list() request.") {
      p_project, p_targetSslProxy in
      do {
        var parameters = Compute.TargetSslProxiesGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_targetSslProxy = p_targetSslProxy.first {
          parameters.targetSslProxy = p_targetSslProxy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetSslProxies_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetSslProxies.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#targetSslProxy for target SSL proxies."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_proxyHeader", default: [], count: 1, description: "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_service", default: [], count: 1, description: "URL to the BackendService resource."),
      VariadicOption<String>("r_sslCertificates", default: [], description: "URLs to SslCertificate resources that are used to authenticate connections to Backends. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates."),
      Options<String>("r_sslPolicy", default: [], count: 1, description: "URL of SslPolicy resource that will be associated with the TargetSslProxy resource. If not set, the TargetSslProxy resource will not have any SSL policy configured."),
      description: "Creates a TargetSslProxy resource in the specified project using the data included in the request.") {
      p_project, p_requestId,r_creationTimestamp, r_description, r_id, r_kind, r_name, r_proxyHeader, r_selfLink, r_service, r_sslCertificates, r_sslPolicy in
      do {
        var parameters = Compute.TargetSslProxiesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.TargetSslProxy()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_proxyHeader = r_proxyHeader.first {
          request.proxyHeader = r_proxyHeader
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_service = r_service.first {
          request.service = r_service
        }
        if r_sslCertificates.count > 0 {
          request.sslCertificates = r_sslCertificates
        }
        if let r_sslPolicy = r_sslPolicy.first {
          request.sslPolicy = r_sslPolicy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetSslProxies_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetSslProxies.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of TargetSslProxy resources available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.TargetSslProxiesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetSslProxies_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetSslProxies.setBackendService",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetSslProxy", default: [], count: 1, description: "Name of the TargetSslProxy resource whose BackendService resource is to be set."),
      Options<String>("r_service", default: [], count: 1, description: "The URL of the new BackendService resource for the targetSslProxy."),
      description: "Changes the BackendService for TargetSslProxy.") {
      p_project, p_requestId, p_targetSslProxy,r_service in
      do {
        var parameters = Compute.TargetSslProxiesSetBackendServiceParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetSslProxy = p_targetSslProxy.first {
          parameters.targetSslProxy = p_targetSslProxy
        }
        var request = Compute.TargetSslProxiesSetBackendServiceRequest()
        if let r_service = r_service.first {
          request.service = r_service
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetSslProxies_setBackendService(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetSslProxies.setProxyHeader",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetSslProxy", default: [], count: 1, description: "Name of the TargetSslProxy resource whose ProxyHeader is to be set."),
      Options<String>("r_proxyHeader", default: [], count: 1, description: "The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed."),
      description: "Changes the ProxyHeaderType for TargetSslProxy.") {
      p_project, p_requestId, p_targetSslProxy,r_proxyHeader in
      do {
        var parameters = Compute.TargetSslProxiesSetProxyHeaderParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetSslProxy = p_targetSslProxy.first {
          parameters.targetSslProxy = p_targetSslProxy
        }
        var request = Compute.TargetSslProxiesSetProxyHeaderRequest()
        if let r_proxyHeader = r_proxyHeader.first {
          request.proxyHeader = r_proxyHeader
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetSslProxies_setProxyHeader(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetSslProxies.setSslCertificates",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetSslProxy", default: [], count: 1, description: "Name of the TargetSslProxy resource whose SslCertificate resource is to be set."),
      VariadicOption<String>("r_sslCertificates", default: [], description: "New set of URLs to SslCertificate resources to associate with this TargetSslProxy. Currently exactly one ssl certificate must be specified."),
      description: "Changes SslCertificates for TargetSslProxy.") {
      p_project, p_requestId, p_targetSslProxy,r_sslCertificates in
      do {
        var parameters = Compute.TargetSslProxiesSetSslCertificatesParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetSslProxy = p_targetSslProxy.first {
          parameters.targetSslProxy = p_targetSslProxy
        }
        var request = Compute.TargetSslProxiesSetSslCertificatesRequest()
        if r_sslCertificates.count > 0 {
          request.sslCertificates = r_sslCertificates
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetSslProxies_setSslCertificates(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetSslProxies.setSslPolicy",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetSslProxy", default: [], count: 1, description: "Name of the TargetSslProxy resource whose SSL policy is to be set. The name must be 1-63 characters long, and comply with RFC1035."),
      Options<String>("r_sslPolicy", default: [], count: 1, description: "URL of the SSL policy resource. Set this to empty string to clear any existing SSL policy associated with the target proxy resource."),
      description: "Sets the SSL policy for TargetSslProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the SSL proxy load balancer. They do not affect the connection between the load balancer and the backends.") {
      p_project, p_requestId, p_targetSslProxy,r_sslPolicy in
      do {
        var parameters = Compute.TargetSslProxiesSetSslPolicyParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetSslProxy = p_targetSslProxy.first {
          parameters.targetSslProxy = p_targetSslProxy
        }
        var request = Compute.SslPolicyReference()
        if let r_sslPolicy = r_sslPolicy.first {
          request.sslPolicy = r_sslPolicy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetSslProxies_setSslPolicy(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetTcpProxies.delete",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetTcpProxy", default: [], count: 1, description: "Name of the TargetTcpProxy resource to delete."),
      description: "Deletes the specified TargetTcpProxy resource.") {
      p_project, p_requestId, p_targetTcpProxy in
      do {
        var parameters = Compute.TargetTcpProxiesDeleteParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetTcpProxy = p_targetTcpProxy.first {
          parameters.targetTcpProxy = p_targetTcpProxy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetTcpProxies_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetTcpProxies.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_targetTcpProxy", default: [], count: 1, description: "Name of the TargetTcpProxy resource to return."),
      description: "Returns the specified TargetTcpProxy resource. Gets a list of available target TCP proxies by making a list() request.") {
      p_project, p_targetTcpProxy in
      do {
        var parameters = Compute.TargetTcpProxiesGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_targetTcpProxy = p_targetTcpProxy.first {
          parameters.targetTcpProxy = p_targetTcpProxy
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetTcpProxies_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetTcpProxies.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#targetTcpProxy for target TCP proxies."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_proxyHeader", default: [], count: 1, description: "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_service", default: [], count: 1, description: "URL to the BackendService resource."),
      description: "Creates a TargetTcpProxy resource in the specified project using the data included in the request.") {
      p_project, p_requestId,r_creationTimestamp, r_description, r_id, r_kind, r_name, r_proxyHeader, r_selfLink, r_service in
      do {
        var parameters = Compute.TargetTcpProxiesInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.TargetTcpProxy()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_proxyHeader = r_proxyHeader.first {
          request.proxyHeader = r_proxyHeader
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_service = r_service.first {
          request.service = r_service
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetTcpProxies_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetTcpProxies.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of TargetTcpProxy resources available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.TargetTcpProxiesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetTcpProxies_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetTcpProxies.setBackendService",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetTcpProxy", default: [], count: 1, description: "Name of the TargetTcpProxy resource whose BackendService resource is to be set."),
      Options<String>("r_service", default: [], count: 1, description: "The URL of the new BackendService resource for the targetTcpProxy."),
      description: "Changes the BackendService for TargetTcpProxy.") {
      p_project, p_requestId, p_targetTcpProxy,r_service in
      do {
        var parameters = Compute.TargetTcpProxiesSetBackendServiceParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetTcpProxy = p_targetTcpProxy.first {
          parameters.targetTcpProxy = p_targetTcpProxy
        }
        var request = Compute.TargetTcpProxiesSetBackendServiceRequest()
        if let r_service = r_service.first {
          request.service = r_service
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetTcpProxies_setBackendService(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetTcpProxies.setProxyHeader",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetTcpProxy", default: [], count: 1, description: "Name of the TargetTcpProxy resource whose ProxyHeader is to be set."),
      Options<String>("r_proxyHeader", default: [], count: 1, description: "The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed."),
      description: "Changes the ProxyHeaderType for TargetTcpProxy.") {
      p_project, p_requestId, p_targetTcpProxy,r_proxyHeader in
      do {
        var parameters = Compute.TargetTcpProxiesSetProxyHeaderParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetTcpProxy = p_targetTcpProxy.first {
          parameters.targetTcpProxy = p_targetTcpProxy
        }
        var request = Compute.TargetTcpProxiesSetProxyHeaderRequest()
        if let r_proxyHeader = r_proxyHeader.first {
          request.proxyHeader = r_proxyHeader
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetTcpProxies_setProxyHeader(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetVpnGateways.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of target VPN gateways.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.TargetVpnGatewaysAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetVpnGateways_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetVpnGateways.delete",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_targetVpnGateway", default: [], count: 1, description: "Name of the target VPN gateway to delete."),
      description: "Deletes the specified target VPN gateway.") {
      p_project, p_region, p_requestId, p_targetVpnGateway in
      do {
        var parameters = Compute.TargetVpnGatewaysDeleteParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_targetVpnGateway = p_targetVpnGateway.first {
          parameters.targetVpnGateway = p_targetVpnGateway
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetVpnGateways_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetVpnGateways.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_targetVpnGateway", default: [], count: 1, description: "Name of the target VPN gateway to return."),
      description: "Returns the specified target VPN gateway. Gets a list of available target VPN gateways by making a list() request.") {
      p_project, p_region, p_targetVpnGateway in
      do {
        var parameters = Compute.TargetVpnGatewaysGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_targetVpnGateway = p_targetVpnGateway.first {
          parameters.targetVpnGateway = p_targetVpnGateway
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetVpnGateways_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetVpnGateways.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      VariadicOption<String>("r_forwardingRules", default: [], description: "[Output Only] A list of URLs to the ForwardingRule resources. ForwardingRules are created using compute.forwardingRules.insert and associated to a VPN gateway."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_network", default: [], count: 1, description: "URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the target VPN gateway resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] The status of the VPN gateway."),
      VariadicOption<String>("r_tunnels", default: [], description: "[Output Only] A list of URLs to VpnTunnel resources. VpnTunnels are created using compute.vpntunnels.insert method and associated to a VPN gateway."),
      description: "Creates a target VPN gateway in the specified project and region using the data included in the request.") {
      p_project, p_region, p_requestId,r_creationTimestamp, r_description, r_forwardingRules, r_id, r_kind, r_name, r_network, r_region, r_selfLink, r_status, r_tunnels in
      do {
        var parameters = Compute.TargetVpnGatewaysInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.TargetVpnGateway()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if r_forwardingRules.count > 0 {
          request.forwardingRules = r_forwardingRules
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_network = r_network.first {
          request.network = r_network
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if r_tunnels.count > 0 {
          request.tunnels = r_tunnels
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetVpnGateways_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "targetVpnGateways.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      description: "Retrieves a list of target VPN gateways available to the specified project and region.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.TargetVpnGatewaysListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.targetVpnGateways_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "urlMaps.delete",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_urlMap", default: [], count: 1, description: "Name of the UrlMap resource to delete."),
      description: "Deletes the specified UrlMap resource.") {
      p_project, p_requestId, p_urlMap in
      do {
        var parameters = Compute.UrlMapsDeleteParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_urlMap = p_urlMap.first {
          parameters.urlMap = p_urlMap
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.urlMaps_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "urlMaps.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_urlMap", default: [], count: 1, description: "Name of the UrlMap resource to return."),
      description: "Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request.") {
      p_project, p_urlMap in
      do {
        var parameters = Compute.UrlMapsGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_urlMap = p_urlMap.first {
          parameters.urlMap = p_urlMap
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.urlMaps_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "urlMaps.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_defaultService", default: [], count: 1, description: "The full or partial URL of the defaultService resource to which traffic is directed if none of the hostRules match. If defaultRouteAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of defaultService, defaultUrlRedirect  or defaultRouteAction.weightedBackendService must be set."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a UrlMap. An up-to-date fingerprint must be provided in order to update the UrlMap, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a UrlMap."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#urlMaps for url maps."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      description: "Creates a UrlMap resource in the specified project using the data included in the request.") {
      p_project, p_requestId,r_creationTimestamp, r_defaultService, r_description, r_fingerprint, r_id, r_kind, r_name, r_selfLink in
      do {
        var parameters = Compute.UrlMapsInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.UrlMap()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_defaultService = r_defaultService.first {
          request.defaultService = r_defaultService
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.urlMaps_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "urlMaps.invalidateCache",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_urlMap", default: [], count: 1, description: "Name of the UrlMap scoping this request."),
      Options<String>("r_host", default: [], count: 1, description: "If set, this invalidation rule will only apply to requests with a Host header matching host."),
      Options<String>("r_path", default: [], count: 1, description: ""),
      description: "Initiates a cache invalidation operation, invalidating the specified path, scoped to the specified UrlMap.") {
      p_project, p_requestId, p_urlMap,r_host, r_path in
      do {
        var parameters = Compute.UrlMapsInvalidateCacheParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_urlMap = p_urlMap.first {
          parameters.urlMap = p_urlMap
        }
        var request = Compute.CacheInvalidationRule()
        if let r_host = r_host.first {
          request.host = r_host
        }
        if let r_path = r_path.first {
          request.path = r_path
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.urlMaps_invalidateCache(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "urlMaps.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of UrlMap resources available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.UrlMapsListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.urlMaps_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "urlMaps.patch",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_urlMap", default: [], count: 1, description: "Name of the UrlMap resource to patch."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_defaultService", default: [], count: 1, description: "The full or partial URL of the defaultService resource to which traffic is directed if none of the hostRules match. If defaultRouteAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of defaultService, defaultUrlRedirect  or defaultRouteAction.weightedBackendService must be set."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a UrlMap. An up-to-date fingerprint must be provided in order to update the UrlMap, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a UrlMap."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#urlMaps for url maps."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      description: "Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.") {
      p_project, p_requestId, p_urlMap,r_creationTimestamp, r_defaultService, r_description, r_fingerprint, r_id, r_kind, r_name, r_selfLink in
      do {
        var parameters = Compute.UrlMapsPatchParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_urlMap = p_urlMap.first {
          parameters.urlMap = p_urlMap
        }
        var request = Compute.UrlMap()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_defaultService = r_defaultService.first {
          request.defaultService = r_defaultService
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.urlMaps_patch(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "urlMaps.update",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_urlMap", default: [], count: 1, description: "Name of the UrlMap resource to update."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_defaultService", default: [], count: 1, description: "The full or partial URL of the defaultService resource to which traffic is directed if none of the hostRules match. If defaultRouteAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of defaultService, defaultUrlRedirect  or defaultRouteAction.weightedBackendService must be set."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_fingerprint", default: [], count: 1, description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a UrlMap. An up-to-date fingerprint must be provided in order to update the UrlMap, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a UrlMap."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of the resource. Always compute#urlMaps for url maps."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      description: "Updates the specified UrlMap resource with the data included in the request.") {
      p_project, p_requestId, p_urlMap,r_creationTimestamp, r_defaultService, r_description, r_fingerprint, r_id, r_kind, r_name, r_selfLink in
      do {
        var parameters = Compute.UrlMapsUpdateParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_urlMap = p_urlMap.first {
          parameters.urlMap = p_urlMap
        }
        var request = Compute.UrlMap()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_defaultService = r_defaultService.first {
          request.defaultService = r_defaultService
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_fingerprint = r_fingerprint.first {
          request.fingerprint = r_fingerprint
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.urlMaps_update(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "urlMaps.validate",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_urlMap", default: [], count: 1, description: "Name of the UrlMap resource to be validated as."),
      description: "Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.") {
      p_project, p_urlMap in
      do {
        var parameters = Compute.UrlMapsValidateParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_urlMap = p_urlMap.first {
          parameters.urlMap = p_urlMap
        }
        var request = Compute.UrlMapsValidateRequest()
        let sem = DispatchSemaphore(value: 0)
        try compute.urlMaps_validate(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "vpnTunnels.aggregatedList",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves an aggregated list of VPN tunnels.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.VpnTunnelsAggregatedListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.vpnTunnels_aggregatedList(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "vpnTunnels.delete",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("p_vpnTunnel", default: [], count: 1, description: "Name of the VpnTunnel resource to delete."),
      description: "Deletes the specified VpnTunnel resource.") {
      p_project, p_region, p_requestId, p_vpnTunnel in
      do {
        var parameters = Compute.VpnTunnelsDeleteParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        if let p_vpnTunnel = p_vpnTunnel.first {
          parameters.vpnTunnel = p_vpnTunnel
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.vpnTunnels_delete(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "vpnTunnels.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_vpnTunnel", default: [], count: 1, description: "Name of the VpnTunnel resource to return."),
      description: "Returns the specified VpnTunnel resource. Gets a list of available VPN tunnels by making a list() request.") {
      p_project, p_region, p_vpnTunnel in
      do {
        var parameters = Compute.VpnTunnelsGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_vpnTunnel = p_vpnTunnel.first {
          parameters.vpnTunnel = p_vpnTunnel
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.vpnTunnels_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "vpnTunnels.insert",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      Options<String>("p_requestId", default: [], count: 1, description: "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."),
      Options<String>("r_creationTimestamp", default: [], count: 1, description: "[Output Only] Creation timestamp in RFC3339 text format."),
      Options<String>("r_description", default: [], count: 1, description: "An optional description of this resource. Provide this property when you create the resource."),
      Options<String>("r_detailedStatus", default: [], count: 1, description: "[Output Only] Detailed status message for the VPN tunnel."),
      Options<String>("r_id", default: [], count: 1, description: "[Output Only] The unique identifier for the resource. This identifier is defined by the server."),
      Options<Int>("r_ikeVersion", default: [], count: 1, description: "IKE protocol version to use when establishing the VPN tunnel with peer VPN gateway. Acceptable IKE versions are 1 or 2. Default version is 2."),
      Options<String>("r_kind", default: [], count: 1, description: "[Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels."),
      VariadicOption<String>("r_localTrafficSelector", default: [], description: "Local traffic selector to use when establishing the VPN tunnel with peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges should be disjoint. Only IPv4 is supported."),
      Options<String>("r_name", default: [], count: 1, description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash."),
      Options<String>("r_peerIp", default: [], count: 1, description: "IP address of the peer VPN gateway. Only IPv4 is supported."),
      Options<String>("r_region", default: [], count: 1, description: "[Output Only] URL of the region where the VPN tunnel resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body."),
      VariadicOption<String>("r_remoteTrafficSelector", default: [], description: "Remote traffic selectors to use when establishing the VPN tunnel with peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges should be disjoint. Only IPv4 is supported."),
      Options<String>("r_router", default: [], count: 1, description: "URL of router resource to be used for dynamic routing."),
      Options<String>("r_selfLink", default: [], count: 1, description: "[Output Only] Server-defined URL for the resource."),
      Options<String>("r_sharedSecret", default: [], count: 1, description: "Shared secret used to set the secure session between the Cloud VPN gateway and the peer VPN gateway."),
      Options<String>("r_sharedSecretHash", default: [], count: 1, description: "Hash of the shared secret."),
      Options<String>("r_status", default: [], count: 1, description: "[Output Only] The status of the VPN tunnel."),
      Options<String>("r_targetVpnGateway", default: [], count: 1, description: "URL of the Target VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created."),
      description: "Creates a VpnTunnel resource in the specified project and region using the data included in the request.") {
      p_project, p_region, p_requestId,r_creationTimestamp, r_description, r_detailedStatus, r_id, r_ikeVersion, r_kind, r_localTrafficSelector, r_name, r_peerIp, r_region, r_remoteTrafficSelector, r_router, r_selfLink, r_sharedSecret, r_sharedSecretHash, r_status, r_targetVpnGateway in
      do {
        var parameters = Compute.VpnTunnelsInsertParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        if let p_requestId = p_requestId.first {
          parameters.requestId = p_requestId
        }
        var request = Compute.VpnTunnel()
        if let r_creationTimestamp = r_creationTimestamp.first {
          request.creationTimestamp = r_creationTimestamp
        }
        if let r_description = r_description.first {
          request.description = r_description
        }
        if let r_detailedStatus = r_detailedStatus.first {
          request.detailedStatus = r_detailedStatus
        }
        if let r_id = r_id.first {
          request.id = r_id
        }
        if let r_ikeVersion = r_ikeVersion.first {
          request.ikeVersion = r_ikeVersion
        }
        if let r_kind = r_kind.first {
          request.kind = r_kind
        }
        if r_localTrafficSelector.count > 0 {
          request.localTrafficSelector = r_localTrafficSelector
        }
        if let r_name = r_name.first {
          request.name = r_name
        }
        if let r_peerIp = r_peerIp.first {
          request.peerIp = r_peerIp
        }
        if let r_region = r_region.first {
          request.region = r_region
        }
        if r_remoteTrafficSelector.count > 0 {
          request.remoteTrafficSelector = r_remoteTrafficSelector
        }
        if let r_router = r_router.first {
          request.router = r_router
        }
        if let r_selfLink = r_selfLink.first {
          request.selfLink = r_selfLink
        }
        if let r_sharedSecret = r_sharedSecret.first {
          request.sharedSecret = r_sharedSecret
        }
        if let r_sharedSecretHash = r_sharedSecretHash.first {
          request.sharedSecretHash = r_sharedSecretHash
        }
        if let r_status = r_status.first {
          request.status = r_status
        }
        if let r_targetVpnGateway = r_targetVpnGateway.first {
          request.targetVpnGateway = r_targetVpnGateway
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.vpnTunnels_insert(request: request, parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "vpnTunnels.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_region", default: [], count: 1, description: "Name of the region for this request."),
      description: "Retrieves a list of VpnTunnel resources contained in the specified project and region.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_region in
      do {
        var parameters = Compute.VpnTunnelsListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_region = p_region.first {
          parameters.region = p_region
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.vpnTunnels_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "zoneOperations.delete",
      Options<String>("p_operation", default: [], count: 1, description: "Name of the Operations resource to delete."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "Name of the zone for this request."),
      description: "Deletes the specified zone-specific Operations resource.") {
      p_operation, p_project, p_zone in
      do {
        var parameters = Compute.ZoneOperationsDeleteParameters()
        if let p_operation = p_operation.first {
          parameters.operation = p_operation
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.zoneOperations_delete(parameters:parameters) {
          error in
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "zoneOperations.get",
      Options<String>("p_operation", default: [], count: 1, description: "Name of the Operations resource to return."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "Name of the zone for this request."),
      description: "Retrieves the specified zone-specific Operations resource.") {
      p_operation, p_project, p_zone in
      do {
        var parameters = Compute.ZoneOperationsGetParameters()
        if let p_operation = p_operation.first {
          parameters.operation = p_operation
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.zoneOperations_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "zoneOperations.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "Name of the zone for request."),
      description: "Retrieves a list of Operation resources contained within the specified zone.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project, p_zone in
      do {
        var parameters = Compute.ZoneOperationsListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.zoneOperations_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "zones.get",
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      Options<String>("p_zone", default: [], count: 1, description: "Name of the zone resource to return."),
      description: "Returns the specified Zone resource. Gets a list of available zones by making a list() request.") {
      p_project, p_zone in
      do {
        var parameters = Compute.ZonesGetParameters()
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        if let p_zone = p_zone.first {
          parameters.zone = p_zone
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.zones_get(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }

    $0.command(
      "zones.list",
      Options<String>("p_filter", default: [], count: 1, description: "A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = 'Intel Skylake'). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = 'Intel Skylake') OR (cpuPlatform = 'Intel Broadwell') AND (scheduling.automaticRestart = true)."),
      Options<Int>("p_maxResults", default: [], count: 1, description: "The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)"),
      Options<String>("p_orderBy", default: [], count: 1, description: "Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy='creationTimestamp desc'. This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported."),
      Options<String>("p_pageToken", default: [], count: 1, description: "Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results."),
      Options<String>("p_project", default: [], count: 1, description: "Project ID for this request."),
      description: "Retrieves the list of Zone resources available to the specified project.") {
      p_filter, p_maxResults, p_orderBy, p_pageToken, p_project in
      do {
        var parameters = Compute.ZonesListParameters()
        if let p_filter = p_filter.first {
          parameters.filter = p_filter
        }
        if let p_maxResults = p_maxResults.first {
          parameters.maxResults = p_maxResults
        }
        if let p_orderBy = p_orderBy.first {
          parameters.orderBy = p_orderBy
        }
        if let p_pageToken = p_pageToken.first {
          parameters.pageToken = p_pageToken
        }
        if let p_project = p_project.first {
          parameters.project = p_project
        }
        let sem = DispatchSemaphore(value: 0)
        try compute.zones_list(parameters:parameters) {
          response, error in
          if let response = response { print ("RESPONSE: \(response)") }
          if let error = error { print ("ERROR: \(error)") }
          sem.signal()
        }
        _ = sem.wait()
      } catch let error {
        print ("Client error: \(error)")
      }
    }
  }
  group.run()
}

do {
  try main()
} catch (let error) {
  print("Application error: \(error)")
}

